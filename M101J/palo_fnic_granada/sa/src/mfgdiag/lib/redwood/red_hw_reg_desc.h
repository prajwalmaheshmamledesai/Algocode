/********************************************************************
 *
 *      File:   red_hw_reg_desc.h
 *      Name:   Sudharshan Kadari
 *
 *      Description:
 *       Register description 
 *
 *
 * Copyright (c) 1985-2007 by Cisco Systems, Inc.
 * All rights reserved.
 *
 *
 *********************************************************************/
   
   RDW_DEF("misc", 0x0000, "red_misc_sw_rst","", 0x1ffff, 0x1ffff, "cfg")
   RDW_DEF_FLD( 0x0000, "",16,0, "sw rst for individual blocks.\n[7:0]  - hi\n[11:8] - ni \n[12] - nf \n[13] - ci \n[14] - bi \n[15] - hr \n[16] - nr""", "" )


   RDW_DEF("misc", 0x0001, "red_misc_gpio_data_in","", 0xffffff, 0x0, "sta")
   RDW_DEF_FLD( 0x0001, "",23,0, "data input from gpio pins""", "" )


   RDW_DEF("misc", 0x0002, "red_misc_int_gpio_data_in","", 0xffffff, 0x0, "int")
   RDW_DEF_FLD( 0x0002, "",23,0, "interrupt per gpio input. In case SW wants quick notification """, "" )


   RDW_DEF("misc", 0x0003, "red_misc_int_gpio_data_in_msk","", 0xffffff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x0003, "",23,0, "interrupt per gpio input. In case SW wants quick notification """, "" )


   RDW_DEF("misc", 0x0004, "red_misc_int_gpio_data_in_tst","", 0xffffff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x0004, "",23,0, "interrupt per gpio input. In case SW wants quick notification """, "" )


   RDW_DEF("misc", 0x0005, "red_misc_gpio_data_out","", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x0005, "",23,0, "data output to gpio pins""", "" )


   RDW_DEF("misc", 0x0006, "red_misc_gpio_data_oe","", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x0006, "",23,0, "data direction for gpio pins.  Set to 1 for output""", "" )


   RDW_DEF("misc", 0x0007, "red_misc_mdio_mdc_oe","enable the mdio clk""", 0x7, 0x0, "cfg")
   RDW_DEF_FLD( 0x0007, "xgbe12",0,0, "nipo_xgbe12_mdio_oe for mdc""", "" )
   RDW_DEF_FLD( 0x0007, "xgbe33",1,1, "nipo_xgbe33_mdio_oe for mdc""", "" )
   RDW_DEF_FLD( 0x0007, "gbe",2,2, "cipo_gbe_mdio_oe for mdc""", "" )


   RDW_DEF("misc", 0x0008, "red_misc_cfg_i2c_slv","I2C slave configuration register""", 0x3fff, 0x2025, "cfg")
   RDW_DEF_FLD( 0x0008, "tsudat",9,0, "I2C tSU;DAT""", "" )
   RDW_DEF_FLD( 0x0008, "tsp",13,10, "I2C tSP""", "" )


   RDW_DEF("misc", 0x0009, "red_misc_cfg_i2c_drv","I2C driver configuration register""", 0xffffffff, 0x1, "cfg")
   RDW_DEF_FLD( 0x0009, "naxi_wr_rsp",0,0, "NAXI write response enable""", "" )
   RDW_DEF_FLD( 0x0009, "naxi_timeout_ena",1,1, "NAXI timeout enable""", "" )
   RDW_DEF_FLD( 0x0009, "naxi_timeout_rld",31,2, "NAXI timeout reload""", "" )


   RDW_DEF("misc", 0x000a, "red_misc_TEST__EFUSE","test config efuse force read""", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x000a, "FORCE_READ",0,0, "", "" )


   RDW_DEF("misc", 0x000b, "red_misc_TEST__EFUSE_READ_VALID","", 0x1, 0x0, "sta")
   RDW_DEF_FLD( 0x000b, "",0,0, "", "" )


   RDW_DEF("misc", 0x000c, "red_misc_cfg_jpc","jpc config jpc_""", 0x3ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x000c, "capture_dr",0,0, "", "" )
   RDW_DEF_FLD( 0x000c, "update_dr",1,1, "", "" )
   RDW_DEF_FLD( 0x000c, "shift_dr",2,2, "", "" )
   RDW_DEF_FLD( 0x000c, "select_jpc_wdr",3,3, "", "" )
   RDW_DEF_FLD( 0x000c, "select_jpc_wir",4,4, "", "" )
   RDW_DEF_FLD( 0x000c, "select_sms_wdr",5,5, "", "" )
   RDW_DEF_FLD( 0x000c, "select_sms_wir",6,6, "", "" )
   RDW_DEF_FLD( 0x000c, "tck",7,7, "", "" )
   RDW_DEF_FLD( 0x000c, "tdi",8,8, "", "" )
   RDW_DEF_FLD( 0x000c, "select_cpu_tck",9,9, "", "" )


   RDW_DEF("misc", 0x000d, "red_misc_sta_jpc","jpc status jpc_""", 0x1, 0x0, "sta")
   RDW_DEF_FLD( 0x000d, "smsg_data",0,0, "", "" )


   RDW_DEF("misc", 0x000e, "red_misc_cfg_avago","jpc config avago_""", 0x3, 0x0, "cfg")
   RDW_DEF_FLD( 0x000e, "mem_bist_launch",0,0, "", "" )
   RDW_DEF_FLD( 0x000e, "mem_bist_rst_L",1,1, "", "" )


   RDW_DEF("misc", 0x000f, "red_misc_sta_avago","jpc status avago_""", 0x3, 0x0, "sta")
   RDW_DEF_FLD( 0x000f, "mem_bist_global_fail",0,0, "", "" )
   RDW_DEF_FLD( 0x000f, "mem_bist_ready",1,1, "", "" )


   RDW_DEF("misc", 0x0010, "red_misc_cfg_pad","config red_pad""", 0xffffffff, 0xf, "cfg")
   RDW_DEF_FLD( 0x0010, "hi_rx_endian_mode",0,0, "", "" )
   RDW_DEF_FLD( 0x0010, "hi_tx_endian_mode",1,1, "", "" )
   RDW_DEF_FLD( 0x0010, "ni_rx_endian_mode",2,2, "", "" )
   RDW_DEF_FLD( 0x0010, "ni_tx_endian_mode",3,3, "", "" )
   RDW_DEF_FLD( 0x0010, "hi_sys_pll_obs_sel",7,4, "", "" )
   RDW_DEF_FLD( 0x0010, "ni_sys_pll_obs_sel",11,8, "", "" )
   RDW_DEF_FLD( 0x0010, "debug_drv_imp_config",13,12, "", "" )
   RDW_DEF_FLD( 0x0010, "debug_slew_config",15,14, "", "" )
   RDW_DEF_FLD( 0x0010, "nuova_pvt_override_dn",16,16, "", "" )
   RDW_DEF_FLD( 0x0010, "nuova_pvt_override_up",17,17, "", "" )
   RDW_DEF_FLD( 0x0010, "nuova_pvt_ovr_drv_dn",30,18, "", "" )
   RDW_DEF_FLD( 0x0010, "nuova_pvt_ovr_drv_up_00",31,31, "", "" )
   RDW_DEF("misc", 0x0011, "red_misc_cfg_pad","config red_pad""", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x0011, "nuova_pvt_ovr_drv_up_01",11,0, "", "" )


   RDW_DEF("misc", 0x0012, "red_misc_sta_pad","status red_pad""", 0x3f, 0x0, "sta")
   RDW_DEF_FLD( 0x0012, "red_pll_hi_dll_lock_312",0,0, "", "" )
   RDW_DEF_FLD( 0x0012, "red_pll_hi_pll_lock_312",1,1, "", "" )
   RDW_DEF_FLD( 0x0012, "red_pll_ni_dll_lock_312",2,2, "", "" )
   RDW_DEF_FLD( 0x0012, "red_pll_ni_pll_lock_312",3,3, "", "" )
   RDW_DEF_FLD( 0x0012, "red_pll_sys_dll_lock_750",4,4, "", "" )
   RDW_DEF_FLD( 0x0012, "red_pll_sys_pll_lock_750",5,5, "", "" )


   RDW_DEF("misc", 0x0013, "red_misc_int_err","Error interrupt registers""", 0x7f, 0x0, "int")
   RDW_DEF_FLD( 0x0013, "i2c_drv_naxi_rsp_aerr",0,0, "I2C driver NAXI response address error""", "" )
   RDW_DEF_FLD( 0x0013, "i2c_drv_naxi_rsp_derr",1,1, "I2C driver NAXI response data error""", "" )
   RDW_DEF_FLD( 0x0013, "i2c_drv_naxi_rsp_timeout",2,2, "I2C driver NAXI response timeout error""", "" )
   RDW_DEF_FLD( 0x0013, "i2c_drv_naxi_req_timeout",3,3, "I2C driver NAXI request timeout error""", "" )
   RDW_DEF_FLD( 0x0013, "rnaxi_address_error",4,4, "indicate rnaxi addressing error has occurred on write""", "" )
   RDW_DEF_FLD( 0x0013, "naxi_rd_address_error",5,5, "indicate rnaxi addressing error has occurred on read""", "" )
   RDW_DEF_FLD( 0x0013, "sbus_write_fail",6,6, "indicates an sbus write error""", "" )


   RDW_DEF("misc", 0x0014, "red_misc_int_err_msk","Error interrupt registers""", 0x7f, 0x0, "int_msk")
   RDW_DEF_FLD( 0x0014, "i2c_drv_naxi_rsp_aerr",0,0, "I2C driver NAXI response address error""", "" )
   RDW_DEF_FLD( 0x0014, "i2c_drv_naxi_rsp_derr",1,1, "I2C driver NAXI response data error""", "" )
   RDW_DEF_FLD( 0x0014, "i2c_drv_naxi_rsp_timeout",2,2, "I2C driver NAXI response timeout error""", "" )
   RDW_DEF_FLD( 0x0014, "i2c_drv_naxi_req_timeout",3,3, "I2C driver NAXI request timeout error""", "" )
   RDW_DEF_FLD( 0x0014, "rnaxi_address_error",4,4, "indicate rnaxi addressing error has occurred on write""", "" )
   RDW_DEF_FLD( 0x0014, "naxi_rd_address_error",5,5, "indicate rnaxi addressing error has occurred on read""", "" )
   RDW_DEF_FLD( 0x0014, "sbus_write_fail",6,6, "indicates an sbus write error""", "" )


   RDW_DEF("misc", 0x0015, "red_misc_int_err_tst","Error interrupt registers""", 0x7f, 0x0, "int_tst")
   RDW_DEF_FLD( 0x0015, "i2c_drv_naxi_rsp_aerr",0,0, "I2C driver NAXI response address error""", "" )
   RDW_DEF_FLD( 0x0015, "i2c_drv_naxi_rsp_derr",1,1, "I2C driver NAXI response data error""", "" )
   RDW_DEF_FLD( 0x0015, "i2c_drv_naxi_rsp_timeout",2,2, "I2C driver NAXI response timeout error""", "" )
   RDW_DEF_FLD( 0x0015, "i2c_drv_naxi_req_timeout",3,3, "I2C driver NAXI request timeout error""", "" )
   RDW_DEF_FLD( 0x0015, "rnaxi_address_error",4,4, "indicate rnaxi addressing error has occurred on write""", "" )
   RDW_DEF_FLD( 0x0015, "naxi_rd_address_error",5,5, "indicate rnaxi addressing error has occurred on read""", "" )
   RDW_DEF_FLD( 0x0015, "sbus_write_fail",6,6, "indicates an sbus write error""", "" )


   RDW_DEF("misc", 0x0016, "red_misc_sta_i2c_drv","I2C driver status register""", 0xfffffff, 0x0, "sta")
   RDW_DEF_FLD( 0x0016, "err_naxi_type",2,0, "NAXI error type""", "" )
   RDW_DEF_FLD( 0x0016, "err_naxi_attr",5,3, "NAXI error attribute""", "" )
   RDW_DEF_FLD( 0x0016, "err_naxi_addr",27,6, "NAXI error address""", "" )


   RDW_DEF("misc", 0x0017, "red_misc_sta_rnaxi_error_addr","latched rnaxi address that caused an write address error""", 0xffffffff, 0x0, "sta")
   RDW_DEF_FLD( 0x0017, "",31,0, "", "" )


   RDW_DEF("misc", 0x0018, "red_misc_sta_naxi_rd_error_addr","latched naxi address that caused an write address error""", 0xffffffff, 0x0, "sta")
   RDW_DEF_FLD( 0x0018, "",31,0, "", "" )


   RDW_DEF("misc", 0x0019, "red_misc_rnaxi_interrupt_read","dummy register used to create an address for interupt\ngathering on the rnaxi ring.  Reading this register\nwill cause the rnaxi ring to collect interrupt from all slaves""", 0x1, 0x0, "sta")
   RDW_DEF_FLD( 0x0019, "",0,0, "", "" )


   RDW_DEF("misc", 0x001a, "red_misc_cfg_debug_port","", 0x1f, 0x10, "cfg")
   RDW_DEF_FLD( 0x001a, "en",0,0, "enable debug port""", "" )
   RDW_DEF_FLD( 0x001a, "select",3,1, "which debug port to select""", "" )
   RDW_DEF_FLD( 0x001a, "oe",4,4, "enable driving debug port to pins""", "" )


   RDW_DEF("misc", 0x001b, "red_misc_debug_data","", 0xffff, 0x0, "sta")
   RDW_DEF_FLD( 0x001b, "",15,0, "debug data from ring""", "" )


   RDW_DEF("misc", 0x001c, "red_misc_jtag_id","", 0xffffffff, 0x0, "sta")
   RDW_DEF_FLD( 0x001c, "",31,0, "", "" )


   RDW_DEF("misc", 0x0020, "red_misc_die_id","", 0xffffffff, 0x0, "sta")
   RDW_DEF_FLD( 0x0020, "_00",31,0, "", "" )
   RDW_DEF("misc", 0x0021, "red_misc_die_id","", 0xffffffff, 0x0, "sta")
   RDW_DEF_FLD( 0x0021, "_01",31,0, "", "" )
   RDW_DEF("misc", 0x0022, "red_misc_die_id","", 0xffffff, 0x0, "sta")
   RDW_DEF_FLD( 0x0022, "_02",23,0, "", "" )


   RDW_DEF("misc", 0x0023, "red_misc_misc_version","", 0xffffffff, 0x71002, "cfg")
   RDW_DEF_FLD( 0x0023, "",31,0, "date version of misc block""", "" )


   RDW_DEF("misc", 0x0024, "red_misc_sta_spare","", 0xffffffff, 0x71002, "sta")
   RDW_DEF_FLD( 0x0024, "",31,0, "", "" )


   RDW_DEF_SBUS("misc", 0x10000, 0x10000, "red_misc_dhs_sbus","SBus Memory", 0xffffffff, 0x0, "dhs")


   RDW_DEF("nf", 0x20000, "red_nf_cfg_reg0","NF configuration0 information""", 0x7ff7ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x20000, "nif0_mask",10,0, "nif0 multicast bit mask""", "" )
   RDW_DEF_FLD( 0x20000, "nif1_mask",22,12, "nif1 multicast bit mask""", "" )


   RDW_DEF("nf", 0x20001, "red_nf_cfg_reg1","NF configuration1 information""", 0x37ff7ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x20001, "nif2_mask",10,0, "nif2 multicast bit mask""", "" )
   RDW_DEF_FLD( 0x20001, "nif3_mask",22,12, "nif3 multicast bit mask""", "" )
   RDW_DEF_FLD( 0x20001, "ecc_dbl_crctn",24,24, "ecc disable correction""", "" )
   RDW_DEF_FLD( 0x20001, "ecc_dbl_dtctn",25,25, "ecc disable detection""", "" )


   RDW_DEF("nf", 0x20002, "red_nf_sta_ecc_ce","", 0xfff1f, 0x0, "sta")
   RDW_DEF_FLD( 0x20002, "mcst_ecc_ce_sym",4,0, "nf multicast table correctable ecc syndrome""", "" )
   RDW_DEF_FLD( 0x20002, "mcst_ecc_ce_addr",19,8, "nf multicast table correctable ecc address""", "" )


   RDW_DEF("nf", 0x20003, "red_nf_sta_ecc_uce","", 0xfff1f, 0x0, "sta")
   RDW_DEF_FLD( 0x20003, "mcst_ecc_uce_sym",4,0, "nf multicast table un-correctable ecc syndrome""", "" )
   RDW_DEF_FLD( 0x20003, "mcst_ecc_uce_addr",19,8, "nf multicast table un-correctable ecc address""", "" )


   RDW_DEF("nf", 0x20004, "red_nf_cnt_mcst_ecc_ce","", 0xff, 0x0, "cnt")
   RDW_DEF_FLD( 0x20004, "",7,0, "nf multicast table correctable ecc error count""", "" )


   RDW_DEF("nf", 0x20005, "red_nf_cnt_mcst_ecc_uce","", 0xff, 0x0, "cnt")
   RDW_DEF_FLD( 0x20005, "",7,0, "nf multicast table un-correctable ecc error count""", "" )


   RDW_DEF("nf", 0x20006, "red_nf_int_vec","", 0x3, 0x0, "int")
   RDW_DEF_FLD( 0x20006, "mcst_ecc_ce",0,0, "nf multicast table correctable ecc error""", "" )
   RDW_DEF_FLD( 0x20006, "mcst_ecc_uce",1,1, "nf multicast table un-correctable ecc error""", "" )


   RDW_DEF("nf", 0x20007, "red_nf_int_vec_msk","", 0x3, 0x0, "int_msk")
   RDW_DEF_FLD( 0x20007, "mcst_ecc_ce",0,0, "nf multicast table correctable ecc error""", "" )
   RDW_DEF_FLD( 0x20007, "mcst_ecc_uce",1,1, "nf multicast table un-correctable ecc error""", "" )


   RDW_DEF("nf", 0x20008, "red_nf_int_vec_tst","", 0x3, 0x0, "int_tst")
   RDW_DEF_FLD( 0x20008, "mcst_ecc_ce",0,0, "nf multicast table correctable ecc error""", "" )
   RDW_DEF_FLD( 0x20008, "mcst_ecc_uce",1,1, "nf multicast table un-correctable ecc error""", "" )


   RDW_DEF("nf", 0x20009, "red_nf_cfg_mcst_memif","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x20009, "col_sel",3,0, "No use for nf_mcst memory. Just make it consistent with other memifs""", "" )
   RDW_DEF_FLD( 0x20009, "ecc_bypass",4,4, "", "" )
   RDW_DEF_FLD( 0x20009, "force_enable",5,5, "Ties the SRAm enable to 1""", "" )
   RDW_DEF_FLD( 0x20009, "force_drdy",6,6, "Ties the write and read drdy to 1 so that memif can do back to back accesses""", "" )
   RDW_DEF_FLD( 0x20009, "end",18,7, "MEMIF_CPU_MEM_END - End of SRAM Address for auto fill and auto verify operation""", "" )


   RDW_DEF("nf", 0x2000a, "red_nf_dhs_mcst_memif_cmd","MEMIF_CPU_MEM_CMD - Command register for CPU access to the SRAM""", 0x1ffffff, 0xc00, "dhs")
   RDW_DEF_FLD( 0x2000a, "autoinc",0,0, "address will automatically increment for each data access.""", "" )
   RDW_DEF_FLD( 0x2000a, "autowr",1,1, "writes will occur automatically based on write to data register""", "" )
   RDW_DEF_FLD( 0x2000a, "autord",2,2, "reads will occur automatically based on read to data register""", "" )
   RDW_DEF_FLD( 0x2000a, "immwr",3,3, "when not autowr, setting this bit causes a write to occur""", "" )
   RDW_DEF_FLD( 0x2000a, "immrd",4,4, "when not autord, setting this bit causes a read to occur""", "" )
   RDW_DEF_FLD( 0x2000a, "autofill",5,5, "when set, an auto fill will hapen starting from mem_strt to mem_end""", "" )
   RDW_DEF_FLD( 0x2000a, "autovrfy",6,6, "when set, an auto verify process will start from mem_strt to mem_end""", "" )
   RDW_DEF_FLD( 0x2000a, "autotest",7,7, "when set, an auto test process will start from mem_strt to mem_end""", "" )
   RDW_DEF_FLD( 0x2000a, "autoflip",8,8, "when set, the data pattern will be flipped to be written alternatively""", "" )
   RDW_DEF_FLD( 0x2000a, "autoloop",9,9, "when set, the auto fill or auto loop function will loop back to si_mem_addr when reaching end""", "" )
   RDW_DEF_FLD( 0x2000a, "diracc",10,10, "direct access enabled""", "" )
   RDW_DEF_FLD( 0x2000a, "diraddr",11,11, "direct address enabled. BM memories are not exposed to host address space directly. But in the future\nthis can be enabled.""", "" )
   RDW_DEF_FLD( 0x2000a, "reserved",15,12, "reserved""", "" )
   RDW_DEF_FLD( 0x2000a, "unused_bits",24,16, "set this to the number of bits in the data result that are not used""", "" )


   RDW_DEF("nf", 0x2000b, "red_nf_dhs_mcst_memif_sta","MEMIF_CPU_MEM_STA - Status register for CPU access to the SRAM""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x2000b, "autowr_err",0,0, "data write attempted before ready""", "" )
   RDW_DEF_FLD( 0x2000b, "immwr_err",1,1, "immediate data write before ready""", "" )
   RDW_DEF_FLD( 0x2000b, "rd_valid",2,2, "read data is available in data register""", "" )
   RDW_DEF_FLD( 0x2000b, "wr_busy",3,3, "write data is busy not written to sram yet.""", "" )
   RDW_DEF_FLD( 0x2000b, "autotest_done",4,4, "auto fill is done.""", "" )
   RDW_DEF_FLD( 0x2000b, "autovrfy_err",5,5, "auto verify error.""", "" )


   RDW_DEF("nf", 0x2000c, "red_nf_dhs_mcst_memif_addr","MEMIF_CPU_MEM_ADDR - External SRAM Address for MEMIF_HDTL_cpu_memory read and write and also the start address for auto test""", 0xfff, 0x0, "dhs")
   RDW_DEF_FLD( 0x2000c, "field",11,0, "", "" )


    RDW_DEF_DHS("nf", 0x21000, "red_nf_dhs_mcst_memif_data", "MEMIF_CPU_MEM_DATA - Data Word to Read or Write from nf_mcst RAM for bits [15:0]""", 0xffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x21000, "mvctr",9,0,"Multicast vector","" )
    RDW_DEF_DHS_FLD( 0x21000, "drop",10,10,"Multicast pkt drop indication to the SS","" )
    RDW_DEF_DHS_FLD( 0x21000, "ecc",15,11,"ECC for the data","" )


   RDW_DEF("nf", 0x22000, "red_nf_cfg_debug","debug mux control register for NF block""", 0x1f, 0x0, "cfg")
   RDW_DEF_FLD( 0x22000, "enable",0,0, "debug bus master is NF""", "" )
   RDW_DEF_FLD( 0x22000, "select",4,1, "debug mux control. Select up to 16 internal buses""", "" )


   RDW_DEF("nf", 0x22001, "red_nf_misc_version","", 0xffffffff, 0x71002, "cfg")
   RDW_DEF_FLD( 0x22001, "",31,0, "date version of nf block""", "" )


   RDW_DEF("nf", 0x22002, "red_nf_sta_spare","", 0xffffffff, 0x71002, "sta")
   RDW_DEF_FLD( 0x22002, "",31,0, "", "" )


    RDW_DEF_DHS("ci", 0x28000, "red_ci0_dhs_mac_stat", "10Mbps/100Mbps/1Gbps MAC statistics access""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x28000, "",31,0,"stats access","" )


   RDW_DEF("ci", 0x28040, "red_ci0_cnt_mac_rx_octet_oflo","overflow counter for 10Mbps/100Mbps/1Gbps rx octets""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x28040, "",31,0, "overflow count""", "" )


   RDW_DEF("ci", 0x28041, "red_ci0_cnt_mac_tx_octet_oflo","overflow counter for 10Mbps/100Mbps/1Gbps tx octets""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x28041, "",31,0, "overflow count""", "" )


   RDW_DEF("ci", 0x28042, "red_ci0_port_cfg","ci configuration information""", 0x3fff, 0x802, "cfg")
   RDW_DEF_FLD( 0x28042, "cif_vntag_mode",0,0, "cif is in vntag mode""", "" )
   RDW_DEF_FLD( 0x28042, "cif_vntag_prsing_en",1,1, "Enable for vntag parsing in the cif port rx & tx parsers""", "" )
   RDW_DEF_FLD( 0x28042, "nif_ports_vntag_mode",5,2, "Indication to the cif of the nif port mode status(ce vs vntag)""", "" )
   RDW_DEF_FLD( 0x28042, "rx_vntag_passthru",6,6, "don't rewrite/strip/insert vntag's""", "" )
   RDW_DEF_FLD( 0x28042, "tx_vntag_passthru",7,7, "don't rewrite/strip/insert vntag's""", "" )
   RDW_DEF_FLD( 0x28042, "cmtag_version",9,8, "CMTAG version input to the parser""", "" )
   RDW_DEF_FLD( 0x28042, "tx_err_en",10,10, "Enable the tx_error input to the GBE MAC from the crc generation module in the tx data path""", "" )
   RDW_DEF_FLD( 0x28042, "rx_err_en",11,11, "Enable the error of the rx data path to be transmitted to the SS""", "" )
   RDW_DEF_FLD( 0x28042, "tx_debug_en",12,12, "Enable for the frame tx thru the slave path for debug""", "" )
   RDW_DEF_FLD( 0x28042, "rx_debug_en",13,13, "Enable for the frame rx thru the slave path for debug""", "" )


   RDW_DEF("ci", 0x28043, "red_ci0_gbe_cfg_mac","configuration related to the dover mac""", 0x3ff, 0x40, "cfg")
   RDW_DEF_FLD( 0x28043, "runt_pkt_size",7,0, "Packets smaller than this(in bytes) will be considered runt packets and will be dropped by the runt drop module""", "" )
   RDW_DEF_FLD( 0x28043, "sw_rst",8,8, "Software - reset""", "" )
   RDW_DEF_FLD( 0x28043, "mii_nibble_swap",9,9, "Swaps the order in which the two nibbles of a byte are transmitted/received. 0->lo_nibble, 1->hi_nibble xmtd/rcvd first""", "" )


   RDW_DEF("ci", 0x28044, "red_ci0_cfg_eg_nspi_timer","MAC Rx nspi bus timer. In unit of 256 core clock cycles. Zero==disable""", 0xffff, 0x20, "cfg")
   RDW_DEF_FLD( 0x28044, "",15,0, "", "" )


   RDW_DEF("ci", 0x28045, "red_ci0_int_vec","Interrupt vector of the cif block""", 0x1ff, 0x0, "int")
   RDW_DEF_FLD( 0x28045, "tx_runt_pkt_drop",0,0, "received a runt pkt in the tx direction""", "" )
   RDW_DEF_FLD( 0x28045, "rx_runt_pkt_drop",1,1, "received a runt pkt in the rx direction""", "" )
   RDW_DEF_FLD( 0x28045, "from_switch_drop",2,2, "from switch flagged pkt rcvd from external cpu dropped because src_vif set to 0x0""", "" )
   RDW_DEF_FLD( 0x28045, "from_host_mc_drop",3,3, "from host mc flagged pkt rcvd from external cpu dropped because mc not supported""", "" )
   RDW_DEF_FLD( 0x28045, "from_host_uc_drop",4,4, "from host uc flagged pkt rcvd from external cpu dropped because dst_vif set to 0x0""", "" )
   RDW_DEF_FLD( 0x28045, "tx_prsr_l2_err",5,5, "tx parser asserted the info2_hdr_err""", "" )
   RDW_DEF_FLD( 0x28045, "rx_prsr_l2_err",6,6, "rx parser asserted the info2_hdr_err""", "" )
   RDW_DEF_FLD( 0x28045, "tx_crc_err",7,7, "rx data path mp_net_crc_chk bad_crc_inc asserted""", "" )
   RDW_DEF_FLD( 0x28045, "rx_crc_err",8,8, "rx data path mp_net_crc_chk bad_crc_inc asserted""", "" )


   RDW_DEF("ci", 0x28046, "red_ci0_int_vec_msk","Interrupt vector of the cif block""", 0x1ff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x28046, "tx_runt_pkt_drop",0,0, "received a runt pkt in the tx direction""", "" )
   RDW_DEF_FLD( 0x28046, "rx_runt_pkt_drop",1,1, "received a runt pkt in the rx direction""", "" )
   RDW_DEF_FLD( 0x28046, "from_switch_drop",2,2, "from switch flagged pkt rcvd from external cpu dropped because src_vif set to 0x0""", "" )
   RDW_DEF_FLD( 0x28046, "from_host_mc_drop",3,3, "from host mc flagged pkt rcvd from external cpu dropped because mc not supported""", "" )
   RDW_DEF_FLD( 0x28046, "from_host_uc_drop",4,4, "from host uc flagged pkt rcvd from external cpu dropped because dst_vif set to 0x0""", "" )
   RDW_DEF_FLD( 0x28046, "tx_prsr_l2_err",5,5, "tx parser asserted the info2_hdr_err""", "" )
   RDW_DEF_FLD( 0x28046, "rx_prsr_l2_err",6,6, "rx parser asserted the info2_hdr_err""", "" )
   RDW_DEF_FLD( 0x28046, "tx_crc_err",7,7, "rx data path mp_net_crc_chk bad_crc_inc asserted""", "" )
   RDW_DEF_FLD( 0x28046, "rx_crc_err",8,8, "rx data path mp_net_crc_chk bad_crc_inc asserted""", "" )


   RDW_DEF("ci", 0x28047, "red_ci0_int_vec_tst","Interrupt vector of the cif block""", 0x1ff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x28047, "tx_runt_pkt_drop",0,0, "received a runt pkt in the tx direction""", "" )
   RDW_DEF_FLD( 0x28047, "rx_runt_pkt_drop",1,1, "received a runt pkt in the rx direction""", "" )
   RDW_DEF_FLD( 0x28047, "from_switch_drop",2,2, "from switch flagged pkt rcvd from external cpu dropped because src_vif set to 0x0""", "" )
   RDW_DEF_FLD( 0x28047, "from_host_mc_drop",3,3, "from host mc flagged pkt rcvd from external cpu dropped because mc not supported""", "" )
   RDW_DEF_FLD( 0x28047, "from_host_uc_drop",4,4, "from host uc flagged pkt rcvd from external cpu dropped because dst_vif set to 0x0""", "" )
   RDW_DEF_FLD( 0x28047, "tx_prsr_l2_err",5,5, "tx parser asserted the info2_hdr_err""", "" )
   RDW_DEF_FLD( 0x28047, "rx_prsr_l2_err",6,6, "rx parser asserted the info2_hdr_err""", "" )
   RDW_DEF_FLD( 0x28047, "tx_crc_err",7,7, "rx data path mp_net_crc_chk bad_crc_inc asserted""", "" )
   RDW_DEF_FLD( 0x28047, "rx_crc_err",8,8, "rx data path mp_net_crc_chk bad_crc_inc asserted""", "" )


   RDW_DEF("ci", 0x28048, "red_ci0_int_err_vec","Interrupt vector indicating the error bit set along the rx & tx datapath""", 0x3fffffff, 0x0, "int")
   RDW_DEF_FLD( 0x28048, "rxdpath_in_rx_err",0,0, "rx data path rx_err is set""", "" )
   RDW_DEF_FLD( 0x28048, "rxdpath_gbox2to1_err",1,1, "rx data path gbox2to1 tx_err is set""", "" )
   RDW_DEF_FLD( 0x28048, "rxdpath_runt_drop_err",2,2, "rx data path runt_drop tx_err is set""", "" )
   RDW_DEF_FLD( 0x28048, "rxdpath_pad_dcplr_err",3,3, "rx data path pad_dcplr tx_err is set""", "" )
   RDW_DEF_FLD( 0x28048, "rxdpath_crc_chk_err",4,4, "rx data path crc_chkr tx_err is se""", "" )
   RDW_DEF_FLD( 0x28048, "rxdpath_crc_del_err",5,5, "rx data path crc_del tx_err is set""", "" )
   RDW_DEF_FLD( 0x28048, "rxdpath_prsr_err",6,6, "rx data path prsr tx_err is set""", "" )
   RDW_DEF_FLD( 0x28048, "rxdpath_fifo_err",7,7, "rx data path fifo tx_err is set""", "" )
   RDW_DEF_FLD( 0x28048, "rxdpath_qtag_err",8,8, "rx data path qtag tx_err is set""", "" )
   RDW_DEF_FLD( 0x28048, "rxdpath_qtag_dcplr_err",9,9, "rx data path qtag_dcplr tx_err is set""", "" )
   RDW_DEF_FLD( 0x28048, "rxdpath_vntag_err",10,10, "rx data path vntag tx_err is set""", "" )
   RDW_DEF_FLD( 0x28048, "rxdpath_pktdrp_err",11,11, "rx data path pktdrp tx_err is set""", "" )
   RDW_DEF_FLD( 0x28048, "rxdpath_pad_err",12,12, "rx data path pad tx_err is set""", "" )
   RDW_DEF_FLD( 0x28048, "rxdpath_crcgen_err",13,13, "rx data path crcgen tx_err is set""", "" )
   RDW_DEF_FLD( 0x28048, "rxdpath_out_err",14,14, "rx data path tx_err is set""", "" )
   RDW_DEF_FLD( 0x28048, "txdpath_in_rx_err",15,15, "tx data path tx_err is set""", "" )
   RDW_DEF_FLD( 0x28048, "txdpath_gbox2to1_err",16,16, "tx data path gbox2to1 tx_err is set""", "" )
   RDW_DEF_FLD( 0x28048, "txdpath_runt_drop_err",17,17, "tx data path runt_drop tx_err is set""", "" )
   RDW_DEF_FLD( 0x28048, "txdpath_pad_dcplr_err",18,18, "tx data path pad_dcplr tx_err is set""", "" )
   RDW_DEF_FLD( 0x28048, "txdpath_crc_chk_err",19,19, "tx data path crc_chkr tx_err is se""", "" )
   RDW_DEF_FLD( 0x28048, "txdpath_crc_del_err",20,20, "tx data path crc_del tx_err is set""", "" )
   RDW_DEF_FLD( 0x28048, "txdpath_prsr_err",21,21, "tx data path prsr tx_err is set""", "" )
   RDW_DEF_FLD( 0x28048, "txdpath_fifo_err",22,22, "tx data path fifo tx_err is set""", "" )
   RDW_DEF_FLD( 0x28048, "txdpath_qtag_err",23,23, "tx data path qtag tx_err is set""", "" )
   RDW_DEF_FLD( 0x28048, "txdpath_qtag_dcplr_err",24,24, "tx data path qtag_dcplr tx_err is set""", "" )
   RDW_DEF_FLD( 0x28048, "txdpath_vntag_err",25,25, "tx data path vntag tx_err is set""", "" )
   RDW_DEF_FLD( 0x28048, "txdpath_pktdrp_err",26,26, "tx data path pktdrp tx_err is set""", "" )
   RDW_DEF_FLD( 0x28048, "txdpath_pad_err",27,27, "tx data path pad tx_err is set""", "" )
   RDW_DEF_FLD( 0x28048, "txdpath_crcgen_err",28,28, "tx data path crcgen tx_err is set""", "" )
   RDW_DEF_FLD( 0x28048, "txdpath_out_err",29,29, "tx data path tx_err is set""", "" )


   RDW_DEF("ci", 0x28049, "red_ci0_int_err_vec_msk","Interrupt vector indicating the error bit set along the rx & tx datapath""", 0x3fffffff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x28049, "rxdpath_in_rx_err",0,0, "rx data path rx_err is set""", "" )
   RDW_DEF_FLD( 0x28049, "rxdpath_gbox2to1_err",1,1, "rx data path gbox2to1 tx_err is set""", "" )
   RDW_DEF_FLD( 0x28049, "rxdpath_runt_drop_err",2,2, "rx data path runt_drop tx_err is set""", "" )
   RDW_DEF_FLD( 0x28049, "rxdpath_pad_dcplr_err",3,3, "rx data path pad_dcplr tx_err is set""", "" )
   RDW_DEF_FLD( 0x28049, "rxdpath_crc_chk_err",4,4, "rx data path crc_chkr tx_err is se""", "" )
   RDW_DEF_FLD( 0x28049, "rxdpath_crc_del_err",5,5, "rx data path crc_del tx_err is set""", "" )
   RDW_DEF_FLD( 0x28049, "rxdpath_prsr_err",6,6, "rx data path prsr tx_err is set""", "" )
   RDW_DEF_FLD( 0x28049, "rxdpath_fifo_err",7,7, "rx data path fifo tx_err is set""", "" )
   RDW_DEF_FLD( 0x28049, "rxdpath_qtag_err",8,8, "rx data path qtag tx_err is set""", "" )
   RDW_DEF_FLD( 0x28049, "rxdpath_qtag_dcplr_err",9,9, "rx data path qtag_dcplr tx_err is set""", "" )
   RDW_DEF_FLD( 0x28049, "rxdpath_vntag_err",10,10, "rx data path vntag tx_err is set""", "" )
   RDW_DEF_FLD( 0x28049, "rxdpath_pktdrp_err",11,11, "rx data path pktdrp tx_err is set""", "" )
   RDW_DEF_FLD( 0x28049, "rxdpath_pad_err",12,12, "rx data path pad tx_err is set""", "" )
   RDW_DEF_FLD( 0x28049, "rxdpath_crcgen_err",13,13, "rx data path crcgen tx_err is set""", "" )
   RDW_DEF_FLD( 0x28049, "rxdpath_out_err",14,14, "rx data path tx_err is set""", "" )
   RDW_DEF_FLD( 0x28049, "txdpath_in_rx_err",15,15, "tx data path tx_err is set""", "" )
   RDW_DEF_FLD( 0x28049, "txdpath_gbox2to1_err",16,16, "tx data path gbox2to1 tx_err is set""", "" )
   RDW_DEF_FLD( 0x28049, "txdpath_runt_drop_err",17,17, "tx data path runt_drop tx_err is set""", "" )
   RDW_DEF_FLD( 0x28049, "txdpath_pad_dcplr_err",18,18, "tx data path pad_dcplr tx_err is set""", "" )
   RDW_DEF_FLD( 0x28049, "txdpath_crc_chk_err",19,19, "tx data path crc_chkr tx_err is se""", "" )
   RDW_DEF_FLD( 0x28049, "txdpath_crc_del_err",20,20, "tx data path crc_del tx_err is set""", "" )
   RDW_DEF_FLD( 0x28049, "txdpath_prsr_err",21,21, "tx data path prsr tx_err is set""", "" )
   RDW_DEF_FLD( 0x28049, "txdpath_fifo_err",22,22, "tx data path fifo tx_err is set""", "" )
   RDW_DEF_FLD( 0x28049, "txdpath_qtag_err",23,23, "tx data path qtag tx_err is set""", "" )
   RDW_DEF_FLD( 0x28049, "txdpath_qtag_dcplr_err",24,24, "tx data path qtag_dcplr tx_err is set""", "" )
   RDW_DEF_FLD( 0x28049, "txdpath_vntag_err",25,25, "tx data path vntag tx_err is set""", "" )
   RDW_DEF_FLD( 0x28049, "txdpath_pktdrp_err",26,26, "tx data path pktdrp tx_err is set""", "" )
   RDW_DEF_FLD( 0x28049, "txdpath_pad_err",27,27, "tx data path pad tx_err is set""", "" )
   RDW_DEF_FLD( 0x28049, "txdpath_crcgen_err",28,28, "tx data path crcgen tx_err is set""", "" )
   RDW_DEF_FLD( 0x28049, "txdpath_out_err",29,29, "tx data path tx_err is set""", "" )


   RDW_DEF("ci", 0x2804a, "red_ci0_int_err_vec_tst","Interrupt vector indicating the error bit set along the rx & tx datapath""", 0x3fffffff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x2804a, "rxdpath_in_rx_err",0,0, "rx data path rx_err is set""", "" )
   RDW_DEF_FLD( 0x2804a, "rxdpath_gbox2to1_err",1,1, "rx data path gbox2to1 tx_err is set""", "" )
   RDW_DEF_FLD( 0x2804a, "rxdpath_runt_drop_err",2,2, "rx data path runt_drop tx_err is set""", "" )
   RDW_DEF_FLD( 0x2804a, "rxdpath_pad_dcplr_err",3,3, "rx data path pad_dcplr tx_err is set""", "" )
   RDW_DEF_FLD( 0x2804a, "rxdpath_crc_chk_err",4,4, "rx data path crc_chkr tx_err is se""", "" )
   RDW_DEF_FLD( 0x2804a, "rxdpath_crc_del_err",5,5, "rx data path crc_del tx_err is set""", "" )
   RDW_DEF_FLD( 0x2804a, "rxdpath_prsr_err",6,6, "rx data path prsr tx_err is set""", "" )
   RDW_DEF_FLD( 0x2804a, "rxdpath_fifo_err",7,7, "rx data path fifo tx_err is set""", "" )
   RDW_DEF_FLD( 0x2804a, "rxdpath_qtag_err",8,8, "rx data path qtag tx_err is set""", "" )
   RDW_DEF_FLD( 0x2804a, "rxdpath_qtag_dcplr_err",9,9, "rx data path qtag_dcplr tx_err is set""", "" )
   RDW_DEF_FLD( 0x2804a, "rxdpath_vntag_err",10,10, "rx data path vntag tx_err is set""", "" )
   RDW_DEF_FLD( 0x2804a, "rxdpath_pktdrp_err",11,11, "rx data path pktdrp tx_err is set""", "" )
   RDW_DEF_FLD( 0x2804a, "rxdpath_pad_err",12,12, "rx data path pad tx_err is set""", "" )
   RDW_DEF_FLD( 0x2804a, "rxdpath_crcgen_err",13,13, "rx data path crcgen tx_err is set""", "" )
   RDW_DEF_FLD( 0x2804a, "rxdpath_out_err",14,14, "rx data path tx_err is set""", "" )
   RDW_DEF_FLD( 0x2804a, "txdpath_in_rx_err",15,15, "tx data path tx_err is set""", "" )
   RDW_DEF_FLD( 0x2804a, "txdpath_gbox2to1_err",16,16, "tx data path gbox2to1 tx_err is set""", "" )
   RDW_DEF_FLD( 0x2804a, "txdpath_runt_drop_err",17,17, "tx data path runt_drop tx_err is set""", "" )
   RDW_DEF_FLD( 0x2804a, "txdpath_pad_dcplr_err",18,18, "tx data path pad_dcplr tx_err is set""", "" )
   RDW_DEF_FLD( 0x2804a, "txdpath_crc_chk_err",19,19, "tx data path crc_chkr tx_err is se""", "" )
   RDW_DEF_FLD( 0x2804a, "txdpath_crc_del_err",20,20, "tx data path crc_del tx_err is set""", "" )
   RDW_DEF_FLD( 0x2804a, "txdpath_prsr_err",21,21, "tx data path prsr tx_err is set""", "" )
   RDW_DEF_FLD( 0x2804a, "txdpath_fifo_err",22,22, "tx data path fifo tx_err is set""", "" )
   RDW_DEF_FLD( 0x2804a, "txdpath_qtag_err",23,23, "tx data path qtag tx_err is set""", "" )
   RDW_DEF_FLD( 0x2804a, "txdpath_qtag_dcplr_err",24,24, "tx data path qtag_dcplr tx_err is set""", "" )
   RDW_DEF_FLD( 0x2804a, "txdpath_vntag_err",25,25, "tx data path vntag tx_err is set""", "" )
   RDW_DEF_FLD( 0x2804a, "txdpath_pktdrp_err",26,26, "tx data path pktdrp tx_err is set""", "" )
   RDW_DEF_FLD( 0x2804a, "txdpath_pad_err",27,27, "tx data path pad tx_err is set""", "" )
   RDW_DEF_FLD( 0x2804a, "txdpath_crcgen_err",28,28, "tx data path crcgen tx_err is set""", "" )
   RDW_DEF_FLD( 0x2804a, "txdpath_out_err",29,29, "tx data path tx_err is set""", "" )


   RDW_DEF("ci", 0x2804b, "red_ci0_sta_tx_runt_pkt_size","", 0xff, 0x0, "sta")
   RDW_DEF_FLD( 0x2804b, "",7,0, "size of the tx runt packet received""", "" )


   RDW_DEF("ci", 0x2804c, "red_ci0_sta_rx_runt_pkt_size","", 0xff, 0x0, "sta")
   RDW_DEF_FLD( 0x2804c, "",7,0, "size of the rx runt packet received""", "" )


    RDW_DEF_DHS("ci", 0x28050, "red_ci0_dhs_rx_fcoe_cnt_00", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x28050, "_00",31,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("ci", 0x28051, "red_ci0_dhs_rx_fcoe_cnt_01", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x28051, "_01",3,0,"fcoe/non fcoe counts.\n","" )


    RDW_DEF_DHS("ci", 0x28058, "red_ci0_dhs_tx_fcoe_cnt_00", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x28058, "_00",31,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("ci", 0x28059, "red_ci0_dhs_tx_fcoe_cnt_01", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x28059, "_01",3,0,"fcoe/non fcoe counts.\n","" )


   RDW_DEF("ci", 0x28060, "red_ci0_sta_stat_upper","upper 4 bits of the dhs_mac_stat""", 0xf, 0x0, "sta")
   RDW_DEF_FLD( 0x28060, "",3,0, "SW can read this after reading the dhs_mac_stat or dhs_fcoe_count to get the\nupper 4 bits of the stats. Other wise the 2nd dhs read will\nget the latest value of the dhs""", "" )


   RDW_DEF("ci", 0x28061, "red_ci0_cnt_tx_runt_pkt_drop","", 0xff, 0x0, "cnt")
   RDW_DEF_FLD( 0x28061, "",7,0, "tx runt packet drop""", "" )


   RDW_DEF("ci", 0x28062, "red_ci0_cnt_rx_runt_pkt_drop","", 0xff, 0x0, "cnt")
   RDW_DEF_FLD( 0x28062, "",7,0, "rx runt packet drop""", "" )


   RDW_DEF("ci", 0x28063, "red_ci0_cnt_switch_drop","", 0xff, 0x0, "cnt")
   RDW_DEF_FLD( 0x28063, "",7,0, "from switch flagged pkts rcvd from external cpu drop cnt because src_vif set to 0x0""", "" )


   RDW_DEF("ci", 0x28064, "red_ci0_cnt_host_mc_drop","", 0xff, 0x0, "cnt")
   RDW_DEF_FLD( 0x28064, "",7,0, "from host mc flagged pkts rcvd from external cpu drop cnt because mc not supported""", "" )


   RDW_DEF("ci", 0x28065, "red_ci0_cnt_host_uc_drop","", 0xff, 0x0, "cnt")
   RDW_DEF_FLD( 0x28065, "",7,0, "from host uc flagged pkts rcvd from external cpu drop cnt because dst_vif set to 0x0""", "" )


   RDW_DEF("ci", 0x28066, "red_ci0_cnt_tx_crc_err","", 0xf, 0x0, "cnt")
   RDW_DEF_FLD( 0x28066, "",3,0, "Count of crc errors received from the nr/hr interface""", "" )


   RDW_DEF("ci", 0x28067, "red_ci0_cnt_rx_crc_err","", 0xf, 0x0, "cnt")
   RDW_DEF_FLD( 0x28067, "",3,0, "Count of crc errors received from the mac interface""", "" )


   RDW_DEF("ci", 0x28068, "red_ci0_cfg_ci_version","", 0xffffffff, 0x71002, "cfg")
   RDW_DEF_FLD( 0x28068, "",31,0, "date version of ci block""", "" )


   RDW_DEF("ci", 0x28069, "red_ci0_sta_ci_spare","", 0xffffffff, 0x71002, "sta")
   RDW_DEF_FLD( 0x28069, "",31,0, "", "" )


   RDW_DEF("ci", 0x2806a, "red_ci0_cfg_debug","debug mux control register for CI block""", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2806a, "enable",0,0, "debug bus master is CI""", "" )
   RDW_DEF_FLD( 0x2806a, "select",5,1, "top debug mux control. Select up to 16 internal buses""", "" )
   RDW_DEF_FLD( 0x2806a, "mux_ctl",11,6, "block level mux control""", "" )


   RDW_DEF("ci", 0x2806c, "red_ci0_dhs_fin","debug frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x2806c, "_00",31,0, "debug frame in""", "" )
   RDW_DEF("ci", 0x2806d, "red_ci0_dhs_fin","debug frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x2806d, "_01",31,0, "debug frame in""", "" )
   RDW_DEF("ci", 0x2806e, "red_ci0_dhs_fin","debug frame in""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x2806e, "_02",5,0, "debug frame in""", "" )


   RDW_DEF("ci", 0x28070, "red_ci0_dhs_fout","debug frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x28070, "_00",31,0, "debug frame out""", "" )
   RDW_DEF("ci", 0x28071, "red_ci0_dhs_fout","debug frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x28071, "_01",31,0, "debug frame out""", "" )
   RDW_DEF("ci", 0x28072, "red_ci0_dhs_fout","debug frame out""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x28072, "_02",5,0, "debug frame out""", "" )


   RDW_DEF("ci", 0x28073, "red_ci0_cfg_eth_type_fcoe","", 0xffff, 0x8906, "cfg")
   RDW_DEF_FLD( 0x28073, "",15,0, "ethertype for fcoe packets""", "" )


   RDW_DEF("ci", 0x28074, "red_ci0_cfg_eth_type_vntag","", 0xffff, 0x564e, "cfg")
   RDW_DEF_FLD( 0x28074, "",15,0, "ethertype for vntag packets""", "" )


   RDW_DEF("ci", 0x28075, "red_ci0_cfg_eth_type_stag","", 0xffff, 0x88a8, "cfg")
   RDW_DEF_FLD( 0x28075, "",15,0, "ethertype for stag packets""", "" )


   RDW_DEF("ci", 0x28076, "red_ci0_cfg_eth_type_cmd","", 0xffff, 0x8850, "cfg")
   RDW_DEF_FLD( 0x28076, "",15,0, "cisco metadata ethertype""", "" )


   RDW_DEF("ci", 0x28077, "red_ci0_cfg_eth_type_cmtag","", 0xffff, 0x8904, "cfg")
   RDW_DEF_FLD( 0x28077, "",15,0, "cmtag (RLT) tag ethertype""", "" )


   RDW_DEF("ci", 0x28078, "red_ci0_cfg_max_cmd_size","", 0xff, 0x4, "cfg")
   RDW_DEF_FLD( 0x28078, "",7,0, "maximum cmd size in words""", "" )


   RDW_DEF("ci", 0x28079, "red_ci0_rx_vif_min","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x28079, "",11,0, "minimum hif value for checking incoming packets""", "" )


   RDW_DEF("ci", 0x2807a, "red_ci0_rx_vif_max","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2807a, "",11,0, "maximum hif value for checking incoming packets""", "" )


   RDW_DEF("ci", 0x2807b, "red_ci0_rx_vif_offset","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2807b, "",11,0, "vif offset to add to src vif on incoming packets""", "" )


   RDW_DEF("ci", 0x2807c, "red_ci0_tx_vif_min","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2807c, "",11,0, "minimum hif value for checking incoming packets""", "" )


   RDW_DEF("ci", 0x2807d, "red_ci0_tx_vif_max","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2807d, "",11,0, "maximum hif value for checking incoming packets""", "" )


   RDW_DEF("ci", 0x2807e, "red_ci0_tx_vif_offset","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2807e, "",11,0, "vif offset to add to src vif on incoming packets""", "" )


   RDW_DEF("ci", 0x2807f, "red_ci0_fcoe_rx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2807f, "",31,0, "fcoe vntag to insert when ce packets are recieved""", "" )


   RDW_DEF("ci", 0x28080, "red_ci0_fcoe_tx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x28080, "",31,0, "fcoe vntag to insert when ce packets are transmitted""", "" )


   RDW_DEF("ci", 0x28081, "red_ci0_non_fcoe_rx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x28081, "",31,0, "non_fcoe vntag to insert when ce packets are recieved""", "" )


   RDW_DEF("ci", 0x28082, "red_ci0_non_fcoe_tx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x28082, "",31,0, "non_fcoe vntag to insert when ce packets are transmitted""", "" )


   RDW_DEF("ci", 0x28083, "red_ci0_class_xoff","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x28083, "inc_sel0",4,0, "mux sel""", "" )
   RDW_DEF_FLD( 0x28083, "inc_sel1",9,5, "mux sel""", "" )
   RDW_DEF_FLD( 0x28083, "duration_inc_sel0",14,10, "mux sel""", "" )
   RDW_DEF_FLD( 0x28083, "duration_inc_sel1",19,15, "mux sel""", "" )


   RDW_DEF("ci", 0x28084, "red_ci0_CNT_class_xoff_cnt0","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x28084, "",15,0, "tx xon->xoff counter""", "" )


   RDW_DEF("ci", 0x28085, "red_ci0_CNT_class_xoff_cnt1","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x28085, "",15,0, "tx xon->xoff counter""", "" )


   RDW_DEF("ci", 0x28086, "red_ci0_CNT_class_xoff_duration_cnt0","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x28086, "",23,0, "tx xon->xoff counter""", "" )


   RDW_DEF("ci", 0x28087, "red_ci0_CNT_class_xoff_duration_cnt1","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x28087, "",23,0, "tx xon->xoff counter""", "" )


   RDW_DEF("ci", 0x28088, "red_ci0_STA_tx_class_xoff","STA for tx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x28088, "",8,0, "STA for tx class xon/xoff state""", "" )


   RDW_DEF("ci", 0x28089, "red_ci0_STA_rx_class_xoff","STA for rx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x28089, "",8,0, "STA for rx class xon/xoff state""", "" )


   RDW_DEF("ci", 0x2808a, "red_ci0_fcoe_qtag_rx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2808a, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x2808a, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x2808a, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x2808a, "rewrite_mode",18,16, " \\n0:  always strip. \nIf a tagged packet is received, strip the qtag.  \nIf a untagged packet is recieved, don't touch the packet.\n\nIf the pkt received is tagged use the received cos, dp else use default cos,\ndp for mapping to internal cos/queue.\n\n1:  always tag.   \nIf a tagged packet is received, don't touch the vlan field, map cos,dp to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos, dp for mapping to internal cos/queue.\n\n2:  always tag with default vlan.  \nIf a tagged packet is received, override the vlan field with the default vlan ,map {cos,dp} to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos,dp for mapping to internal cos/queue.\n\n3: untag default vlan .  \nIf a tagged packet is received and the received vlan == default vlan, \nthen untag the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, \ndon't touch the vlan\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\nIf the incoming packet has no qtag or if the qtag is being stripped\nthe vlan given out is zeroed for the my-mac checks.\n\n4: ptag mode. \nIf a tagged packet is received and the received vlan == default vlan, \nthen rewrite vlan with 0x000.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, don't touch the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\n5: pass thru.  \nForward the packet without modifications.  If the received packet is tagged, \nthen use the received cos,dp for mapping to internal cos/queue. Otherwise, use\nthe default cos,dp for mapping to internal cos/queue.""", "" )


   RDW_DEF("ci", 0x2808b, "red_ci0_fcoe_qtag_tx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2808b, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x2808b, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x2808b, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x2808b, "rewrite_mode",18,16, " see fcoe_qtag_rx rewrite field for rewrite rules""", "" )


   RDW_DEF("ci", 0x2808c, "red_ci0_fcoe_rx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x2808c, "_00",31,0, "", "" )
   RDW_DEF("ci", 0x2808d, "red_ci0_fcoe_rx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x2808d, "_01",31,0, "", "" )


   RDW_DEF("ci", 0x2808e, "red_ci0_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2808e, "",31,0, "", "" )


   RDW_DEF("ci", 0x28090, "red_ci0_fcoe_tx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x28090, "_00",31,0, "", "" )
   RDW_DEF("ci", 0x28091, "red_ci0_fcoe_tx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x28091, "_01",31,0, "", "" )


   RDW_DEF("ci", 0x28092, "red_ci0_non_fcoe_qtag_rx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x28092, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x28092, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x28092, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x28092, "rewrite_mode",18,16, " \\n0:  always strip. \nIf a tagged packet is received, strip the qtag.  \nIf a untagged packet is recieved, don't touch the packet.\n\nIf the pkt received is tagged use the received cos, dp else use default cos,\ndp for mapping to internal cos/queue.\n\n1:  always tag.   \nIf a tagged packet is received, don't touch the vlan field, map cos,dp to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos, dp for mapping to internal cos/queue.\n\n2:  always tag with default vlan.  \nIf a tagged packet is received, override the vlan field with the default vlan ,map {cos,dp} to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos,dp for mapping to internal cos/queue.\n\n3: untag default vlan .  \nIf a tagged packet is received and the received vlan == default vlan, \nthen untag the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, \ndon't touch the vlan\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\nIf the incoming packet has no qtag or if the qtag is being stripped\nthe vlan given out is zeroed for the my-mac checks.\n\n4: ptag mode. \nIf a tagged packet is received and the received vlan == default vlan, \nthen rewrite vlan with 0x000.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, don't touch the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\n5: pass thru.  \nForward the packet without modifications.  If the received packet is tagged, \nthen use the received cos,dp for mapping to internal cos/queue. Otherwise, use\nthe default cos,dp for mapping to internal cos/queue.""", "" )


   RDW_DEF("ci", 0x28093, "red_ci0_non_fcoe_qtag_tx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x28093, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x28093, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x28093, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x28093, "rewrite_mode",18,16, " see non_fcoe_qtag_rx rewrite field for rewrite rules""", "" )


   RDW_DEF("ci", 0x28094, "red_ci0_non_fcoe_rx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x28094, "_00",31,0, "", "" )
   RDW_DEF("ci", 0x28095, "red_ci0_non_fcoe_rx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x28095, "_01",31,0, "", "" )


   RDW_DEF("ci", 0x28096, "red_ci0_non_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x28096, "",31,0, "", "" )


   RDW_DEF("ci", 0x28098, "red_ci0_non_fcoe_tx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x28098, "_00",31,0, "", "" )
   RDW_DEF("ci", 0x28099, "red_ci0_non_fcoe_tx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x28099, "_01",31,0, "", "" )


   RDW_DEF("ci", 0x2809a, "red_ci0_flow_control_q2cos_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2809a, "",31,0, "q2cos mapping to translate the xoff from the switch queues(nr/hr_ci_xoff) to the appropriate class""", "" )


   RDW_DEF("ci", 0x2809b, "red_ci0_flow_control_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2809b, "",31,0, "cos2q mapping to translate the xoff from the received ause frame to the switch queues(ci_nr/hr_xoff)""", "" )


   RDW_DEF("ci", 0x2809c, "red_ci0_gbe_CFG","config register""", 0xffffffff, 0x20180004, "cfg")
   RDW_DEF_FLD( 0x2809c, "rx_an_en",0,0, "When asserts, enable receive auto negotiation""", "" )
   RDW_DEF_FLD( 0x2809c, "rx_busy_en",1,1, "Reserved, set to zero""", "" )
   RDW_DEF_FLD( 0x2809c, "rx_crc_chk_en",2,2, "When asserts, enable receive crc check""", "" )
   RDW_DEF_FLD( 0x2809c, "tx_force_xmit_data",3,3, "When asserts, force xmit_data to be high to bypass AN""", "" )
   RDW_DEF_FLD( 0x2809c, "rx2tx_xoff_en",4,4, "When asserts, enable rx pause xoff halts the tx transmission""", "" )
   RDW_DEF_FLD( 0x2809c, "rx2tx_xoff_delay_time",14,5, "Specifies the delay time of the rx pause xoff halts the tx\ntransmission, zero means no delay. This allows some packets\nin the pipeline can be transmitted""", "" )
   RDW_DEF_FLD( 0x2809c, "pause_tx_en",15,15, "When asserts, enable transmit pause frame""", "" )
   RDW_DEF_FLD( 0x2809c, "pause_timer_only",16,16, "When asserts, core xoff state is periodically sampled\nto generate pause frame""", "" )
   RDW_DEF_FLD( 0x2809c, "ipg_transmit_time",26,17, "Specifies the inter-frame-gap in bytes""", "" )
   RDW_DEF_FLD( 0x2809c, "rx_link_rst",27,27, "When asserts, reset both link transmit and receive reside in\nlink manager""", "" )
   RDW_DEF_FLD( 0x2809c, "rx_jabber_len_1518",28,28, "When asserts, rx jabber lenth is packet size greater than 1518""", "" )
   RDW_DEF_FLD( 0x2809c, "rx_inrange_chk_en",29,29, "When asserts, rx payload lenth is checked if length field is valid""", "" )
   RDW_DEF_FLD( 0x2809c, "rx_sw_rst",30,30, "When asserts, soft reset the receive path. Software must set\nto zero to deassert the soft reset""", "" )
   RDW_DEF_FLD( 0x2809c, "tx_sw_rst",31,31, "When asserts, soft reset the transmit path. Software must set\nto zero to deassert the soft reset""", "" )


   RDW_DEF("ci", 0x2809d, "red_ci0_gbe_CFG_tx_an_config_word","config register""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2809d, "",15,0, "Specifies the auto negotiation word to be transmited""", "" )


   RDW_DEF("ci", 0x2809e, "red_ci0_gbe_CFG_rx","config register""", 0x3fffff, 0x1005f2, "cfg")
   RDW_DEF_FLD( 0x2809e, "max_size",13,0, "Specifies the maximum receve packet size, oversized packets""", "" )
   RDW_DEF_FLD( 0x2809e, "min_size",20,14, "Specifies the minimum receve packet size, undersize packets\nare padded""", "" )
   RDW_DEF_FLD( 0x2809e, "flush_en",21,21, "When asserts, flush all ingress packets""", "" )


   RDW_DEF("ci", 0x2809f, "red_ci0_gbe_CFG_pause_time","pause config register""", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x2809f, "",15,0, "Specifies the pause quanta to be filled in the pause frame""", "" )


   RDW_DEF("ci", 0x280a0, "red_ci0_gbe_CFG_pause_sample_timer","pause config register""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x280a0, "",19,0, "Specifies sampling interval for core xoff state to generate\nthe pause frame""", "" )


   RDW_DEF("ci", 0x280a1, "red_ci0_gbe_CFG_pause_fc_limit","pause configuration""", 0xfffff, 0x1, "cfg")
   RDW_DEF_FLD( 0x280a1, "",19,0, "Specifies the minimum time interval to sample the transition of xoff state,\nthis timer serves as a low pass filter to filter out unnessary transmission\nof pause frame due to coer xoff transition""", "" )


   RDW_DEF("ci", 0x280a2, "red_ci0_gbe_CFG_mii_mdc_period","mii config register""", 0xff, 0x3c, "cfg")
   RDW_DEF_FLD( 0x280a2, "",7,0, "Specifies the MDIO clock period, uint is the core clcok""", "" )


   RDW_DEF("ci", 0x280a3, "red_ci0_gbe_CFG_mii_mdio","mii config register""", 0x1ffff, 0x13205, "cfg")
   RDW_DEF_FLD( 0x280a3, "hold",7,0, "Specifies the MDIO output hold period, need to satisfy at least\n10ns, unit is mac clock which is 8ns for 1GbE""", "" )
   RDW_DEF_FLD( 0x280a3, "in_rdy",15,8, "Specifies the MDIO input sampling time, unit is mac clock which\nis 8ns for 1GbE""", "" )
   RDW_DEF_FLD( 0x280a3, "sw_rst",16,16, "When asserts, reset the MDIO logic""", "" )


   RDW_DEF("ci", 0x280a4, "red_ci0_gbe_CFG_mii","mii config register""", 0x1fffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x280a4, "din",15,0, "Specifies the MDIO write data""", "" )
   RDW_DEF_FLD( 0x280a4, "regaddr",20,16, "Specifies the MDIO reg address""", "" )
   RDW_DEF_FLD( 0x280a4, "phyaddr",25,21, "Specifies the MDIO phy address""", "" )
   RDW_DEF_FLD( 0x280a4, "read_write",26,26, "Specifies the MDIO read/write op code""", "" )
   RDW_DEF_FLD( 0x280a4, "skip_preamble",27,27, "When asserts, MDIO access suppresses preamble""", "" )
   RDW_DEF_FLD( 0x280a4, "go",28,28, "When 0->1 transition, triggers the transmisson of MDIO word""", "" )


   RDW_DEF("ci", 0x280a5, "red_ci0_gbe_STA_mii","mii stat register""", 0x1ffff, 0x0, "sta")
   RDW_DEF_FLD( 0x280a5, "dout",15,0, "MDIO read data from PHYs""", "" )
   RDW_DEF_FLD( 0x280a5, "busy",16,16, "Status indicate if the MDIO access is complete or not\n1: MDIO access is in porgress\n0: MDIO access is complete""", "" )


   RDW_DEF("ci", 0x280a6, "red_ci0_gbe_CFG_rma","rma config register""", 0x7, 0x4, "cfg")
   RDW_DEF_FLD( 0x280a6, "ignore_ctl_da",0,0, "When asserts, MAC control frame qualification does\nnot include MAC DA comparision""", "" )
   RDW_DEF_FLD( 0x280a6, "dont_pause",1,1, "When asserts, do not activate pause timer""", "" )
   RDW_DEF_FLD( 0x280a6, "rx_ctl_frm_en",2,2, "When asserts, enable MAC control frame receive""", "" )


   RDW_DEF("ci", 0x280a7, "red_ci0_gbe_CFG_rma_fc","rma config register""", 0xffffffff, 0x18808, "cfg")
   RDW_DEF_FLD( 0x280a7, "type",15,0, "Specifies the EtherType for MAC control frame""", "" )
   RDW_DEF_FLD( 0x280a7, "opcode",31,16, "Specifies the Mac OpCode for MAC control frame""", "" )


   RDW_DEF("ci", 0x280a8, "red_ci0_gbe_CFG_rma_fc_da_hi","rma config register""", 0xffff, 0x180, "cfg")
   RDW_DEF_FLD( 0x280a8, "",15,0, "Specifies the MAC DA bit[47:32] for MAC control frame""", "" )


   RDW_DEF("ci", 0x280a9, "red_ci0_gbe_CFG_rma_fc_da_lo","rma config register""", 0xffffffff, 0xc2000001, "cfg")
   RDW_DEF_FLD( 0x280a9, "",31,0, "Specifies the MAC DA bit[31:0] for MAC control frame""", "" )


   RDW_DEF("ci", 0x280aa, "red_ci0_gbe_CFG_rma_sa_hi","rma config register""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x280aa, "",15,0, "Specifies the MAC SA bit[47:32] for MAC control frame""", "" )


   RDW_DEF("ci", 0x280ab, "red_ci0_gbe_CFG_rma_sa_lo","rma config register""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x280ab, "",31,0, "Specifies the MAC SA bit[31:0] for MAC control frame""", "" )


   RDW_DEF("ci", 0x280ac, "red_ci0_gbe_CNT_rma0","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x280ac, "drop_ctl_pkt",31,0, "Statistics for dropped MAC control frame""", "" )


   RDW_DEF("ci", 0x280ad, "red_ci0_gbe_CNT_rma1","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x280ad, "rx_pause",31,0, "Statistics for received pause frame""", "" )


   RDW_DEF("ci", 0x280ae, "red_ci0_gbe_CNT_rma2","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x280ae, "rx_ctl_pkt",31,0, "Statistics for received MAC ctrl frame""", "" )


   RDW_DEF("ci", 0x280af, "red_ci0_gbe_INT","interrupt register""", 0xffff, 0x0, "int")
   RDW_DEF_FLD( 0x280af, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x280af, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x280af, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x280af, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x280af, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x280af, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x280af, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x280af, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x280af, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x280af, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x280af, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x280af, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x280af, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x280af, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x280af, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x280af, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )


   RDW_DEF("ci", 0x280b0, "red_ci0_gbe_INT_msk","interrupt register""", 0xffff, 0x1800, "int_msk")
   RDW_DEF_FLD( 0x280b0, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x280b0, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x280b0, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x280b0, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x280b0, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x280b0, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x280b0, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x280b0, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x280b0, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x280b0, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x280b0, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x280b0, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x280b0, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x280b0, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x280b0, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x280b0, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )


   RDW_DEF("ci", 0x280b1, "red_ci0_gbe_INT_tst","interrupt register""", 0xffff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x280b1, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x280b1, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x280b1, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x280b1, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x280b1, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x280b1, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x280b1, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x280b1, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x280b1, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x280b1, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x280b1, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x280b1, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x280b1, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x280b1, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x280b1, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x280b1, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )


   RDW_DEF("ci", 0x280b2, "red_ci0_gbe_STA","parser fifo ecc error address""", 0xffffff, 0x0, "sta")
   RDW_DEF_FLD( 0x280b2, "an_rx_flow_ctrl_en",0,0, "Status shows the negotiated receive pause enabled""", "" )
   RDW_DEF_FLD( 0x280b2, "an_tx_flow_ctrl_en",1,1, "Status shows the negotiated transmit pause enabled""", "" )
   RDW_DEF_FLD( 0x280b2, "an_full_duplex",2,2, "Status shows the negotiated full duplex mode""", "" )
   RDW_DEF_FLD( 0x280b2, "rx_an_complete",3,3, "Status shows the auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x280b2, "rx_config_word",19,4, "Status shows the received auto-negotiation word from\nremote link partner""", "" )
   RDW_DEF_FLD( 0x280b2, "an_fsm_state",22,20, "Status shows the current N fsm state""", "" )
   RDW_DEF_FLD( 0x280b2, "rx_synchronized",23,23, "Status shows the rx synchronous status""", "" )


   RDW_DEF("ci", 0x280b3, "red_ci0_CFG_spare","spare config register""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x280b3, "",7,0, "Spare gate config bus""", "" )


   RDW_DEF("ci", 0x280b4, "red_ci0_STA_spare","spare status""", 0xff, 0x0, "sta")
   RDW_DEF_FLD( 0x280b4, "",7,0, "Spare status bus""", "" )


   RDW_DEF("ci", 0x280b5, "red_ci0_gbe_CFG_pause","pause configuration""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x280b5, "tx_pfc_en",0,0, "When asserts, enable 802.3x pause transmission""", "" )
   RDW_DEF_FLD( 0x280b5, "tx_cfc_en",8,1, "When asserts, enable per-priority pause transmission""", "" )
   RDW_DEF_FLD( 0x280b5, "rx_pfc_en",9,9, "When asserts, enable 802.3x pause receiving""", "" )
   RDW_DEF_FLD( 0x280b5, "rx_cfc_en",17,10, "When asserts, enable per-priority pause receiving""", "" )
   RDW_DEF_FLD( 0x280b5, "fc_timer_only",18,18, "When asserts, timer timeout triggers the transmission of\npause frame. When deasserts, both timer timeout and core xoff state \ntransition can triggers the transmission of pause frame""", "" )
   RDW_DEF_FLD( 0x280b5, "rx_ucast_en",19,19, "When asserts, enable unicast pause receiving, otherwise only multicast\npause frame is recognized""", "" )


   RDW_DEF("ci", 0x280b6, "red_ci0_gbe_CFG_pause_cfc_opcode","pause configuration""", 0xffff, 0x101, "cfg")
   RDW_DEF_FLD( 0x280b6, "",15,0, "Specifies the Mac ControlCode for per-priority pause""", "" )


   RDW_DEF("ci", 0x280b7, "red_ci0_gbe_CFG_pause_0_time","pause configuration""", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x280b7, "",15,0, "Specifies the pause quanta to be set for priority 0 in transmitting\nper-priority pause frame""", "" )


   RDW_DEF("ci", 0x280b8, "red_ci0_gbe_CFG_pause_1_time","pause configuration""", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x280b8, "",15,0, "Specifies the pause quanta to be set for priority 1 in transmitting\nper-priority pause frame""", "" )


   RDW_DEF("ci", 0x280b9, "red_ci0_gbe_CFG_pause_2_time","pause configuration""", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x280b9, "",15,0, "Specifies the pause quanta to be set for priority 2 in transmitting\nper-priority pause frame""", "" )


   RDW_DEF("ci", 0x280ba, "red_ci0_gbe_CFG_pause_3_time","pause configuration""", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x280ba, "",15,0, "Specifies the pause quanta to be set for priority 3 in transmitting\nper-priority pause frame""", "" )


   RDW_DEF("ci", 0x280bb, "red_ci0_gbe_CFG_pause_4_time","pause configuration""", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x280bb, "",15,0, "Specifies the pause quanta to be set for priority 4 in transmitting\nper-priority pause frame""", "" )


   RDW_DEF("ci", 0x280bc, "red_ci0_gbe_CFG_pause_5_time","pause configuration""", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x280bc, "",15,0, "Specifies the pause quanta to be set for priority 5 in transmitting\nper-priority pause frame""", "" )


   RDW_DEF("ci", 0x280bd, "red_ci0_gbe_CFG_pause_6_time","pause configuration""", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x280bd, "",15,0, "Specifies the pause quanta to be set for priority 6 in transmitting\nper-priority pause frame""", "" )


   RDW_DEF("ci", 0x280be, "red_ci0_gbe_CFG_pause_7_time","pause configuration""", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x280be, "",15,0, "Specifies the pause quanta to be set for priority 7 in transmitting\nper-priority pause frame""", "" )


   RDW_DEF("ci", 0x280bf, "red_ci0_gbe_CFG_tx_flush_en","tx flush enable""", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x280bf, "",0,0, "when set, mac will flush all egress packets""", "" )


   RDW_DEF("bi", 0x2a000, "red_bi0_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a000, "vlan0",11,0, "mymac_vlan0 value""", "" )
   RDW_DEF_FLD( 0x2a000, "vlan1",23,12, "mymac_vlan1 value""", "" )
   RDW_DEF_FLD( 0x2a000, "vlan2_00",31,24, "mymac_vlan2 value""", "" )
   RDW_DEF("bi", 0x2a001, "red_bi0_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a001, "vlan2_01",3,0, "mymac_vlan2 value""", "" )
   RDW_DEF_FLD( 0x2a001, "vlan3",15,4, "mymac_vlan3 value""", "" )
   RDW_DEF_FLD( 0x2a001, "vlan_en0",16,16, "mymac_vlan0 enable""", "" )
   RDW_DEF_FLD( 0x2a001, "vlan_en1",17,17, "mymac_vlan1 enable""", "" )
   RDW_DEF_FLD( 0x2a001, "vlan_en2",18,18, "mymac_vlan2 enable""", "" )
   RDW_DEF_FLD( 0x2a001, "vlan_en3",19,19, "mymac_vlan3 enable""", "" )
   RDW_DEF_FLD( 0x2a001, "macda0_00",31,20, "mymac_macda0 value""", "" )
   RDW_DEF("bi", 0x2a002, "red_bi0_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a002, "macda0_01",31,0, "mymac_macda0 value""", "" )
   RDW_DEF("bi", 0x2a003, "red_bi0_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a003, "macda0_02",3,0, "mymac_macda0 value""", "" )
   RDW_DEF_FLD( 0x2a003, "macda1_00",31,4, "mymac_macda1 value""", "" )
   RDW_DEF("bi", 0x2a004, "red_bi0_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a004, "macda1_01",19,0, "mymac_macda1 value""", "" )
   RDW_DEF_FLD( 0x2a004, "macda2_00",31,20, "mymac_macda2 value""", "" )
   RDW_DEF("bi", 0x2a005, "red_bi0_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a005, "macda2_01",31,0, "mymac_macda2 value""", "" )
   RDW_DEF("bi", 0x2a006, "red_bi0_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a006, "macda2_02",3,0, "mymac_macda2 value""", "" )
   RDW_DEF_FLD( 0x2a006, "macda3_00",31,4, "mymac_macda3 value""", "" )
   RDW_DEF("bi", 0x2a007, "red_bi0_mymac","", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a007, "macda3_01",19,0, "mymac_macda3 value""", "" )
   RDW_DEF_FLD( 0x2a007, "macda_en0",20,20, "mymac_macda0 enable""", "" )
   RDW_DEF_FLD( 0x2a007, "macda_en1",21,21, "mymac_macda1 enable""", "" )
   RDW_DEF_FLD( 0x2a007, "macda_en2",22,22, "mymac_macda2 enable""", "" )
   RDW_DEF_FLD( 0x2a007, "macda_en3",23,23, "mymac_macda3 enable""", "" )


   RDW_DEF("bi", 0x2a008, "red_bi0_rx_vif_min","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a008, "",11,0, "minimum hif value for checking incoming packets""", "" )


   RDW_DEF("bi", 0x2a009, "red_bi0_rx_vif_max","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a009, "",11,0, "maximum hif value for checking incoming packets""", "" )


   RDW_DEF("bi", 0x2a00a, "red_bi0_rx_vif_offset","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a00a, "",11,0, "vif offset to add to src vif on incoming packets""", "" )


   RDW_DEF("bi", 0x2a00b, "red_bi0_tx_vif_min","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a00b, "",11,0, "minimum hif value for checking incoming packets""", "" )


   RDW_DEF("bi", 0x2a00c, "red_bi0_tx_vif_max","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a00c, "",11,0, "maximum hif value for checking incoming packets""", "" )


   RDW_DEF("bi", 0x2a00d, "red_bi0_tx_vif_offset","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a00d, "",11,0, "vif offset to add to src vif on incoming packets""", "" )


   RDW_DEF("bi", 0x2a00e, "red_bi0_fcoe_rx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a00e, "",31,0, "fcoe vntag to insert when ce packets are recieved""", "" )


   RDW_DEF("bi", 0x2a00f, "red_bi0_fcoe_tx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a00f, "",31,0, "fcoe vntag to insert when ce packets are transmitted""", "" )


   RDW_DEF("bi", 0x2a010, "red_bi0_non_fcoe_rx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a010, "",31,0, "non_fcoe vntag to insert when ce packets are recieved""", "" )


   RDW_DEF("bi", 0x2a011, "red_bi0_non_fcoe_tx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a011, "",31,0, "non_fcoe vntag to insert when ce packets are transmitted""", "" )


   RDW_DEF("bi", 0x2a012, "red_bi0_class_xoff","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a012, "inc_sel0",4,0, "mux sel""", "" )
   RDW_DEF_FLD( 0x2a012, "inc_sel1",9,5, "mux sel""", "" )
   RDW_DEF_FLD( 0x2a012, "duration_inc_sel0",14,10, "mux sel""", "" )
   RDW_DEF_FLD( 0x2a012, "duration_inc_sel1",19,15, "mux sel""", "" )


   RDW_DEF("bi", 0x2a013, "red_bi0_CNT_class_xoff_cnt0","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x2a013, "",15,0, "tx xon->xoff counter""", "" )


   RDW_DEF("bi", 0x2a014, "red_bi0_CNT_class_xoff_cnt1","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x2a014, "",15,0, "tx xon->xoff counter""", "" )


   RDW_DEF("bi", 0x2a015, "red_bi0_CNT_class_xoff_duration_cnt0","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x2a015, "",23,0, "tx xon->xoff counter""", "" )


   RDW_DEF("bi", 0x2a016, "red_bi0_CNT_class_xoff_duration_cnt1","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x2a016, "",23,0, "tx xon->xoff counter""", "" )


   RDW_DEF("bi", 0x2a017, "red_bi0_STA_tx_class_xoff","STA for tx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x2a017, "",8,0, "STA for tx class xon/xoff state""", "" )


   RDW_DEF("bi", 0x2a018, "red_bi0_STA_rx_class_xoff","STA for rx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x2a018, "",8,0, "STA for rx class xon/xoff state""", "" )


   RDW_DEF("bi", 0x2a019, "red_bi0_fcoe_qtag_rx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a019, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x2a019, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x2a019, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x2a019, "rewrite_mode",18,16, " \\n0:  always strip. \nIf a tagged packet is received, strip the qtag.  \nIf a untagged packet is recieved, don't touch the packet.\n\nIf the pkt received is tagged use the received cos, dp else use default cos,\ndp for mapping to internal cos/queue.\n\n1:  always tag.   \nIf a tagged packet is received, don't touch the vlan field, map cos,dp to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos, dp for mapping to internal cos/queue.\n\n2:  always tag with default vlan.  \nIf a tagged packet is received, override the vlan field with the default vlan ,map {cos,dp} to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos,dp for mapping to internal cos/queue.\n\n3: untag default vlan .  \nIf a tagged packet is received and the received vlan == default vlan, \nthen untag the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, \ndon't touch the vlan\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\nIf the incoming packet has no qtag or if the qtag is being stripped\nthe vlan given out is zeroed for the my-mac checks.\n\n4: ptag mode. \nIf a tagged packet is received and the received vlan == default vlan, \nthen rewrite vlan with 0x000.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, don't touch the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\n5: pass thru.  \nForward the packet without modifications.  If the received packet is tagged, \nthen use the received cos,dp for mapping to internal cos/queue. Otherwise, use\nthe default cos,dp for mapping to internal cos/queue.""", "" )


   RDW_DEF("bi", 0x2a01a, "red_bi0_fcoe_qtag_tx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a01a, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x2a01a, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x2a01a, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x2a01a, "rewrite_mode",18,16, " see fcoe_qtag_rx rewrite field for rewrite rules""", "" )


   RDW_DEF("bi", 0x2a01c, "red_bi0_fcoe_rx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x2a01c, "_00",31,0, "", "" )
   RDW_DEF("bi", 0x2a01d, "red_bi0_fcoe_rx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x2a01d, "_01",31,0, "", "" )


   RDW_DEF("bi", 0x2a01e, "red_bi0_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a01e, "",31,0, "", "" )


   RDW_DEF("bi", 0x2a020, "red_bi0_fcoe_tx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x2a020, "_00",31,0, "", "" )
   RDW_DEF("bi", 0x2a021, "red_bi0_fcoe_tx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x2a021, "_01",31,0, "", "" )


   RDW_DEF("bi", 0x2a022, "red_bi0_non_fcoe_qtag_rx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a022, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x2a022, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x2a022, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x2a022, "rewrite_mode",18,16, " \\n0:  always strip. \nIf a tagged packet is received, strip the qtag.  \nIf a untagged packet is recieved, don't touch the packet.\n\nIf the pkt received is tagged use the received cos, dp else use default cos,\ndp for mapping to internal cos/queue.\n\n1:  always tag.   \nIf a tagged packet is received, don't touch the vlan field, map cos,dp to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos, dp for mapping to internal cos/queue.\n\n2:  always tag with default vlan.  \nIf a tagged packet is received, override the vlan field with the default vlan ,map {cos,dp} to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos,dp for mapping to internal cos/queue.\n\n3: untag default vlan .  \nIf a tagged packet is received and the received vlan == default vlan, \nthen untag the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, \ndon't touch the vlan\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\nIf the incoming packet has no qtag or if the qtag is being stripped\nthe vlan given out is zeroed for the my-mac checks.\n\n4: ptag mode. \nIf a tagged packet is received and the received vlan == default vlan, \nthen rewrite vlan with 0x000.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, don't touch the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\n5: pass thru.  \nForward the packet without modifications.  If the received packet is tagged, \nthen use the received cos,dp for mapping to internal cos/queue. Otherwise, use\nthe default cos,dp for mapping to internal cos/queue.""", "" )


   RDW_DEF("bi", 0x2a023, "red_bi0_non_fcoe_qtag_tx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a023, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x2a023, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x2a023, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x2a023, "rewrite_mode",18,16, " see non_fcoe_qtag_rx rewrite field for rewrite rules""", "" )


   RDW_DEF("bi", 0x2a024, "red_bi0_non_fcoe_rx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x2a024, "_00",31,0, "", "" )
   RDW_DEF("bi", 0x2a025, "red_bi0_non_fcoe_rx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x2a025, "_01",31,0, "", "" )


   RDW_DEF("bi", 0x2a026, "red_bi0_non_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a026, "",31,0, "", "" )


   RDW_DEF("bi", 0x2a028, "red_bi0_non_fcoe_tx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x2a028, "_00",31,0, "", "" )
   RDW_DEF("bi", 0x2a029, "red_bi0_non_fcoe_tx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x2a029, "_01",31,0, "", "" )


   RDW_DEF("bi", 0x2a02a, "red_bi0_flow_control_q2cos_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a02a, "",31,0, "q2cos mapping to translate the xoff from the switch queues(nr/hr_ci_xoff) to the appropriate class""", "" )


   RDW_DEF("bi", 0x2a02b, "red_bi0_flow_control_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a02b, "",31,0, "cos2q mapping to translate the xoff from the received ause frame to the switch queues(ci_nr/hr_xoff)""", "" )


   RDW_DEF("bi", 0x2a02c, "red_bi0_gbe_cfg_mac","configuration for the dover mac""", 0x3ff, 0x40, "cfg")
   RDW_DEF_FLD( 0x2a02c, "runt_pkt_size",7,0, "Packets smaller than this(in bytes) will be considered runt packets and will be dropped by the runt drop module""", "" )
   RDW_DEF_FLD( 0x2a02c, "sw_rst",8,8, "", "" )
   RDW_DEF_FLD( 0x2a02c, "mii_nibble_swap",9,9, "Swaps the order in which the two nibbles of a byte are transmitted/received. 0->lo_nibble, 1->hi_nibble xmtd/rcvd first""", "" )


   RDW_DEF("bi", 0x2a02d, "red_bi0_cfg_min_pkt_size_to_pad","configuration for the minimal pkt size to pad 0 to if less than that""", 0xff, 0x3c, "cfg")
   RDW_DEF_FLD( 0x2a02d, "",7,0, "Packets smaller than this(in bytes) will be paded with 0; 64 -4(CRC) = 60""", "" )


   RDW_DEF("bi", 0x2a02e, "red_bi0_cfg_bi_version","", 0xffffffff, 0x71002, "cfg")
   RDW_DEF_FLD( 0x2a02e, "",31,0, "date version of bi block""", "" )


   RDW_DEF("bi", 0x2a02f, "red_bi0_sta_bi_spare","", 0xffffffff, 0x71002, "sta")
   RDW_DEF_FLD( 0x2a02f, "",31,0, "", "" )


   RDW_DEF("bi", 0x2a030, "red_bi0_fwd_vector0","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a030, "entry0",2,0, "forwarding vector for entry 0""", "" )
   RDW_DEF_FLD( 0x2a030, "entry1",6,4, "forwarding vector for entry 1""", "" )
   RDW_DEF_FLD( 0x2a030, "entry2",10,8, "forwarding vector for entry 2""", "" )
   RDW_DEF_FLD( 0x2a030, "entry3",14,12, "forwarding vector for entry 3""", "" )
   RDW_DEF_FLD( 0x2a030, "entry4",18,16, "forwarding vector for entry 4""", "" )
   RDW_DEF_FLD( 0x2a030, "entry5",22,20, "forwarding vector for entry 5""", "" )
   RDW_DEF_FLD( 0x2a030, "entry6",26,24, "forwarding vector for entry 6""", "" )
   RDW_DEF_FLD( 0x2a030, "entry7",30,28, "forwarding vector for entry 7""", "" )


   RDW_DEF("bi", 0x2a031, "red_bi0_fwd_vector1","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a031, "entry0",2,0, "forwarding vector for entry 8""", "" )
   RDW_DEF_FLD( 0x2a031, "entry1",6,4, "forwarding vector for entry 9""", "" )
   RDW_DEF_FLD( 0x2a031, "entry2",10,8, "forwarding vector for entry 10""", "" )
   RDW_DEF_FLD( 0x2a031, "entry3",14,12, "forwarding vector for entry 11""", "" )
   RDW_DEF_FLD( 0x2a031, "entry4",18,16, "forwarding vector for entry 12""", "" )
   RDW_DEF_FLD( 0x2a031, "entry5",22,20, "forwarding vector for entry 13""", "" )
   RDW_DEF_FLD( 0x2a031, "entry6",26,24, "forwarding vector for entry 14""", "" )
   RDW_DEF_FLD( 0x2a031, "entry7",30,28, "forwarding vector for entry 15""", "" )


   RDW_DEF("bi", 0x2a032, "red_bi0_fwd_vector2","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a032, "entry0",2,0, "forwarding vector for entry 16""", "" )
   RDW_DEF_FLD( 0x2a032, "entry1",6,4, "forwarding vector for entry 17""", "" )
   RDW_DEF_FLD( 0x2a032, "entry2",10,8, "forwarding vector for entry 18""", "" )
   RDW_DEF_FLD( 0x2a032, "entry3",14,12, "forwarding vector for entry 19""", "" )
   RDW_DEF_FLD( 0x2a032, "entry4",18,16, "forwarding vector for entry 20""", "" )
   RDW_DEF_FLD( 0x2a032, "entry5",22,20, "forwarding vector for entry 21""", "" )
   RDW_DEF_FLD( 0x2a032, "entry6",26,24, "forwarding vector for entry 22""", "" )
   RDW_DEF_FLD( 0x2a032, "entry7",30,28, "forwarding vector for entry 23""", "" )


   RDW_DEF("bi", 0x2a033, "red_bi0_fwd_vector3","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a033, "entry0",2,0, "forwarding vector for entry 24""", "" )
   RDW_DEF_FLD( 0x2a033, "entry1",6,4, "forwarding vector for entry 25""", "" )
   RDW_DEF_FLD( 0x2a033, "entry2",10,8, "forwarding vector for entry 26""", "" )
   RDW_DEF_FLD( 0x2a033, "entry3",14,12, "forwarding vector for entry 27""", "" )
   RDW_DEF_FLD( 0x2a033, "entry4",18,16, "forwarding vector for entry 28""", "" )
   RDW_DEF_FLD( 0x2a033, "entry5",22,20, "forwarding vector for entry 29""", "" )
   RDW_DEF_FLD( 0x2a033, "entry6",26,24, "forwarding vector for entry 30""", "" )
   RDW_DEF_FLD( 0x2a033, "entry7",30,28, "forwarding vector for entry 31""", "" )


   RDW_DEF("bi", 0x2a034, "red_bi0_fwd_vector4","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a034, "entry0",2,0, "forwarding vector for entry 32""", "" )
   RDW_DEF_FLD( 0x2a034, "entry1",6,4, "forwarding vector for entry 33""", "" )
   RDW_DEF_FLD( 0x2a034, "entry2",10,8, "forwarding vector for entry 34""", "" )
   RDW_DEF_FLD( 0x2a034, "entry3",14,12, "forwarding vector for entry 35""", "" )
   RDW_DEF_FLD( 0x2a034, "entry4",18,16, "forwarding vector for entry 36""", "" )
   RDW_DEF_FLD( 0x2a034, "entry5",22,20, "forwarding vector for entry 37""", "" )
   RDW_DEF_FLD( 0x2a034, "entry6",26,24, "forwarding vector for entry 38""", "" )
   RDW_DEF_FLD( 0x2a034, "entry7",30,28, "forwarding vector for entry 39""", "" )


   RDW_DEF("bi", 0x2a035, "red_bi0_fwd_vector5","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a035, "entry0",2,0, "forwarding vector for entry 40""", "" )
   RDW_DEF_FLD( 0x2a035, "entry1",6,4, "forwarding vector for entry 41""", "" )
   RDW_DEF_FLD( 0x2a035, "entry2",10,8, "forwarding vector for entry 42""", "" )
   RDW_DEF_FLD( 0x2a035, "entry3",14,12, "forwarding vector for entry 43""", "" )
   RDW_DEF_FLD( 0x2a035, "entry4",18,16, "forwarding vector for entry 44""", "" )
   RDW_DEF_FLD( 0x2a035, "entry5",22,20, "forwarding vector for entry 45""", "" )
   RDW_DEF_FLD( 0x2a035, "entry6",26,24, "forwarding vector for entry 46""", "" )
   RDW_DEF_FLD( 0x2a035, "entry7",30,28, "forwarding vector for entry 47""", "" )


   RDW_DEF("bi", 0x2a036, "red_bi0_fwd_vector6","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a036, "entry0",2,0, "forwarding vector for entry 48""", "" )
   RDW_DEF_FLD( 0x2a036, "entry1",6,4, "forwarding vector for entry 49""", "" )
   RDW_DEF_FLD( 0x2a036, "entry2",10,8, "forwarding vector for entry 50""", "" )
   RDW_DEF_FLD( 0x2a036, "entry3",14,12, "forwarding vector for entry 51""", "" )
   RDW_DEF_FLD( 0x2a036, "entry4",18,16, "forwarding vector for entry 52""", "" )
   RDW_DEF_FLD( 0x2a036, "entry5",22,20, "forwarding vector for entry 53""", "" )
   RDW_DEF_FLD( 0x2a036, "entry6",26,24, "forwarding vector for entry 54""", "" )
   RDW_DEF_FLD( 0x2a036, "entry7",30,28, "forwarding vector for entry 55""", "" )


   RDW_DEF("bi", 0x2a037, "red_bi0_fwd_vector7","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a037, "entry0",2,0, "forwarding vector for entry 56""", "" )
   RDW_DEF_FLD( 0x2a037, "entry1",6,4, "forwarding vector for entry 57""", "" )
   RDW_DEF_FLD( 0x2a037, "entry2",10,8, "forwarding vector for entry 58""", "" )
   RDW_DEF_FLD( 0x2a037, "entry3",14,12, "forwarding vector for entry 59""", "" )
   RDW_DEF_FLD( 0x2a037, "entry4",18,16, "forwarding vector for entry 60""", "" )
   RDW_DEF_FLD( 0x2a037, "entry5",22,20, "forwarding vector for entry 61""", "" )
   RDW_DEF_FLD( 0x2a037, "entry6",26,24, "forwarding vector for entry 62""", "" )
   RDW_DEF_FLD( 0x2a037, "entry7",30,28, "forwarding vector for entry 63""", "" )


   RDW_DEF("bi", 0x2a038, "red_bi0_fwd_vector8","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a038, "entry0",2,0, "forwarding vector for entry 64""", "" )
   RDW_DEF_FLD( 0x2a038, "entry1",6,4, "forwarding vector for entry 65""", "" )
   RDW_DEF_FLD( 0x2a038, "entry2",10,8, "forwarding vector for entry 66""", "" )
   RDW_DEF_FLD( 0x2a038, "entry3",14,12, "forwarding vector for entry 67""", "" )
   RDW_DEF_FLD( 0x2a038, "entry4",18,16, "forwarding vector for entry 68""", "" )
   RDW_DEF_FLD( 0x2a038, "entry5",22,20, "forwarding vector for entry 69""", "" )
   RDW_DEF_FLD( 0x2a038, "entry6",26,24, "forwarding vector for entry 70""", "" )
   RDW_DEF_FLD( 0x2a038, "entry7",30,28, "forwarding vector for entry 71""", "" )


   RDW_DEF("bi", 0x2a039, "red_bi0_fwd_vector9","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a039, "entry0",2,0, "forwarding vector for entry 72""", "" )
   RDW_DEF_FLD( 0x2a039, "entry1",6,4, "forwarding vector for entry 73""", "" )
   RDW_DEF_FLD( 0x2a039, "entry2",10,8, "forwarding vector for entry 74""", "" )
   RDW_DEF_FLD( 0x2a039, "entry3",14,12, "forwarding vector for entry 75""", "" )
   RDW_DEF_FLD( 0x2a039, "entry4",18,16, "forwarding vector for entry 76""", "" )
   RDW_DEF_FLD( 0x2a039, "entry5",22,20, "forwarding vector for entry 77""", "" )
   RDW_DEF_FLD( 0x2a039, "entry6",26,24, "forwarding vector for entry 78""", "" )
   RDW_DEF_FLD( 0x2a039, "entry7",30,28, "forwarding vector for entry 79""", "" )


   RDW_DEF("bi", 0x2a03a, "red_bi0_fwd_vector10","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a03a, "entry0",2,0, "forwarding vector for entry 80""", "" )
   RDW_DEF_FLD( 0x2a03a, "entry1",6,4, "forwarding vector for entry 81""", "" )
   RDW_DEF_FLD( 0x2a03a, "entry2",10,8, "forwarding vector for entry 82""", "" )
   RDW_DEF_FLD( 0x2a03a, "entry3",14,12, "forwarding vector for entry 83""", "" )
   RDW_DEF_FLD( 0x2a03a, "entry4",18,16, "forwarding vector for entry 84""", "" )
   RDW_DEF_FLD( 0x2a03a, "entry5",22,20, "forwarding vector for entry 85""", "" )
   RDW_DEF_FLD( 0x2a03a, "entry6",26,24, "forwarding vector for entry 86""", "" )
   RDW_DEF_FLD( 0x2a03a, "entry7",30,28, "forwarding vector for entry 87""", "" )


   RDW_DEF("bi", 0x2a03b, "red_bi0_fwd_vector11","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a03b, "entry0",2,0, "forwarding vector for entry 88""", "" )
   RDW_DEF_FLD( 0x2a03b, "entry1",6,4, "forwarding vector for entry 89""", "" )
   RDW_DEF_FLD( 0x2a03b, "entry2",10,8, "forwarding vector for entry 90""", "" )
   RDW_DEF_FLD( 0x2a03b, "entry3",14,12, "forwarding vector for entry 91""", "" )
   RDW_DEF_FLD( 0x2a03b, "entry4",18,16, "forwarding vector for entry 92""", "" )
   RDW_DEF_FLD( 0x2a03b, "entry5",22,20, "forwarding vector for entry 93""", "" )
   RDW_DEF_FLD( 0x2a03b, "entry6",26,24, "forwarding vector for entry 94""", "" )
   RDW_DEF_FLD( 0x2a03b, "entry7",30,28, "forwarding vector for entry 95""", "" )


   RDW_DEF("bi", 0x2a03c, "red_bi0_fwd_vector12","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a03c, "entry0",2,0, "forwarding vector for entry 96""", "" )
   RDW_DEF_FLD( 0x2a03c, "entry1",6,4, "forwarding vector for entry 97""", "" )
   RDW_DEF_FLD( 0x2a03c, "entry2",10,8, "forwarding vector for entry 98""", "" )
   RDW_DEF_FLD( 0x2a03c, "entry3",14,12, "forwarding vector for entry 99""", "" )
   RDW_DEF_FLD( 0x2a03c, "entry4",18,16, "forwarding vector for entry 100""", "" )
   RDW_DEF_FLD( 0x2a03c, "entry5",22,20, "forwarding vector for entry 101""", "" )
   RDW_DEF_FLD( 0x2a03c, "entry6",26,24, "forwarding vector for entry 102""", "" )
   RDW_DEF_FLD( 0x2a03c, "entry7",30,28, "forwarding vector for entry 103""", "" )


   RDW_DEF("bi", 0x2a03d, "red_bi0_fwd_vector13","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a03d, "entry0",2,0, "forwarding vector for entry 104""", "" )
   RDW_DEF_FLD( 0x2a03d, "entry1",6,4, "forwarding vector for entry 105""", "" )
   RDW_DEF_FLD( 0x2a03d, "entry2",10,8, "forwarding vector for entry 106""", "" )
   RDW_DEF_FLD( 0x2a03d, "entry3",14,12, "forwarding vector for entry 107""", "" )
   RDW_DEF_FLD( 0x2a03d, "entry4",18,16, "forwarding vector for entry 108""", "" )
   RDW_DEF_FLD( 0x2a03d, "entry5",22,20, "forwarding vector for entry 109""", "" )
   RDW_DEF_FLD( 0x2a03d, "entry6",26,24, "forwarding vector for entry 110""", "" )
   RDW_DEF_FLD( 0x2a03d, "entry7",30,28, "forwarding vector for entry 111""", "" )


   RDW_DEF("bi", 0x2a03e, "red_bi0_fwd_vector14","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a03e, "entry0",2,0, "forwarding vector for entry 112""", "" )
   RDW_DEF_FLD( 0x2a03e, "entry1",6,4, "forwarding vector for entry 113""", "" )
   RDW_DEF_FLD( 0x2a03e, "entry2",10,8, "forwarding vector for entry 114""", "" )
   RDW_DEF_FLD( 0x2a03e, "entry3",14,12, "forwarding vector for entry 115""", "" )
   RDW_DEF_FLD( 0x2a03e, "entry4",18,16, "forwarding vector for entry 116""", "" )
   RDW_DEF_FLD( 0x2a03e, "entry5",22,20, "forwarding vector for entry 117""", "" )
   RDW_DEF_FLD( 0x2a03e, "entry6",26,24, "forwarding vector for entry 118""", "" )
   RDW_DEF_FLD( 0x2a03e, "entry7",30,28, "forwarding vector for entry 119""", "" )


   RDW_DEF("bi", 0x2a03f, "red_bi0_fwd_vector15","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a03f, "entry0",2,0, "forwarding vector for entry 120""", "" )
   RDW_DEF_FLD( 0x2a03f, "entry1",6,4, "forwarding vector for entry 121""", "" )
   RDW_DEF_FLD( 0x2a03f, "entry2",10,8, "forwarding vector for entry 122""", "" )
   RDW_DEF_FLD( 0x2a03f, "entry3",14,12, "forwarding vector for entry 123""", "" )
   RDW_DEF_FLD( 0x2a03f, "entry4",18,16, "forwarding vector for entry 124""", "" )
   RDW_DEF_FLD( 0x2a03f, "entry5",22,20, "forwarding vector for entry 125""", "" )
   RDW_DEF_FLD( 0x2a03f, "entry6",26,24, "forwarding vector for entry 126""", "" )
   RDW_DEF_FLD( 0x2a03f, "entry7",30,28, "forwarding vector for entry 127""", "" )


   RDW_DEF("bi", 0x2a040, "red_bi0_fwd_vector16","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a040, "entry0",2,0, "forwarding vector for entry 128""", "" )
   RDW_DEF_FLD( 0x2a040, "entry1",6,4, "forwarding vector for entry 129""", "" )
   RDW_DEF_FLD( 0x2a040, "entry2",10,8, "forwarding vector for entry 130""", "" )
   RDW_DEF_FLD( 0x2a040, "entry3",14,12, "forwarding vector for entry 131""", "" )
   RDW_DEF_FLD( 0x2a040, "entry4",18,16, "forwarding vector for entry 132""", "" )
   RDW_DEF_FLD( 0x2a040, "entry5",22,20, "forwarding vector for entry 133""", "" )
   RDW_DEF_FLD( 0x2a040, "entry6",26,24, "forwarding vector for entry 134""", "" )
   RDW_DEF_FLD( 0x2a040, "entry7",30,28, "forwarding vector for entry 135""", "" )


   RDW_DEF("bi", 0x2a041, "red_bi0_fwd_vector17","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a041, "entry0",2,0, "forwarding vector for entry 136""", "" )
   RDW_DEF_FLD( 0x2a041, "entry1",6,4, "forwarding vector for entry 137""", "" )
   RDW_DEF_FLD( 0x2a041, "entry2",10,8, "forwarding vector for entry 138""", "" )
   RDW_DEF_FLD( 0x2a041, "entry3",14,12, "forwarding vector for entry 139""", "" )
   RDW_DEF_FLD( 0x2a041, "entry4",18,16, "forwarding vector for entry 140""", "" )
   RDW_DEF_FLD( 0x2a041, "entry5",22,20, "forwarding vector for entry 141""", "" )
   RDW_DEF_FLD( 0x2a041, "entry6",26,24, "forwarding vector for entry 142""", "" )
   RDW_DEF_FLD( 0x2a041, "entry7",30,28, "forwarding vector for entry 143""", "" )


   RDW_DEF("bi", 0x2a042, "red_bi0_fwd_vector18","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a042, "entry0",2,0, "forwarding vector for entry 144""", "" )
   RDW_DEF_FLD( 0x2a042, "entry1",6,4, "forwarding vector for entry 145""", "" )
   RDW_DEF_FLD( 0x2a042, "entry2",10,8, "forwarding vector for entry 146""", "" )
   RDW_DEF_FLD( 0x2a042, "entry3",14,12, "forwarding vector for entry 147""", "" )
   RDW_DEF_FLD( 0x2a042, "entry4",18,16, "forwarding vector for entry 148""", "" )
   RDW_DEF_FLD( 0x2a042, "entry5",22,20, "forwarding vector for entry 149""", "" )
   RDW_DEF_FLD( 0x2a042, "entry6",26,24, "forwarding vector for entry 150""", "" )
   RDW_DEF_FLD( 0x2a042, "entry7",30,28, "forwarding vector for entry 151""", "" )


   RDW_DEF("bi", 0x2a043, "red_bi0_fwd_vector19","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a043, "entry0",2,0, "forwarding vector for entry 152""", "" )
   RDW_DEF_FLD( 0x2a043, "entry1",6,4, "forwarding vector for entry 153""", "" )
   RDW_DEF_FLD( 0x2a043, "entry2",10,8, "forwarding vector for entry 154""", "" )
   RDW_DEF_FLD( 0x2a043, "entry3",14,12, "forwarding vector for entry 155""", "" )
   RDW_DEF_FLD( 0x2a043, "entry4",18,16, "forwarding vector for entry 156""", "" )
   RDW_DEF_FLD( 0x2a043, "entry5",22,20, "forwarding vector for entry 157""", "" )
   RDW_DEF_FLD( 0x2a043, "entry6",26,24, "forwarding vector for entry 158""", "" )
   RDW_DEF_FLD( 0x2a043, "entry7",30,28, "forwarding vector for entry 159""", "" )


   RDW_DEF("bi", 0x2a044, "red_bi0_fwd_vector20","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a044, "entry0",2,0, "forwarding vector for entry 160""", "" )
   RDW_DEF_FLD( 0x2a044, "entry1",6,4, "forwarding vector for entry 161""", "" )
   RDW_DEF_FLD( 0x2a044, "entry2",10,8, "forwarding vector for entry 162""", "" )
   RDW_DEF_FLD( 0x2a044, "entry3",14,12, "forwarding vector for entry 163""", "" )
   RDW_DEF_FLD( 0x2a044, "entry4",18,16, "forwarding vector for entry 164""", "" )
   RDW_DEF_FLD( 0x2a044, "entry5",22,20, "forwarding vector for entry 165""", "" )
   RDW_DEF_FLD( 0x2a044, "entry6",26,24, "forwarding vector for entry 166""", "" )
   RDW_DEF_FLD( 0x2a044, "entry7",30,28, "forwarding vector for entry 167""", "" )


   RDW_DEF("bi", 0x2a045, "red_bi0_fwd_vector21","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a045, "entry0",2,0, "forwarding vector for entry 168""", "" )
   RDW_DEF_FLD( 0x2a045, "entry1",6,4, "forwarding vector for entry 169""", "" )
   RDW_DEF_FLD( 0x2a045, "entry2",10,8, "forwarding vector for entry 170""", "" )
   RDW_DEF_FLD( 0x2a045, "entry3",14,12, "forwarding vector for entry 171""", "" )
   RDW_DEF_FLD( 0x2a045, "entry4",18,16, "forwarding vector for entry 172""", "" )
   RDW_DEF_FLD( 0x2a045, "entry5",22,20, "forwarding vector for entry 173""", "" )
   RDW_DEF_FLD( 0x2a045, "entry6",26,24, "forwarding vector for entry 174""", "" )
   RDW_DEF_FLD( 0x2a045, "entry7",30,28, "forwarding vector for entry 175""", "" )


   RDW_DEF("bi", 0x2a046, "red_bi0_fwd_vector22","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a046, "entry0",2,0, "forwarding vector for entry 176""", "" )
   RDW_DEF_FLD( 0x2a046, "entry1",6,4, "forwarding vector for entry 177""", "" )
   RDW_DEF_FLD( 0x2a046, "entry2",10,8, "forwarding vector for entry 178""", "" )
   RDW_DEF_FLD( 0x2a046, "entry3",14,12, "forwarding vector for entry 179""", "" )
   RDW_DEF_FLD( 0x2a046, "entry4",18,16, "forwarding vector for entry 180""", "" )
   RDW_DEF_FLD( 0x2a046, "entry5",22,20, "forwarding vector for entry 181""", "" )
   RDW_DEF_FLD( 0x2a046, "entry6",26,24, "forwarding vector for entry 182""", "" )
   RDW_DEF_FLD( 0x2a046, "entry7",30,28, "forwarding vector for entry 183""", "" )


   RDW_DEF("bi", 0x2a047, "red_bi0_fwd_vector23","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a047, "entry0",2,0, "forwarding vector for entry 184""", "" )
   RDW_DEF_FLD( 0x2a047, "entry1",6,4, "forwarding vector for entry 185""", "" )
   RDW_DEF_FLD( 0x2a047, "entry2",10,8, "forwarding vector for entry 186""", "" )
   RDW_DEF_FLD( 0x2a047, "entry3",14,12, "forwarding vector for entry 187""", "" )
   RDW_DEF_FLD( 0x2a047, "entry4",18,16, "forwarding vector for entry 188""", "" )
   RDW_DEF_FLD( 0x2a047, "entry5",22,20, "forwarding vector for entry 189""", "" )
   RDW_DEF_FLD( 0x2a047, "entry6",26,24, "forwarding vector for entry 190""", "" )
   RDW_DEF_FLD( 0x2a047, "entry7",30,28, "forwarding vector for entry 191""", "" )


   RDW_DEF("bi", 0x2a048, "red_bi0_fwd_vector24","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a048, "entry0",2,0, "forwarding vector for entry 192""", "" )
   RDW_DEF_FLD( 0x2a048, "entry1",6,4, "forwarding vector for entry 193""", "" )
   RDW_DEF_FLD( 0x2a048, "entry2",10,8, "forwarding vector for entry 194""", "" )
   RDW_DEF_FLD( 0x2a048, "entry3",14,12, "forwarding vector for entry 195""", "" )
   RDW_DEF_FLD( 0x2a048, "entry4",18,16, "forwarding vector for entry 196""", "" )
   RDW_DEF_FLD( 0x2a048, "entry5",22,20, "forwarding vector for entry 197""", "" )
   RDW_DEF_FLD( 0x2a048, "entry6",26,24, "forwarding vector for entry 198""", "" )
   RDW_DEF_FLD( 0x2a048, "entry7",30,28, "forwarding vector for entry 199""", "" )


   RDW_DEF("bi", 0x2a049, "red_bi0_fwd_vector25","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a049, "entry0",2,0, "forwarding vector for entry 200""", "" )
   RDW_DEF_FLD( 0x2a049, "entry1",6,4, "forwarding vector for entry 201""", "" )
   RDW_DEF_FLD( 0x2a049, "entry2",10,8, "forwarding vector for entry 202""", "" )
   RDW_DEF_FLD( 0x2a049, "entry3",14,12, "forwarding vector for entry 203""", "" )
   RDW_DEF_FLD( 0x2a049, "entry4",18,16, "forwarding vector for entry 204""", "" )
   RDW_DEF_FLD( 0x2a049, "entry5",22,20, "forwarding vector for entry 205""", "" )
   RDW_DEF_FLD( 0x2a049, "entry6",26,24, "forwarding vector for entry 206""", "" )
   RDW_DEF_FLD( 0x2a049, "entry7",30,28, "forwarding vector for entry 207""", "" )


   RDW_DEF("bi", 0x2a04a, "red_bi0_fwd_vector26","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a04a, "entry0",2,0, "forwarding vector for entry 208""", "" )
   RDW_DEF_FLD( 0x2a04a, "entry1",6,4, "forwarding vector for entry 209""", "" )
   RDW_DEF_FLD( 0x2a04a, "entry2",10,8, "forwarding vector for entry 210""", "" )
   RDW_DEF_FLD( 0x2a04a, "entry3",14,12, "forwarding vector for entry 211""", "" )
   RDW_DEF_FLD( 0x2a04a, "entry4",18,16, "forwarding vector for entry 212""", "" )
   RDW_DEF_FLD( 0x2a04a, "entry5",22,20, "forwarding vector for entry 213""", "" )
   RDW_DEF_FLD( 0x2a04a, "entry6",26,24, "forwarding vector for entry 214""", "" )
   RDW_DEF_FLD( 0x2a04a, "entry7",30,28, "forwarding vector for entry 215""", "" )


   RDW_DEF("bi", 0x2a04b, "red_bi0_fwd_vector27","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a04b, "entry0",2,0, "forwarding vector for entry 216""", "" )
   RDW_DEF_FLD( 0x2a04b, "entry1",6,4, "forwarding vector for entry 217""", "" )
   RDW_DEF_FLD( 0x2a04b, "entry2",10,8, "forwarding vector for entry 218""", "" )
   RDW_DEF_FLD( 0x2a04b, "entry3",14,12, "forwarding vector for entry 219""", "" )
   RDW_DEF_FLD( 0x2a04b, "entry4",18,16, "forwarding vector for entry 220""", "" )
   RDW_DEF_FLD( 0x2a04b, "entry5",22,20, "forwarding vector for entry 221""", "" )
   RDW_DEF_FLD( 0x2a04b, "entry6",26,24, "forwarding vector for entry 222""", "" )
   RDW_DEF_FLD( 0x2a04b, "entry7",30,28, "forwarding vector for entry 223""", "" )


   RDW_DEF("bi", 0x2a04c, "red_bi0_fwd_vector28","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a04c, "entry0",2,0, "forwarding vector for entry 224""", "" )
   RDW_DEF_FLD( 0x2a04c, "entry1",6,4, "forwarding vector for entry 225""", "" )
   RDW_DEF_FLD( 0x2a04c, "entry2",10,8, "forwarding vector for entry 226""", "" )
   RDW_DEF_FLD( 0x2a04c, "entry3",14,12, "forwarding vector for entry 227""", "" )
   RDW_DEF_FLD( 0x2a04c, "entry4",18,16, "forwarding vector for entry 228""", "" )
   RDW_DEF_FLD( 0x2a04c, "entry5",22,20, "forwarding vector for entry 229""", "" )
   RDW_DEF_FLD( 0x2a04c, "entry6",26,24, "forwarding vector for entry 230""", "" )
   RDW_DEF_FLD( 0x2a04c, "entry7",30,28, "forwarding vector for entry 231""", "" )


   RDW_DEF("bi", 0x2a04d, "red_bi0_fwd_vector29","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a04d, "entry0",2,0, "forwarding vector for entry 232""", "" )
   RDW_DEF_FLD( 0x2a04d, "entry1",6,4, "forwarding vector for entry 233""", "" )
   RDW_DEF_FLD( 0x2a04d, "entry2",10,8, "forwarding vector for entry 234""", "" )
   RDW_DEF_FLD( 0x2a04d, "entry3",14,12, "forwarding vector for entry 235""", "" )
   RDW_DEF_FLD( 0x2a04d, "entry4",18,16, "forwarding vector for entry 236""", "" )
   RDW_DEF_FLD( 0x2a04d, "entry5",22,20, "forwarding vector for entry 237""", "" )
   RDW_DEF_FLD( 0x2a04d, "entry6",26,24, "forwarding vector for entry 238""", "" )
   RDW_DEF_FLD( 0x2a04d, "entry7",30,28, "forwarding vector for entry 239""", "" )


   RDW_DEF("bi", 0x2a04e, "red_bi0_fwd_vector30","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a04e, "entry0",2,0, "forwarding vector for entry 240""", "" )
   RDW_DEF_FLD( 0x2a04e, "entry1",6,4, "forwarding vector for entry 241""", "" )
   RDW_DEF_FLD( 0x2a04e, "entry2",10,8, "forwarding vector for entry 242""", "" )
   RDW_DEF_FLD( 0x2a04e, "entry3",14,12, "forwarding vector for entry 243""", "" )
   RDW_DEF_FLD( 0x2a04e, "entry4",18,16, "forwarding vector for entry 244""", "" )
   RDW_DEF_FLD( 0x2a04e, "entry5",22,20, "forwarding vector for entry 245""", "" )
   RDW_DEF_FLD( 0x2a04e, "entry6",26,24, "forwarding vector for entry 246""", "" )
   RDW_DEF_FLD( 0x2a04e, "entry7",30,28, "forwarding vector for entry 247""", "" )


   RDW_DEF("bi", 0x2a04f, "red_bi0_fwd_vector31","7-drop, 6,5-rsvd(drop), 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a04f, "entry0",2,0, "forwarding vector for entry 248""", "" )
   RDW_DEF_FLD( 0x2a04f, "entry1",6,4, "forwarding vector for entry 249""", "" )
   RDW_DEF_FLD( 0x2a04f, "entry2",10,8, "forwarding vector for entry 250""", "" )
   RDW_DEF_FLD( 0x2a04f, "entry3",14,12, "forwarding vector for entry 251""", "" )
   RDW_DEF_FLD( 0x2a04f, "entry4",18,16, "forwarding vector for entry 252""", "" )
   RDW_DEF_FLD( 0x2a04f, "entry5",22,20, "forwarding vector for entry 253""", "" )
   RDW_DEF_FLD( 0x2a04f, "entry6",26,24, "forwarding vector for entry 254""", "" )
   RDW_DEF_FLD( 0x2a04f, "entry7",30,28, "forwarding vector for entry 255""", "" )


   RDW_DEF("bi", 0x2a050, "red_bi0_cfg_eg_nspi_timer","MAC Rx nspi bus timer. In unit of 256 core clock cycles. Zero==disable""", 0xffff, 0x20, "cfg")
   RDW_DEF_FLD( 0x2a050, "",15,0, "", "" )


   RDW_DEF("bi", 0x2a051, "red_bi0_cfg_pause","pause configuration""", 0xffffff, 0xc00000, "cfg")
   RDW_DEF_FLD( 0x2a051, "tx_wfc_en",0,0, "word flow control tx en""", "" )
   RDW_DEF_FLD( 0x2a051, "tx_pfc_en",1,1, "802.3x pause tx en""", "" )
   RDW_DEF_FLD( 0x2a051, "tx_cfc_en",9,2, "priority pause tx en""", "" )
   RDW_DEF_FLD( 0x2a051, "rx_wfc_en",10,10, "word flow control rx en""", "" )
   RDW_DEF_FLD( 0x2a051, "rx_pfc_en",11,11, "802.3x pause rx en""", "" )
   RDW_DEF_FLD( 0x2a051, "rx_cfc_en",19,12, "priority pause rx en""", "" )
   RDW_DEF_FLD( 0x2a051, "fc_timer_only",20,20, "xoff timer sample mode only""", "" )
   RDW_DEF_FLD( 0x2a051, "rx_ucast_en",21,21, "rx ucast pause enable""", "" )
   RDW_DEF_FLD( 0x2a051, "rx_mc_drop_en",22,22, "rx mc control frame enable""", "" )
   RDW_DEF_FLD( 0x2a051, "seq_type",23,23, "seq type for special control word""", "" )


   RDW_DEF("bi", 0x2a052, "red_bi0_cfg_pause_cfc_opcode","", 0xffff, 0x101, "cfg")
   RDW_DEF_FLD( 0x2a052, "",15,0, "priority pause op code""", "" )


   RDW_DEF("bi", 0x2a053, "red_bi0_cfg_pause_time","", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x2a053, "",15,0, "802.3x pause tx time""", "" )


   RDW_DEF("bi", 0x2a054, "red_bi0_cfg_pause_sample_timer","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a054, "",19,0, "xoff timer sample period""", "" )


   RDW_DEF("bi", 0x2a055, "red_bi0_cfg_pause_fc_limit","pause configuration""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a055, "",19,0, "xoff timer sample rate limit""", "" )


   RDW_DEF("bi", 0x2a056, "red_bi0_cfg_pause_0_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x2a056, "",3,0, "priority pause class 0 tx time""", "" )


   RDW_DEF("bi", 0x2a057, "red_bi0_cfg_pause_1_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x2a057, "",3,0, "priority pause class 1 tx time""", "" )


   RDW_DEF("bi", 0x2a058, "red_bi0_cfg_pause_2_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x2a058, "",3,0, "priority pause class 2 tx time""", "" )


   RDW_DEF("bi", 0x2a059, "red_bi0_cfg_pause_3_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x2a059, "",3,0, "priority pause class 3 tx time""", "" )


   RDW_DEF("bi", 0x2a05a, "red_bi0_cfg_pause_4_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x2a05a, "",3,0, "priority pause class 4 tx time""", "" )


   RDW_DEF("bi", 0x2a05b, "red_bi0_cfg_pause_5_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x2a05b, "",3,0, "priority pause class 5 tx time""", "" )


   RDW_DEF("bi", 0x2a05c, "red_bi0_cfg_pause_6_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x2a05c, "",3,0, "priority pause class 6 tx time""", "" )


   RDW_DEF("bi", 0x2a05d, "red_bi0_cfg_pause_7_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x2a05d, "",3,0, "priority pause class 7 tx time""", "" )


   RDW_DEF("bi", 0x2a05e, "red_bi0_cfg_pause_time_unit","", 0xffff, 0x13, "cfg")
   RDW_DEF_FLD( 0x2a05e, "",15,0, "pause time unit for 512 bit time\nvalue = INT(51.2/core_clock_cycle_time(ns))""", "" )


   RDW_DEF("bi", 0x2a05f, "red_bi0_cfg_pause_frac_time","", 0xff, 0x33, "cfg")
   RDW_DEF_FLD( 0x2a05f, "",7,0, "fractional portion of time unit\nvalue = FRAC(51.2/core_clock_cycle_time(ns))*256""", "" )


   RDW_DEF("bi", 0x2a060, "red_bi0_cfg_rma_sa_hi","pause sa[47:32]""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a060, "",15,0, "rx sa[47:32]""", "" )


   RDW_DEF("bi", 0x2a061, "red_bi0_cfg_rma_sa_lo","pause sa[31:0]""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a061, "",31,0, "rx sa[31:0]""", "" )


   RDW_DEF("bi", 0x2a062, "red_bi0_cfg_code_pause","code for wfc pause""", 0xff, 0x9c, "cfg")
   RDW_DEF_FLD( 0x2a062, "",7,0, "pause K character""", "" )


   RDW_DEF("bi", 0x2a063, "red_bi0_cfg_code_pause_sub","code for wfc pause""", 0xff, 0xdc, "cfg")
   RDW_DEF_FLD( 0x2a063, "",7,0, "pause code sub field""", "" )


   RDW_DEF("bi", 0x2a064, "red_bi0_gbe_CFG","config register""", 0xffffffff, 0x20180004, "cfg")
   RDW_DEF_FLD( 0x2a064, "rx_an_en",0,0, "When asserts, enable receive auto negotiation""", "" )
   RDW_DEF_FLD( 0x2a064, "rx_busy_en",1,1, "Reserved, set to zero""", "" )
   RDW_DEF_FLD( 0x2a064, "rx_crc_chk_en",2,2, "When asserts, enable receive crc check""", "" )
   RDW_DEF_FLD( 0x2a064, "tx_force_xmit_data",3,3, "When asserts, force xmit_data to be high to bypass AN""", "" )
   RDW_DEF_FLD( 0x2a064, "rx2tx_xoff_en",4,4, "When asserts, enable rx pause xoff halts the tx transmission""", "" )
   RDW_DEF_FLD( 0x2a064, "rx2tx_xoff_delay_time",14,5, "Specifies the delay time of the rx pause xoff halts the tx\ntransmission, zero means no delay. This allows some packets\nin the pipeline can be transmitted""", "" )
   RDW_DEF_FLD( 0x2a064, "pause_tx_en",15,15, "When asserts, enable transmit pause frame""", "" )
   RDW_DEF_FLD( 0x2a064, "pause_timer_only",16,16, "When asserts, core xoff state is periodically sampled\nto generate pause frame""", "" )
   RDW_DEF_FLD( 0x2a064, "ipg_transmit_time",26,17, "Specifies the inter-frame-gap in bytes""", "" )
   RDW_DEF_FLD( 0x2a064, "rx_link_rst",27,27, "When asserts, reset both link transmit and receive reside in\nlink manager""", "" )
   RDW_DEF_FLD( 0x2a064, "rx_jabber_len_1518",28,28, "When asserts, rx jabber lenth is packet size greater than 1518""", "" )
   RDW_DEF_FLD( 0x2a064, "rx_inrange_chk_en",29,29, "When asserts, rx payload lenth is checked if length field is valid""", "" )
   RDW_DEF_FLD( 0x2a064, "rx_sw_rst",30,30, "When asserts, soft reset the receive path. Software must set\nto zero to deassert the soft reset""", "" )
   RDW_DEF_FLD( 0x2a064, "tx_sw_rst",31,31, "When asserts, soft reset the transmit path. Software must set\nto zero to deassert the soft reset""", "" )


   RDW_DEF("bi", 0x2a065, "red_bi0_gbe_CFG_tx_an_config_word","config register""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a065, "",15,0, "Specifies the auto negotiation word to be transmited""", "" )


   RDW_DEF("bi", 0x2a066, "red_bi0_gbe_CFG_rx","config register""", 0x3fffff, 0x1005f2, "cfg")
   RDW_DEF_FLD( 0x2a066, "max_size",13,0, "Specifies the maximum receve packet size, oversized packets""", "" )
   RDW_DEF_FLD( 0x2a066, "min_size",20,14, "Specifies the minimum receve packet size, undersize packets\nare padded""", "" )
   RDW_DEF_FLD( 0x2a066, "flush_en",21,21, "When asserts, flush all ingress packets""", "" )


   RDW_DEF("bi", 0x2a067, "red_bi0_gbe_CFG_pause_time","pause config register""", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x2a067, "",15,0, "Specifies the pause quanta to be filled in the pause frame""", "" )


   RDW_DEF("bi", 0x2a068, "red_bi0_gbe_CFG_pause_sample_timer","pause config register""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a068, "",19,0, "Specifies sampling interval for core xoff state to generate\nthe pause frame""", "" )


   RDW_DEF("bi", 0x2a069, "red_bi0_gbe_CFG_pause_fc_limit","pause configuration""", 0xfffff, 0x1, "cfg")
   RDW_DEF_FLD( 0x2a069, "",19,0, "Specifies the minimum time interval to sample the transition of xoff state,\nthis timer serves as a low pass filter to filter out unnessary transmission\nof pause frame due to coer xoff transition""", "" )


   RDW_DEF("bi", 0x2a06a, "red_bi0_gbe_CFG_mii_mdc_period","mii config register""", 0xff, 0x3c, "cfg")
   RDW_DEF_FLD( 0x2a06a, "",7,0, "Specifies the MDIO clock period, uint is the core clcok""", "" )


   RDW_DEF("bi", 0x2a06b, "red_bi0_gbe_CFG_mii_mdio","mii config register""", 0x1ffff, 0x13205, "cfg")
   RDW_DEF_FLD( 0x2a06b, "hold",7,0, "Specifies the MDIO output hold period, need to satisfy at least\n10ns, unit is mac clock which is 8ns for 1GbE""", "" )
   RDW_DEF_FLD( 0x2a06b, "in_rdy",15,8, "Specifies the MDIO input sampling time, unit is mac clock which\nis 8ns for 1GbE""", "" )
   RDW_DEF_FLD( 0x2a06b, "sw_rst",16,16, "When asserts, reset the MDIO logic""", "" )


   RDW_DEF("bi", 0x2a06c, "red_bi0_gbe_CFG_mii","mii config register""", 0x1fffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a06c, "din",15,0, "Specifies the MDIO write data""", "" )
   RDW_DEF_FLD( 0x2a06c, "regaddr",20,16, "Specifies the MDIO reg address""", "" )
   RDW_DEF_FLD( 0x2a06c, "phyaddr",25,21, "Specifies the MDIO phy address""", "" )
   RDW_DEF_FLD( 0x2a06c, "read_write",26,26, "Specifies the MDIO read/write op code""", "" )
   RDW_DEF_FLD( 0x2a06c, "skip_preamble",27,27, "When asserts, MDIO access suppresses preamble""", "" )
   RDW_DEF_FLD( 0x2a06c, "go",28,28, "When 0->1 transition, triggers the transmisson of MDIO word""", "" )


   RDW_DEF("bi", 0x2a06d, "red_bi0_gbe_STA_mii","mii stat register""", 0x1ffff, 0x0, "sta")
   RDW_DEF_FLD( 0x2a06d, "dout",15,0, "MDIO read data from PHYs""", "" )
   RDW_DEF_FLD( 0x2a06d, "busy",16,16, "Status indicate if the MDIO access is complete or not\n1: MDIO access is in porgress\n0: MDIO access is complete""", "" )


   RDW_DEF("bi", 0x2a06e, "red_bi0_gbe_CFG_rma","rma config register""", 0x7, 0x4, "cfg")
   RDW_DEF_FLD( 0x2a06e, "ignore_ctl_da",0,0, "When asserts, MAC control frame qualification does\nnot include MAC DA comparision""", "" )
   RDW_DEF_FLD( 0x2a06e, "dont_pause",1,1, "When asserts, do not activate pause timer""", "" )
   RDW_DEF_FLD( 0x2a06e, "rx_ctl_frm_en",2,2, "When asserts, enable MAC control frame receive""", "" )


   RDW_DEF("bi", 0x2a06f, "red_bi0_gbe_CFG_rma_fc","rma config register""", 0xffffffff, 0x18808, "cfg")
   RDW_DEF_FLD( 0x2a06f, "type",15,0, "Specifies the EtherType for MAC control frame""", "" )
   RDW_DEF_FLD( 0x2a06f, "opcode",31,16, "Specifies the Mac OpCode for MAC control frame""", "" )


   RDW_DEF("bi", 0x2a070, "red_bi0_gbe_CFG_rma_fc_da_hi","rma config register""", 0xffff, 0x180, "cfg")
   RDW_DEF_FLD( 0x2a070, "",15,0, "Specifies the MAC DA bit[47:32] for MAC control frame""", "" )


   RDW_DEF("bi", 0x2a071, "red_bi0_gbe_CFG_rma_fc_da_lo","rma config register""", 0xffffffff, 0xc2000001, "cfg")
   RDW_DEF_FLD( 0x2a071, "",31,0, "Specifies the MAC DA bit[31:0] for MAC control frame""", "" )


   RDW_DEF("bi", 0x2a072, "red_bi0_gbe_CFG_rma_sa_hi","rma config register""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a072, "",15,0, "Specifies the MAC SA bit[47:32] for MAC control frame""", "" )


   RDW_DEF("bi", 0x2a073, "red_bi0_gbe_CFG_rma_sa_lo","rma config register""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a073, "",31,0, "Specifies the MAC SA bit[31:0] for MAC control frame""", "" )


   RDW_DEF("bi", 0x2a074, "red_bi0_gbe_CNT_rma0","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x2a074, "drop_ctl_pkt",31,0, "Statistics for dropped MAC control frame""", "" )


   RDW_DEF("bi", 0x2a075, "red_bi0_gbe_CNT_rma1","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x2a075, "rx_pause",31,0, "Statistics for received pause frame""", "" )


   RDW_DEF("bi", 0x2a076, "red_bi0_gbe_CNT_rma2","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x2a076, "rx_ctl_pkt",31,0, "Statistics for received MAC ctrl frame""", "" )


   RDW_DEF("bi", 0x2a077, "red_bi0_gbe_INT","interrupt register""", 0xffff, 0x0, "int")
   RDW_DEF_FLD( 0x2a077, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x2a077, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x2a077, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x2a077, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x2a077, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x2a077, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x2a077, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x2a077, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x2a077, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x2a077, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x2a077, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x2a077, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x2a077, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x2a077, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x2a077, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x2a077, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )


   RDW_DEF("bi", 0x2a078, "red_bi0_gbe_INT_msk","interrupt register""", 0xffff, 0x1800, "int_msk")
   RDW_DEF_FLD( 0x2a078, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x2a078, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x2a078, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x2a078, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x2a078, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x2a078, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x2a078, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x2a078, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x2a078, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x2a078, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x2a078, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x2a078, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x2a078, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x2a078, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x2a078, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x2a078, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )


   RDW_DEF("bi", 0x2a079, "red_bi0_gbe_INT_tst","interrupt register""", 0xffff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x2a079, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x2a079, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x2a079, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x2a079, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x2a079, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x2a079, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x2a079, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x2a079, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x2a079, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x2a079, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x2a079, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x2a079, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x2a079, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x2a079, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x2a079, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x2a079, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )


   RDW_DEF("bi", 0x2a07a, "red_bi0_gbe_STA","parser fifo ecc error address""", 0xffffff, 0x0, "sta")
   RDW_DEF_FLD( 0x2a07a, "an_rx_flow_ctrl_en",0,0, "Status shows the negotiated receive pause enabled""", "" )
   RDW_DEF_FLD( 0x2a07a, "an_tx_flow_ctrl_en",1,1, "Status shows the negotiated transmit pause enabled""", "" )
   RDW_DEF_FLD( 0x2a07a, "an_full_duplex",2,2, "Status shows the negotiated full duplex mode""", "" )
   RDW_DEF_FLD( 0x2a07a, "rx_an_complete",3,3, "Status shows the auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x2a07a, "rx_config_word",19,4, "Status shows the received auto-negotiation word from\nremote link partner""", "" )
   RDW_DEF_FLD( 0x2a07a, "an_fsm_state",22,20, "Status shows the current N fsm state""", "" )
   RDW_DEF_FLD( 0x2a07a, "rx_synchronized",23,23, "Status shows the rx synchronous status""", "" )


   RDW_DEF("bi", 0x2a07b, "red_bi0_CFG_spare","spare config register""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a07b, "",7,0, "Spare gate config bus""", "" )


   RDW_DEF("bi", 0x2a07c, "red_bi0_STA_spare","spare status""", 0xff, 0x0, "sta")
   RDW_DEF_FLD( 0x2a07c, "",7,0, "Spare status bus""", "" )


   RDW_DEF("bi", 0x2a07d, "red_bi0_gbe_CFG_pause","pause configuration""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a07d, "tx_pfc_en",0,0, "When asserts, enable 802.3x pause transmission""", "" )
   RDW_DEF_FLD( 0x2a07d, "tx_cfc_en",8,1, "When asserts, enable per-priority pause transmission""", "" )
   RDW_DEF_FLD( 0x2a07d, "rx_pfc_en",9,9, "When asserts, enable 802.3x pause receiving""", "" )
   RDW_DEF_FLD( 0x2a07d, "rx_cfc_en",17,10, "When asserts, enable per-priority pause receiving""", "" )
   RDW_DEF_FLD( 0x2a07d, "fc_timer_only",18,18, "When asserts, timer timeout triggers the transmission of\npause frame. When deasserts, both timer timeout and core xoff state \ntransition can triggers the transmission of pause frame""", "" )
   RDW_DEF_FLD( 0x2a07d, "rx_ucast_en",19,19, "When asserts, enable unicast pause receiving, otherwise only multicast\npause frame is recognized""", "" )


   RDW_DEF("bi", 0x2a07e, "red_bi0_gbe_CFG_pause_cfc_opcode","pause configuration""", 0xffff, 0x101, "cfg")
   RDW_DEF_FLD( 0x2a07e, "",15,0, "Specifies the Mac ControlCode for per-priority pause""", "" )


   RDW_DEF("bi", 0x2a07f, "red_bi0_gbe_CFG_tx_flush_en","tx flush enable""", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a07f, "",0,0, "when set, mac will flush all egress packets""", "" )


   RDW_DEF("bi", 0x2a080, "red_bi0_hash_channel0"," config for etherchannel 0""", 0x1f3ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a080, "select_fcoe",1,0, "select one of four hash algorithms for fcoe """, "" )
   RDW_DEF_FLD( 0x2a080, "select_non_fcoe",3,2, "select one of four hash algorithms for non-fcoe """, "" )
   RDW_DEF_FLD( 0x2a080, "fcoe_field_select",9,4, "determines which fields to include in hash calculation for FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 FC-DID\nbit 4:  L3 FC-SID\nbit 5:  L3 FC-OXID""", "" )
   RDW_DEF_FLD( 0x2a080, "non_fcoe_field_select",16,12, "determines which fields to include in hash calculation for non-FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 IP-DA\nbit 4:  L3 IP-SA""", "" )


   RDW_DEF("bi", 0x2a081, "red_bi0_hash_channel1"," config for etherchannel 1""", 0x1f3ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a081, "select_fcoe",1,0, "select one of four hash algorithms for fcoe """, "" )
   RDW_DEF_FLD( 0x2a081, "select_non_fcoe",3,2, "select one of four hash algorithms for non-fcoe """, "" )
   RDW_DEF_FLD( 0x2a081, "fcoe_field_select",9,4, "determines which fields to include in hash calculation for FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 FC-DID\nbit 4:  L3 FC-SID\nbit 5:  L3 FC-OXID""", "" )
   RDW_DEF_FLD( 0x2a081, "non_fcoe_field_select",16,12, "determines which fields to include in hash calculation for non-FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 IP-DA\nbit 4:  L3 IP-SA""", "" )


   RDW_DEF("bi", 0x2a082, "red_bi0_cnt_rx_mc_drop","count for mac control frame drops""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x2a082, "",31,0, "count for dropped mac control pkt""", "" )


   RDW_DEF("bi", 0x2a083, "red_bi0_cnt_rx_fwd_drop","counts packets that are dropped when forwarding vector is 7""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x2a083, "",31,0, "", "" )


   RDW_DEF("bi", 0x2a084, "red_bi0_cnt_rx_src_vif_out_of_range_drop","counts packets that are dropped because src vif is out of range""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x2a084, "",31,0, "", "" )


   RDW_DEF("bi", 0x2a085, "red_bi0_cnt_tx_lb_drop","counts packets dropped because the packet has the L-BIT set, is in the svif range,\nand the port is not in vntag mode""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x2a085, "",15,0, "", "" )


   RDW_DEF("bi", 0x2a086, "red_bi0_cnt_rx_allow_vntag_drop","counts dropped packets that were received with a vntag, when the allow_vntag bit is false""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x2a086, "",15,0, "", "" )


   RDW_DEF("bi", 0x2a087, "red_bi0_cnt_rx_echannel_drop","counts dropped packets that should be forwarded to an etherchannel, but the etherchannel map is empty""", 0xff, 0x0, "cnt")
   RDW_DEF_FLD( 0x2a087, "",7,0, "", "" )


   RDW_DEF("bi", 0x2a088, "red_bi0_pkt_lpbk","", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a088, "",0,0, "packet based loopback enable""", "" )


   RDW_DEF("bi", 0x2a089, "red_bi0_port_cfg","", 0xfff, 0x8, "cfg")
   RDW_DEF_FLD( 0x2a089, "is_vntag",0,0, "port is in vntag mode""", "" )
   RDW_DEF_FLD( 0x2a089, "rx_vntag_passthru",1,1, "don't rewrite/strip/insert vntag's""", "" )
   RDW_DEF_FLD( 0x2a089, "tx_vntag_passthru",2,2, "don't rewrite/strip/insert vntag's""", "" )
   RDW_DEF_FLD( 0x2a089, "rx_allow_vntag",3,3, "", "" )
   RDW_DEF_FLD( 0x2a089, "cmtag_version",5,4, "CMTAG version input to the parser""", "" )
   RDW_DEF_FLD( 0x2a089, "fcoe_is_t11",6,6, "If set, FCOE packets must be compatible with the T11 FCOE spec""", "" )
   RDW_DEF_FLD( 0x2a089, "fcoe_t11_version",10,7, "T11 version field.  FCOE packets must have the version less than or equal\nthe FCOE_T11_VERSION to be recognized as FCOE by the parser""", "" )
   RDW_DEF_FLD( 0x2a089, "tx_err_en",11,11, "when set, any errors will be forwarded to the link,\nresulting in an error code (0xFE) being inserted in the packet""", "" )


   RDW_DEF("bi", 0x2a08a, "red_bi0_intr","interrupt register""", 0x3f, 0x0, "int")
   RDW_DEF_FLD( 0x2a08a, "rx_fifo_ovfl",0,0, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x2a08a, "tx_pkt_err",1,1, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x2a08a, "vif_out_of_range",2,2, "src vif is out of range""", "" )
   RDW_DEF_FLD( 0x2a08a, "runt_pkt_drop",3,3, "received a runt pkt in the tx direction""", "" )
   RDW_DEF_FLD( 0x2a08a, "tx_crc_err",4,4, "", "" )
   RDW_DEF_FLD( 0x2a08a, "tx_prsr_l2_err",5,5, "tx parser asserted the info2_hdr_err""", "" )


   RDW_DEF("bi", 0x2a08b, "red_bi0_intr_msk","interrupt register""", 0x3f, 0x0, "int_msk")
   RDW_DEF_FLD( 0x2a08b, "rx_fifo_ovfl",0,0, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x2a08b, "tx_pkt_err",1,1, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x2a08b, "vif_out_of_range",2,2, "src vif is out of range""", "" )
   RDW_DEF_FLD( 0x2a08b, "runt_pkt_drop",3,3, "received a runt pkt in the tx direction""", "" )
   RDW_DEF_FLD( 0x2a08b, "tx_crc_err",4,4, "", "" )
   RDW_DEF_FLD( 0x2a08b, "tx_prsr_l2_err",5,5, "tx parser asserted the info2_hdr_err""", "" )


   RDW_DEF("bi", 0x2a08c, "red_bi0_intr_tst","interrupt register""", 0x3f, 0x0, "int_tst")
   RDW_DEF_FLD( 0x2a08c, "rx_fifo_ovfl",0,0, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x2a08c, "tx_pkt_err",1,1, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x2a08c, "vif_out_of_range",2,2, "src vif is out of range""", "" )
   RDW_DEF_FLD( 0x2a08c, "runt_pkt_drop",3,3, "received a runt pkt in the tx direction""", "" )
   RDW_DEF_FLD( 0x2a08c, "tx_crc_err",4,4, "", "" )
   RDW_DEF_FLD( 0x2a08c, "tx_prsr_l2_err",5,5, "tx parser asserted the info2_hdr_err""", "" )


   RDW_DEF("bi", 0x2a08d, "red_bi0_sta_rx_runt_pkt_size","", 0xff, 0x0, "sta")
   RDW_DEF_FLD( 0x2a08d, "",7,0, "size of the rx runt packet received""", "" )


   RDW_DEF("bi", 0x2a08e, "red_bi0_cnt_rx_runt_pkt_drop","", 0xff, 0x0, "cnt")
   RDW_DEF_FLD( 0x2a08e, "",7,0, "rx runt packet drop""", "" )


    RDW_DEF_DHS("bi", 0x2a090, "red_bi0_dhs_rx_fcoe_cnt_00", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x2a090, "_00",31,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("bi", 0x2a091, "red_bi0_dhs_rx_fcoe_cnt_01", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x2a091, "_01",3,0,"fcoe/non fcoe counts.\n","" )


    RDW_DEF_DHS("bi", 0x2a098, "red_bi0_dhs_tx_fcoe_cnt_00", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x2a098, "_00",31,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("bi", 0x2a099, "red_bi0_dhs_tx_fcoe_cnt_01", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x2a099, "_01",3,0,"fcoe/non fcoe counts.\n","" )


   RDW_DEF("bi", 0x2a0a0, "red_bi0_sta_stat_upper","upper 4 bits of the dhs_mac_stat""", 0xf, 0x0, "sta")
   RDW_DEF_FLD( 0x2a0a0, "",3,0, "SW can read this after reading the dhs_mac_stat or dhs_fcoe_count to get the\nupper 4 bits of the stats. Other wise the 2nd dhs read will\nget the latest value of the dhs""", "" )


    RDW_DEF_DHS("bi", 0x2a0c0, "red_bi0_dhs_mac_stat", "10Mbps/100Mbps/1Gbps MAC statistics access""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x2a0c0, "",31,0,"stats access","" )


   RDW_DEF("bi", 0x2a100, "red_bi0_cnt_mac_rx_octet_oflo","overflow counter for 10Mbps/100Mbps/1Gbps rx octets""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x2a100, "",31,0, "overflow count""", "" )


   RDW_DEF("bi", 0x2a101, "red_bi0_cnt_mac_tx_octet_oflo","overflow counter for 10Mbps/100Mbps/1Gbps tx octets""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x2a101, "",31,0, "overflow count""", "" )


   RDW_DEF("bi", 0x2a102, "red_bi0_cfg_etherchannel","", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a102, "nif_map0",3,0, "one-hot encodes nif ports that are included in an etherchannel""", "" )
   RDW_DEF_FLD( 0x2a102, "nif_map1",7,4, "one-hot encodes nif ports that are included in an etherchannel""", "" )


   RDW_DEF("bi", 0x2a103, "red_bi0_cfg","global configuration for Redwood""", 0x1, 0x1, "cfg")
   RDW_DEF_FLD( 0x2a103, "drop_on_err",0,0, "when set, error packets will be dropped.\nOtherwise error packets will be forwarded to the ci interface""", "" )


   RDW_DEF("bi", 0x2a104, "red_bi0_cfg_eth_type_fcoe","", 0xffff, 0x8906, "cfg")
   RDW_DEF_FLD( 0x2a104, "",15,0, "ethertype for fcoe packets""", "" )


   RDW_DEF("bi", 0x2a105, "red_bi0_cfg_eth_type_vntag","", 0xffff, 0x564e, "cfg")
   RDW_DEF_FLD( 0x2a105, "",15,0, "ethertype for vntag packets""", "" )


   RDW_DEF("bi", 0x2a106, "red_bi0_cfg_eth_type_stag","", 0xffff, 0x88a8, "cfg")
   RDW_DEF_FLD( 0x2a106, "",15,0, "ethertype for stag packets""", "" )


   RDW_DEF("bi", 0x2a107, "red_bi0_cfg_eth_type_cmd","", 0xffff, 0x8850, "cfg")
   RDW_DEF_FLD( 0x2a107, "",15,0, "cisco metadata ethertype""", "" )


   RDW_DEF("bi", 0x2a108, "red_bi0_cfg_eth_type_cmtag","", 0xffff, 0x8904, "cfg")
   RDW_DEF_FLD( 0x2a108, "",15,0, "cmtag (RLT) tag ethertype""", "" )


   RDW_DEF("bi", 0x2a109, "red_bi0_cfg_max_cmd_size","", 0xff, 0x4, "cfg")
   RDW_DEF_FLD( 0x2a109, "",7,0, "maximum cmd size in words""", "" )


   RDW_DEF("bi", 0x2a10a, "red_bi0_cfg_debug","debug mux control register for NF block""", 0x7f, 0x0, "cfg")
   RDW_DEF_FLD( 0x2a10a, "enable",0,0, "debug bus master is NF""", "" )
   RDW_DEF_FLD( 0x2a10a, "select",4,1, "debug mux control. Select up to 16 internal buses""", "" )
   RDW_DEF_FLD( 0x2a10a, "fin_enable",5,5, "enable the fin  for debug""", "" )
   RDW_DEF_FLD( 0x2a10a, "fout_enable",6,6, "enable the fout for debug""", "" )


   RDW_DEF("bi", 0x2a10c, "red_bi0_dhs_fin","dhs frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x2a10c, "_00",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("bi", 0x2a10d, "red_bi0_dhs_fin","dhs frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x2a10d, "_01",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("bi", 0x2a10e, "red_bi0_dhs_fin","dhs frame in""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x2a10e, "_02",5,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )


   RDW_DEF("bi", 0x2a110, "red_bi0_dhs_fout","dhs frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x2a110, "_00",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("bi", 0x2a111, "red_bi0_dhs_fout","dhs frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x2a111, "_01",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("bi", 0x2a112, "red_bi0_dhs_fout","dhs frame out""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x2a112, "_02",5,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )


   RDW_DEF("hi", 0x40000, "red_hi0_mac_cfg","MAC config""", 0xffffffff, 0xc803740c, "cfg")
   RDW_DEF_FLD( 0x40000, "tx_ipg_length",6,0, "ipg in 8 bit units""", "" )
   RDW_DEF_FLD( 0x40000, "enable_rx",7,7, "enable receive""", "" )
   RDW_DEF_FLD( 0x40000, "enable_tx",8,8, "enable transmit""", "" )
   RDW_DEF_FLD( 0x40000, "mac_mode",9,9, "set to 0 for LAN mode, 1 for WAN mode""", "" )
   RDW_DEF_FLD( 0x40000, "promis_en",10,10, "enable mac promiscous operation""", "" )
   RDW_DEF_FLD( 0x40000, "pad_en",11,11, "enable frame padding""", "" )
   RDW_DEF_FLD( 0x40000, "crc_fwd",12,12, "set to 1 to forward CRC with frame""", "" )
   RDW_DEF_FLD( 0x40000, "pause_fwd",13,13, "set to 1 to forward pause frames to user application""", "" )
   RDW_DEF_FLD( 0x40000, "pause_ignore",14,14, "set to 1 to ignore pause frames""", "" )
   RDW_DEF_FLD( 0x40000, "tx_addr_ins",15,15, "transmit MAC address insertion""", "" )
   RDW_DEF_FLD( 0x40000, "cmd_frm_ena",16,16, "when set, all command frames are accepted""", "" )
   RDW_DEF_FLD( 0x40000, "rx_err_frm_disc",17,17, "when set, errored frames are discarded""", "" )
   RDW_DEF_FLD( 0x40000, "force_send_idle",18,18, "Force continous idle generation""", "" )
   RDW_DEF_FLD( 0x40000, "force_send_rf",19,19, "Force continous rf generation""", "" )
   RDW_DEF_FLD( 0x40000, "no_lgth_check",20,20, "when set to 1, payload length check is disabled""", "" )
   RDW_DEF_FLD( 0x40000, "tx_scramble_en",21,21, "when set to 1, enable tx scrambler""", "" )
   RDW_DEF_FLD( 0x40000, "tx_dynamic_map_en",22,22, "when set to 1, enable tx lane dynamic mapping""", "" )
   RDW_DEF_FLD( 0x40000, "rx_scramble_en",23,23, "when set to 1, enable rx scrambler""", "" )
   RDW_DEF_FLD( 0x40000, "rx_dynamic_map_en",24,24, "when set to 1, enable rx lane dynamic mapping""", "" )
   RDW_DEF_FLD( 0x40000, "rx0_lane_map",26,25, "rx lane0 mapping""", "" )
   RDW_DEF_FLD( 0x40000, "rx1_lane_map",28,27, "rx lane1 mapping""", "" )
   RDW_DEF_FLD( 0x40000, "rx2_lane_map",30,29, "rx lane2 mapping""", "" )
   RDW_DEF_FLD( 0x40000, "rx3_lane_map_00",31,31, "rx lane3 mapping""", "" )
   RDW_DEF("hi", 0x40001, "red_hi0_mac_cfg","MAC config""", 0x1, 0x1, "cfg")
   RDW_DEF_FLD( 0x40001, "rx3_lane_map_01",0,0, "rx lane3 mapping""", "" )
   RDW_DEF("hi", 0x42000, "red_hi1_mac_cfg","MAC config""", 0xffffffff, 0xc803740c, "cfg")
   RDW_DEF_FLD( 0x42000, "tx_ipg_length",6,0, "ipg in 8 bit units""", "" )
   RDW_DEF_FLD( 0x42000, "enable_rx",7,7, "enable receive""", "" )
   RDW_DEF_FLD( 0x42000, "enable_tx",8,8, "enable transmit""", "" )
   RDW_DEF_FLD( 0x42000, "mac_mode",9,9, "set to 0 for LAN mode, 1 for WAN mode""", "" )
   RDW_DEF_FLD( 0x42000, "promis_en",10,10, "enable mac promiscous operation""", "" )
   RDW_DEF_FLD( 0x42000, "pad_en",11,11, "enable frame padding""", "" )
   RDW_DEF_FLD( 0x42000, "crc_fwd",12,12, "set to 1 to forward CRC with frame""", "" )
   RDW_DEF_FLD( 0x42000, "pause_fwd",13,13, "set to 1 to forward pause frames to user application""", "" )
   RDW_DEF_FLD( 0x42000, "pause_ignore",14,14, "set to 1 to ignore pause frames""", "" )
   RDW_DEF_FLD( 0x42000, "tx_addr_ins",15,15, "transmit MAC address insertion""", "" )
   RDW_DEF_FLD( 0x42000, "cmd_frm_ena",16,16, "when set, all command frames are accepted""", "" )
   RDW_DEF_FLD( 0x42000, "rx_err_frm_disc",17,17, "when set, errored frames are discarded""", "" )
   RDW_DEF_FLD( 0x42000, "force_send_idle",18,18, "Force continous idle generation""", "" )
   RDW_DEF_FLD( 0x42000, "force_send_rf",19,19, "Force continous rf generation""", "" )
   RDW_DEF_FLD( 0x42000, "no_lgth_check",20,20, "when set to 1, payload length check is disabled""", "" )
   RDW_DEF_FLD( 0x42000, "tx_scramble_en",21,21, "when set to 1, enable tx scrambler""", "" )
   RDW_DEF_FLD( 0x42000, "tx_dynamic_map_en",22,22, "when set to 1, enable tx lane dynamic mapping""", "" )
   RDW_DEF_FLD( 0x42000, "rx_scramble_en",23,23, "when set to 1, enable rx scrambler""", "" )
   RDW_DEF_FLD( 0x42000, "rx_dynamic_map_en",24,24, "when set to 1, enable rx lane dynamic mapping""", "" )
   RDW_DEF_FLD( 0x42000, "rx0_lane_map",26,25, "rx lane0 mapping""", "" )
   RDW_DEF_FLD( 0x42000, "rx1_lane_map",28,27, "rx lane1 mapping""", "" )
   RDW_DEF_FLD( 0x42000, "rx2_lane_map",30,29, "rx lane2 mapping""", "" )
   RDW_DEF_FLD( 0x42000, "rx3_lane_map_00",31,31, "rx lane3 mapping""", "" )
   RDW_DEF("hi", 0x42001, "red_hi1_mac_cfg","MAC config""", 0x1, 0x1, "cfg")
   RDW_DEF_FLD( 0x42001, "rx3_lane_map_01",0,0, "rx lane3 mapping""", "" )
   RDW_DEF("hi", 0x44000, "red_hi2_mac_cfg","MAC config""", 0xffffffff, 0xc803740c, "cfg")
   RDW_DEF_FLD( 0x44000, "tx_ipg_length",6,0, "ipg in 8 bit units""", "" )
   RDW_DEF_FLD( 0x44000, "enable_rx",7,7, "enable receive""", "" )
   RDW_DEF_FLD( 0x44000, "enable_tx",8,8, "enable transmit""", "" )
   RDW_DEF_FLD( 0x44000, "mac_mode",9,9, "set to 0 for LAN mode, 1 for WAN mode""", "" )
   RDW_DEF_FLD( 0x44000, "promis_en",10,10, "enable mac promiscous operation""", "" )
   RDW_DEF_FLD( 0x44000, "pad_en",11,11, "enable frame padding""", "" )
   RDW_DEF_FLD( 0x44000, "crc_fwd",12,12, "set to 1 to forward CRC with frame""", "" )
   RDW_DEF_FLD( 0x44000, "pause_fwd",13,13, "set to 1 to forward pause frames to user application""", "" )
   RDW_DEF_FLD( 0x44000, "pause_ignore",14,14, "set to 1 to ignore pause frames""", "" )
   RDW_DEF_FLD( 0x44000, "tx_addr_ins",15,15, "transmit MAC address insertion""", "" )
   RDW_DEF_FLD( 0x44000, "cmd_frm_ena",16,16, "when set, all command frames are accepted""", "" )
   RDW_DEF_FLD( 0x44000, "rx_err_frm_disc",17,17, "when set, errored frames are discarded""", "" )
   RDW_DEF_FLD( 0x44000, "force_send_idle",18,18, "Force continous idle generation""", "" )
   RDW_DEF_FLD( 0x44000, "force_send_rf",19,19, "Force continous rf generation""", "" )
   RDW_DEF_FLD( 0x44000, "no_lgth_check",20,20, "when set to 1, payload length check is disabled""", "" )
   RDW_DEF_FLD( 0x44000, "tx_scramble_en",21,21, "when set to 1, enable tx scrambler""", "" )
   RDW_DEF_FLD( 0x44000, "tx_dynamic_map_en",22,22, "when set to 1, enable tx lane dynamic mapping""", "" )
   RDW_DEF_FLD( 0x44000, "rx_scramble_en",23,23, "when set to 1, enable rx scrambler""", "" )
   RDW_DEF_FLD( 0x44000, "rx_dynamic_map_en",24,24, "when set to 1, enable rx lane dynamic mapping""", "" )
   RDW_DEF_FLD( 0x44000, "rx0_lane_map",26,25, "rx lane0 mapping""", "" )
   RDW_DEF_FLD( 0x44000, "rx1_lane_map",28,27, "rx lane1 mapping""", "" )
   RDW_DEF_FLD( 0x44000, "rx2_lane_map",30,29, "rx lane2 mapping""", "" )
   RDW_DEF_FLD( 0x44000, "rx3_lane_map_00",31,31, "rx lane3 mapping""", "" )
   RDW_DEF("hi", 0x44001, "red_hi2_mac_cfg","MAC config""", 0x1, 0x1, "cfg")
   RDW_DEF_FLD( 0x44001, "rx3_lane_map_01",0,0, "rx lane3 mapping""", "" )
   RDW_DEF("hi", 0x46000, "red_hi3_mac_cfg","MAC config""", 0xffffffff, 0xc803740c, "cfg")
   RDW_DEF_FLD( 0x46000, "tx_ipg_length",6,0, "ipg in 8 bit units""", "" )
   RDW_DEF_FLD( 0x46000, "enable_rx",7,7, "enable receive""", "" )
   RDW_DEF_FLD( 0x46000, "enable_tx",8,8, "enable transmit""", "" )
   RDW_DEF_FLD( 0x46000, "mac_mode",9,9, "set to 0 for LAN mode, 1 for WAN mode""", "" )
   RDW_DEF_FLD( 0x46000, "promis_en",10,10, "enable mac promiscous operation""", "" )
   RDW_DEF_FLD( 0x46000, "pad_en",11,11, "enable frame padding""", "" )
   RDW_DEF_FLD( 0x46000, "crc_fwd",12,12, "set to 1 to forward CRC with frame""", "" )
   RDW_DEF_FLD( 0x46000, "pause_fwd",13,13, "set to 1 to forward pause frames to user application""", "" )
   RDW_DEF_FLD( 0x46000, "pause_ignore",14,14, "set to 1 to ignore pause frames""", "" )
   RDW_DEF_FLD( 0x46000, "tx_addr_ins",15,15, "transmit MAC address insertion""", "" )
   RDW_DEF_FLD( 0x46000, "cmd_frm_ena",16,16, "when set, all command frames are accepted""", "" )
   RDW_DEF_FLD( 0x46000, "rx_err_frm_disc",17,17, "when set, errored frames are discarded""", "" )
   RDW_DEF_FLD( 0x46000, "force_send_idle",18,18, "Force continous idle generation""", "" )
   RDW_DEF_FLD( 0x46000, "force_send_rf",19,19, "Force continous rf generation""", "" )
   RDW_DEF_FLD( 0x46000, "no_lgth_check",20,20, "when set to 1, payload length check is disabled""", "" )
   RDW_DEF_FLD( 0x46000, "tx_scramble_en",21,21, "when set to 1, enable tx scrambler""", "" )
   RDW_DEF_FLD( 0x46000, "tx_dynamic_map_en",22,22, "when set to 1, enable tx lane dynamic mapping""", "" )
   RDW_DEF_FLD( 0x46000, "rx_scramble_en",23,23, "when set to 1, enable rx scrambler""", "" )
   RDW_DEF_FLD( 0x46000, "rx_dynamic_map_en",24,24, "when set to 1, enable rx lane dynamic mapping""", "" )
   RDW_DEF_FLD( 0x46000, "rx0_lane_map",26,25, "rx lane0 mapping""", "" )
   RDW_DEF_FLD( 0x46000, "rx1_lane_map",28,27, "rx lane1 mapping""", "" )
   RDW_DEF_FLD( 0x46000, "rx2_lane_map",30,29, "rx lane2 mapping""", "" )
   RDW_DEF_FLD( 0x46000, "rx3_lane_map_00",31,31, "rx lane3 mapping""", "" )
   RDW_DEF("hi", 0x46001, "red_hi3_mac_cfg","MAC config""", 0x1, 0x1, "cfg")
   RDW_DEF_FLD( 0x46001, "rx3_lane_map_01",0,0, "rx lane3 mapping""", "" )
   RDW_DEF("hi", 0x48000, "red_hi4_mac_cfg","MAC config""", 0xffffffff, 0xc803740c, "cfg")
   RDW_DEF_FLD( 0x48000, "tx_ipg_length",6,0, "ipg in 8 bit units""", "" )
   RDW_DEF_FLD( 0x48000, "enable_rx",7,7, "enable receive""", "" )
   RDW_DEF_FLD( 0x48000, "enable_tx",8,8, "enable transmit""", "" )
   RDW_DEF_FLD( 0x48000, "mac_mode",9,9, "set to 0 for LAN mode, 1 for WAN mode""", "" )
   RDW_DEF_FLD( 0x48000, "promis_en",10,10, "enable mac promiscous operation""", "" )
   RDW_DEF_FLD( 0x48000, "pad_en",11,11, "enable frame padding""", "" )
   RDW_DEF_FLD( 0x48000, "crc_fwd",12,12, "set to 1 to forward CRC with frame""", "" )
   RDW_DEF_FLD( 0x48000, "pause_fwd",13,13, "set to 1 to forward pause frames to user application""", "" )
   RDW_DEF_FLD( 0x48000, "pause_ignore",14,14, "set to 1 to ignore pause frames""", "" )
   RDW_DEF_FLD( 0x48000, "tx_addr_ins",15,15, "transmit MAC address insertion""", "" )
   RDW_DEF_FLD( 0x48000, "cmd_frm_ena",16,16, "when set, all command frames are accepted""", "" )
   RDW_DEF_FLD( 0x48000, "rx_err_frm_disc",17,17, "when set, errored frames are discarded""", "" )
   RDW_DEF_FLD( 0x48000, "force_send_idle",18,18, "Force continous idle generation""", "" )
   RDW_DEF_FLD( 0x48000, "force_send_rf",19,19, "Force continous rf generation""", "" )
   RDW_DEF_FLD( 0x48000, "no_lgth_check",20,20, "when set to 1, payload length check is disabled""", "" )
   RDW_DEF_FLD( 0x48000, "tx_scramble_en",21,21, "when set to 1, enable tx scrambler""", "" )
   RDW_DEF_FLD( 0x48000, "tx_dynamic_map_en",22,22, "when set to 1, enable tx lane dynamic mapping""", "" )
   RDW_DEF_FLD( 0x48000, "rx_scramble_en",23,23, "when set to 1, enable rx scrambler""", "" )
   RDW_DEF_FLD( 0x48000, "rx_dynamic_map_en",24,24, "when set to 1, enable rx lane dynamic mapping""", "" )
   RDW_DEF_FLD( 0x48000, "rx0_lane_map",26,25, "rx lane0 mapping""", "" )
   RDW_DEF_FLD( 0x48000, "rx1_lane_map",28,27, "rx lane1 mapping""", "" )
   RDW_DEF_FLD( 0x48000, "rx2_lane_map",30,29, "rx lane2 mapping""", "" )
   RDW_DEF_FLD( 0x48000, "rx3_lane_map_00",31,31, "rx lane3 mapping""", "" )
   RDW_DEF("hi", 0x48001, "red_hi4_mac_cfg","MAC config""", 0x1, 0x1, "cfg")
   RDW_DEF_FLD( 0x48001, "rx3_lane_map_01",0,0, "rx lane3 mapping""", "" )
   RDW_DEF("hi", 0x4a000, "red_hi5_mac_cfg","MAC config""", 0xffffffff, 0xc803740c, "cfg")
   RDW_DEF_FLD( 0x4a000, "tx_ipg_length",6,0, "ipg in 8 bit units""", "" )
   RDW_DEF_FLD( 0x4a000, "enable_rx",7,7, "enable receive""", "" )
   RDW_DEF_FLD( 0x4a000, "enable_tx",8,8, "enable transmit""", "" )
   RDW_DEF_FLD( 0x4a000, "mac_mode",9,9, "set to 0 for LAN mode, 1 for WAN mode""", "" )
   RDW_DEF_FLD( 0x4a000, "promis_en",10,10, "enable mac promiscous operation""", "" )
   RDW_DEF_FLD( 0x4a000, "pad_en",11,11, "enable frame padding""", "" )
   RDW_DEF_FLD( 0x4a000, "crc_fwd",12,12, "set to 1 to forward CRC with frame""", "" )
   RDW_DEF_FLD( 0x4a000, "pause_fwd",13,13, "set to 1 to forward pause frames to user application""", "" )
   RDW_DEF_FLD( 0x4a000, "pause_ignore",14,14, "set to 1 to ignore pause frames""", "" )
   RDW_DEF_FLD( 0x4a000, "tx_addr_ins",15,15, "transmit MAC address insertion""", "" )
   RDW_DEF_FLD( 0x4a000, "cmd_frm_ena",16,16, "when set, all command frames are accepted""", "" )
   RDW_DEF_FLD( 0x4a000, "rx_err_frm_disc",17,17, "when set, errored frames are discarded""", "" )
   RDW_DEF_FLD( 0x4a000, "force_send_idle",18,18, "Force continous idle generation""", "" )
   RDW_DEF_FLD( 0x4a000, "force_send_rf",19,19, "Force continous rf generation""", "" )
   RDW_DEF_FLD( 0x4a000, "no_lgth_check",20,20, "when set to 1, payload length check is disabled""", "" )
   RDW_DEF_FLD( 0x4a000, "tx_scramble_en",21,21, "when set to 1, enable tx scrambler""", "" )
   RDW_DEF_FLD( 0x4a000, "tx_dynamic_map_en",22,22, "when set to 1, enable tx lane dynamic mapping""", "" )
   RDW_DEF_FLD( 0x4a000, "rx_scramble_en",23,23, "when set to 1, enable rx scrambler""", "" )
   RDW_DEF_FLD( 0x4a000, "rx_dynamic_map_en",24,24, "when set to 1, enable rx lane dynamic mapping""", "" )
   RDW_DEF_FLD( 0x4a000, "rx0_lane_map",26,25, "rx lane0 mapping""", "" )
   RDW_DEF_FLD( 0x4a000, "rx1_lane_map",28,27, "rx lane1 mapping""", "" )
   RDW_DEF_FLD( 0x4a000, "rx2_lane_map",30,29, "rx lane2 mapping""", "" )
   RDW_DEF_FLD( 0x4a000, "rx3_lane_map_00",31,31, "rx lane3 mapping""", "" )
   RDW_DEF("hi", 0x4a001, "red_hi5_mac_cfg","MAC config""", 0x1, 0x1, "cfg")
   RDW_DEF_FLD( 0x4a001, "rx3_lane_map_01",0,0, "rx lane3 mapping""", "" )
   RDW_DEF("hi", 0x4c000, "red_hi6_mac_cfg","MAC config""", 0xffffffff, 0xc803740c, "cfg")
   RDW_DEF_FLD( 0x4c000, "tx_ipg_length",6,0, "ipg in 8 bit units""", "" )
   RDW_DEF_FLD( 0x4c000, "enable_rx",7,7, "enable receive""", "" )
   RDW_DEF_FLD( 0x4c000, "enable_tx",8,8, "enable transmit""", "" )
   RDW_DEF_FLD( 0x4c000, "mac_mode",9,9, "set to 0 for LAN mode, 1 for WAN mode""", "" )
   RDW_DEF_FLD( 0x4c000, "promis_en",10,10, "enable mac promiscous operation""", "" )
   RDW_DEF_FLD( 0x4c000, "pad_en",11,11, "enable frame padding""", "" )
   RDW_DEF_FLD( 0x4c000, "crc_fwd",12,12, "set to 1 to forward CRC with frame""", "" )
   RDW_DEF_FLD( 0x4c000, "pause_fwd",13,13, "set to 1 to forward pause frames to user application""", "" )
   RDW_DEF_FLD( 0x4c000, "pause_ignore",14,14, "set to 1 to ignore pause frames""", "" )
   RDW_DEF_FLD( 0x4c000, "tx_addr_ins",15,15, "transmit MAC address insertion""", "" )
   RDW_DEF_FLD( 0x4c000, "cmd_frm_ena",16,16, "when set, all command frames are accepted""", "" )
   RDW_DEF_FLD( 0x4c000, "rx_err_frm_disc",17,17, "when set, errored frames are discarded""", "" )
   RDW_DEF_FLD( 0x4c000, "force_send_idle",18,18, "Force continous idle generation""", "" )
   RDW_DEF_FLD( 0x4c000, "force_send_rf",19,19, "Force continous rf generation""", "" )
   RDW_DEF_FLD( 0x4c000, "no_lgth_check",20,20, "when set to 1, payload length check is disabled""", "" )
   RDW_DEF_FLD( 0x4c000, "tx_scramble_en",21,21, "when set to 1, enable tx scrambler""", "" )
   RDW_DEF_FLD( 0x4c000, "tx_dynamic_map_en",22,22, "when set to 1, enable tx lane dynamic mapping""", "" )
   RDW_DEF_FLD( 0x4c000, "rx_scramble_en",23,23, "when set to 1, enable rx scrambler""", "" )
   RDW_DEF_FLD( 0x4c000, "rx_dynamic_map_en",24,24, "when set to 1, enable rx lane dynamic mapping""", "" )
   RDW_DEF_FLD( 0x4c000, "rx0_lane_map",26,25, "rx lane0 mapping""", "" )
   RDW_DEF_FLD( 0x4c000, "rx1_lane_map",28,27, "rx lane1 mapping""", "" )
   RDW_DEF_FLD( 0x4c000, "rx2_lane_map",30,29, "rx lane2 mapping""", "" )
   RDW_DEF_FLD( 0x4c000, "rx3_lane_map_00",31,31, "rx lane3 mapping""", "" )
   RDW_DEF("hi", 0x4c001, "red_hi6_mac_cfg","MAC config""", 0x1, 0x1, "cfg")
   RDW_DEF_FLD( 0x4c001, "rx3_lane_map_01",0,0, "rx lane3 mapping""", "" )
   RDW_DEF("hi", 0x4e000, "red_hi7_mac_cfg","MAC config""", 0xffffffff, 0xc803740c, "cfg")
   RDW_DEF_FLD( 0x4e000, "tx_ipg_length",6,0, "ipg in 8 bit units""", "" )
   RDW_DEF_FLD( 0x4e000, "enable_rx",7,7, "enable receive""", "" )
   RDW_DEF_FLD( 0x4e000, "enable_tx",8,8, "enable transmit""", "" )
   RDW_DEF_FLD( 0x4e000, "mac_mode",9,9, "set to 0 for LAN mode, 1 for WAN mode""", "" )
   RDW_DEF_FLD( 0x4e000, "promis_en",10,10, "enable mac promiscous operation""", "" )
   RDW_DEF_FLD( 0x4e000, "pad_en",11,11, "enable frame padding""", "" )
   RDW_DEF_FLD( 0x4e000, "crc_fwd",12,12, "set to 1 to forward CRC with frame""", "" )
   RDW_DEF_FLD( 0x4e000, "pause_fwd",13,13, "set to 1 to forward pause frames to user application""", "" )
   RDW_DEF_FLD( 0x4e000, "pause_ignore",14,14, "set to 1 to ignore pause frames""", "" )
   RDW_DEF_FLD( 0x4e000, "tx_addr_ins",15,15, "transmit MAC address insertion""", "" )
   RDW_DEF_FLD( 0x4e000, "cmd_frm_ena",16,16, "when set, all command frames are accepted""", "" )
   RDW_DEF_FLD( 0x4e000, "rx_err_frm_disc",17,17, "when set, errored frames are discarded""", "" )
   RDW_DEF_FLD( 0x4e000, "force_send_idle",18,18, "Force continous idle generation""", "" )
   RDW_DEF_FLD( 0x4e000, "force_send_rf",19,19, "Force continous rf generation""", "" )
   RDW_DEF_FLD( 0x4e000, "no_lgth_check",20,20, "when set to 1, payload length check is disabled""", "" )
   RDW_DEF_FLD( 0x4e000, "tx_scramble_en",21,21, "when set to 1, enable tx scrambler""", "" )
   RDW_DEF_FLD( 0x4e000, "tx_dynamic_map_en",22,22, "when set to 1, enable tx lane dynamic mapping""", "" )
   RDW_DEF_FLD( 0x4e000, "rx_scramble_en",23,23, "when set to 1, enable rx scrambler""", "" )
   RDW_DEF_FLD( 0x4e000, "rx_dynamic_map_en",24,24, "when set to 1, enable rx lane dynamic mapping""", "" )
   RDW_DEF_FLD( 0x4e000, "rx0_lane_map",26,25, "rx lane0 mapping""", "" )
   RDW_DEF_FLD( 0x4e000, "rx1_lane_map",28,27, "rx lane1 mapping""", "" )
   RDW_DEF_FLD( 0x4e000, "rx2_lane_map",30,29, "rx lane2 mapping""", "" )
   RDW_DEF_FLD( 0x4e000, "rx3_lane_map_00",31,31, "rx lane3 mapping""", "" )
   RDW_DEF("hi", 0x4e001, "red_hi7_mac_cfg","MAC config""", 0x1, 0x1, "cfg")
   RDW_DEF_FLD( 0x4e001, "rx3_lane_map_01",0,0, "rx lane3 mapping""", "" )


   RDW_DEF("hi", 0x40002, "red_hi0_mac_cfg_ext","MAC extend config""", 0x3fff, 0x20e4, "cfg")
   RDW_DEF_FLD( 0x40002, "tx0_lane_map",1,0, "tx lane0 mapping""", "" )
   RDW_DEF_FLD( 0x40002, "tx1_lane_map",3,2, "tx lane1 mapping""", "" )
   RDW_DEF_FLD( 0x40002, "tx2_lane_map",5,4, "tx lane2 mapping""", "" )
   RDW_DEF_FLD( 0x40002, "tx3_lane_map",7,6, "tx lane3 mapping""", "" )
   RDW_DEF_FLD( 0x40002, "tx_err_chg_dis",8,8, "disable tx error byte replacement for abort packets""", "" )
   RDW_DEF_FLD( 0x40002, "tx_flush",9,9, "enable tx flush for the MAC, this bit should combine with\nconfig bit force_send_idle to flush the packets""", "" )
   RDW_DEF_FLD( 0x40002, "tx_no_drop_on_fault",10,10, "when asserts, dont drop packets when link fault is received,\nset to zero to get the default behavior of vendor MAC""", "" )
   RDW_DEF_FLD( 0x40002, "tx_stop_on_fault",11,11, "when asserts, stop tx when link fault is received until software\nprogram this bit to zero""", "" )
   RDW_DEF_FLD( 0x40002, "force_deskew_err",12,12, "when asserts, force error to deskew to re-deskew after this bit\nis set to 0""", "" )
   RDW_DEF_FLD( 0x40002, "rx_inrange_chk_en",13,13, "when asserts, rx payload lenth is checked if length field is valid""", "" )
   RDW_DEF("hi", 0x42002, "red_hi1_mac_cfg_ext","MAC extend config""", 0x3fff, 0x20e4, "cfg")
   RDW_DEF_FLD( 0x42002, "tx0_lane_map",1,0, "tx lane0 mapping""", "" )
   RDW_DEF_FLD( 0x42002, "tx1_lane_map",3,2, "tx lane1 mapping""", "" )
   RDW_DEF_FLD( 0x42002, "tx2_lane_map",5,4, "tx lane2 mapping""", "" )
   RDW_DEF_FLD( 0x42002, "tx3_lane_map",7,6, "tx lane3 mapping""", "" )
   RDW_DEF_FLD( 0x42002, "tx_err_chg_dis",8,8, "disable tx error byte replacement for abort packets""", "" )
   RDW_DEF_FLD( 0x42002, "tx_flush",9,9, "enable tx flush for the MAC, this bit should combine with\nconfig bit force_send_idle to flush the packets""", "" )
   RDW_DEF_FLD( 0x42002, "tx_no_drop_on_fault",10,10, "when asserts, dont drop packets when link fault is received,\nset to zero to get the default behavior of vendor MAC""", "" )
   RDW_DEF_FLD( 0x42002, "tx_stop_on_fault",11,11, "when asserts, stop tx when link fault is received until software\nprogram this bit to zero""", "" )
   RDW_DEF_FLD( 0x42002, "force_deskew_err",12,12, "when asserts, force error to deskew to re-deskew after this bit\nis set to 0""", "" )
   RDW_DEF_FLD( 0x42002, "rx_inrange_chk_en",13,13, "when asserts, rx payload lenth is checked if length field is valid""", "" )
   RDW_DEF("hi", 0x44002, "red_hi2_mac_cfg_ext","MAC extend config""", 0x3fff, 0x20e4, "cfg")
   RDW_DEF_FLD( 0x44002, "tx0_lane_map",1,0, "tx lane0 mapping""", "" )
   RDW_DEF_FLD( 0x44002, "tx1_lane_map",3,2, "tx lane1 mapping""", "" )
   RDW_DEF_FLD( 0x44002, "tx2_lane_map",5,4, "tx lane2 mapping""", "" )
   RDW_DEF_FLD( 0x44002, "tx3_lane_map",7,6, "tx lane3 mapping""", "" )
   RDW_DEF_FLD( 0x44002, "tx_err_chg_dis",8,8, "disable tx error byte replacement for abort packets""", "" )
   RDW_DEF_FLD( 0x44002, "tx_flush",9,9, "enable tx flush for the MAC, this bit should combine with\nconfig bit force_send_idle to flush the packets""", "" )
   RDW_DEF_FLD( 0x44002, "tx_no_drop_on_fault",10,10, "when asserts, dont drop packets when link fault is received,\nset to zero to get the default behavior of vendor MAC""", "" )
   RDW_DEF_FLD( 0x44002, "tx_stop_on_fault",11,11, "when asserts, stop tx when link fault is received until software\nprogram this bit to zero""", "" )
   RDW_DEF_FLD( 0x44002, "force_deskew_err",12,12, "when asserts, force error to deskew to re-deskew after this bit\nis set to 0""", "" )
   RDW_DEF_FLD( 0x44002, "rx_inrange_chk_en",13,13, "when asserts, rx payload lenth is checked if length field is valid""", "" )
   RDW_DEF("hi", 0x46002, "red_hi3_mac_cfg_ext","MAC extend config""", 0x3fff, 0x20e4, "cfg")
   RDW_DEF_FLD( 0x46002, "tx0_lane_map",1,0, "tx lane0 mapping""", "" )
   RDW_DEF_FLD( 0x46002, "tx1_lane_map",3,2, "tx lane1 mapping""", "" )
   RDW_DEF_FLD( 0x46002, "tx2_lane_map",5,4, "tx lane2 mapping""", "" )
   RDW_DEF_FLD( 0x46002, "tx3_lane_map",7,6, "tx lane3 mapping""", "" )
   RDW_DEF_FLD( 0x46002, "tx_err_chg_dis",8,8, "disable tx error byte replacement for abort packets""", "" )
   RDW_DEF_FLD( 0x46002, "tx_flush",9,9, "enable tx flush for the MAC, this bit should combine with\nconfig bit force_send_idle to flush the packets""", "" )
   RDW_DEF_FLD( 0x46002, "tx_no_drop_on_fault",10,10, "when asserts, dont drop packets when link fault is received,\nset to zero to get the default behavior of vendor MAC""", "" )
   RDW_DEF_FLD( 0x46002, "tx_stop_on_fault",11,11, "when asserts, stop tx when link fault is received until software\nprogram this bit to zero""", "" )
   RDW_DEF_FLD( 0x46002, "force_deskew_err",12,12, "when asserts, force error to deskew to re-deskew after this bit\nis set to 0""", "" )
   RDW_DEF_FLD( 0x46002, "rx_inrange_chk_en",13,13, "when asserts, rx payload lenth is checked if length field is valid""", "" )
   RDW_DEF("hi", 0x48002, "red_hi4_mac_cfg_ext","MAC extend config""", 0x3fff, 0x20e4, "cfg")
   RDW_DEF_FLD( 0x48002, "tx0_lane_map",1,0, "tx lane0 mapping""", "" )
   RDW_DEF_FLD( 0x48002, "tx1_lane_map",3,2, "tx lane1 mapping""", "" )
   RDW_DEF_FLD( 0x48002, "tx2_lane_map",5,4, "tx lane2 mapping""", "" )
   RDW_DEF_FLD( 0x48002, "tx3_lane_map",7,6, "tx lane3 mapping""", "" )
   RDW_DEF_FLD( 0x48002, "tx_err_chg_dis",8,8, "disable tx error byte replacement for abort packets""", "" )
   RDW_DEF_FLD( 0x48002, "tx_flush",9,9, "enable tx flush for the MAC, this bit should combine with\nconfig bit force_send_idle to flush the packets""", "" )
   RDW_DEF_FLD( 0x48002, "tx_no_drop_on_fault",10,10, "when asserts, dont drop packets when link fault is received,\nset to zero to get the default behavior of vendor MAC""", "" )
   RDW_DEF_FLD( 0x48002, "tx_stop_on_fault",11,11, "when asserts, stop tx when link fault is received until software\nprogram this bit to zero""", "" )
   RDW_DEF_FLD( 0x48002, "force_deskew_err",12,12, "when asserts, force error to deskew to re-deskew after this bit\nis set to 0""", "" )
   RDW_DEF_FLD( 0x48002, "rx_inrange_chk_en",13,13, "when asserts, rx payload lenth is checked if length field is valid""", "" )
   RDW_DEF("hi", 0x4a002, "red_hi5_mac_cfg_ext","MAC extend config""", 0x3fff, 0x20e4, "cfg")
   RDW_DEF_FLD( 0x4a002, "tx0_lane_map",1,0, "tx lane0 mapping""", "" )
   RDW_DEF_FLD( 0x4a002, "tx1_lane_map",3,2, "tx lane1 mapping""", "" )
   RDW_DEF_FLD( 0x4a002, "tx2_lane_map",5,4, "tx lane2 mapping""", "" )
   RDW_DEF_FLD( 0x4a002, "tx3_lane_map",7,6, "tx lane3 mapping""", "" )
   RDW_DEF_FLD( 0x4a002, "tx_err_chg_dis",8,8, "disable tx error byte replacement for abort packets""", "" )
   RDW_DEF_FLD( 0x4a002, "tx_flush",9,9, "enable tx flush for the MAC, this bit should combine with\nconfig bit force_send_idle to flush the packets""", "" )
   RDW_DEF_FLD( 0x4a002, "tx_no_drop_on_fault",10,10, "when asserts, dont drop packets when link fault is received,\nset to zero to get the default behavior of vendor MAC""", "" )
   RDW_DEF_FLD( 0x4a002, "tx_stop_on_fault",11,11, "when asserts, stop tx when link fault is received until software\nprogram this bit to zero""", "" )
   RDW_DEF_FLD( 0x4a002, "force_deskew_err",12,12, "when asserts, force error to deskew to re-deskew after this bit\nis set to 0""", "" )
   RDW_DEF_FLD( 0x4a002, "rx_inrange_chk_en",13,13, "when asserts, rx payload lenth is checked if length field is valid""", "" )
   RDW_DEF("hi", 0x4c002, "red_hi6_mac_cfg_ext","MAC extend config""", 0x3fff, 0x20e4, "cfg")
   RDW_DEF_FLD( 0x4c002, "tx0_lane_map",1,0, "tx lane0 mapping""", "" )
   RDW_DEF_FLD( 0x4c002, "tx1_lane_map",3,2, "tx lane1 mapping""", "" )
   RDW_DEF_FLD( 0x4c002, "tx2_lane_map",5,4, "tx lane2 mapping""", "" )
   RDW_DEF_FLD( 0x4c002, "tx3_lane_map",7,6, "tx lane3 mapping""", "" )
   RDW_DEF_FLD( 0x4c002, "tx_err_chg_dis",8,8, "disable tx error byte replacement for abort packets""", "" )
   RDW_DEF_FLD( 0x4c002, "tx_flush",9,9, "enable tx flush for the MAC, this bit should combine with\nconfig bit force_send_idle to flush the packets""", "" )
   RDW_DEF_FLD( 0x4c002, "tx_no_drop_on_fault",10,10, "when asserts, dont drop packets when link fault is received,\nset to zero to get the default behavior of vendor MAC""", "" )
   RDW_DEF_FLD( 0x4c002, "tx_stop_on_fault",11,11, "when asserts, stop tx when link fault is received until software\nprogram this bit to zero""", "" )
   RDW_DEF_FLD( 0x4c002, "force_deskew_err",12,12, "when asserts, force error to deskew to re-deskew after this bit\nis set to 0""", "" )
   RDW_DEF_FLD( 0x4c002, "rx_inrange_chk_en",13,13, "when asserts, rx payload lenth is checked if length field is valid""", "" )
   RDW_DEF("hi", 0x4e002, "red_hi7_mac_cfg_ext","MAC extend config""", 0x3fff, 0x20e4, "cfg")
   RDW_DEF_FLD( 0x4e002, "tx0_lane_map",1,0, "tx lane0 mapping""", "" )
   RDW_DEF_FLD( 0x4e002, "tx1_lane_map",3,2, "tx lane1 mapping""", "" )
   RDW_DEF_FLD( 0x4e002, "tx2_lane_map",5,4, "tx lane2 mapping""", "" )
   RDW_DEF_FLD( 0x4e002, "tx3_lane_map",7,6, "tx lane3 mapping""", "" )
   RDW_DEF_FLD( 0x4e002, "tx_err_chg_dis",8,8, "disable tx error byte replacement for abort packets""", "" )
   RDW_DEF_FLD( 0x4e002, "tx_flush",9,9, "enable tx flush for the MAC, this bit should combine with\nconfig bit force_send_idle to flush the packets""", "" )
   RDW_DEF_FLD( 0x4e002, "tx_no_drop_on_fault",10,10, "when asserts, dont drop packets when link fault is received,\nset to zero to get the default behavior of vendor MAC""", "" )
   RDW_DEF_FLD( 0x4e002, "tx_stop_on_fault",11,11, "when asserts, stop tx when link fault is received until software\nprogram this bit to zero""", "" )
   RDW_DEF_FLD( 0x4e002, "force_deskew_err",12,12, "when asserts, force error to deskew to re-deskew after this bit\nis set to 0""", "" )
   RDW_DEF_FLD( 0x4e002, "rx_inrange_chk_en",13,13, "when asserts, rx payload lenth is checked if length field is valid""", "" )


   RDW_DEF("hi", 0x40003, "red_hi0_mac_addr_hi","", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40003, "",15,0, "mac address bits 42:32""", "" )
   RDW_DEF("hi", 0x42003, "red_hi1_mac_addr_hi","", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42003, "",15,0, "mac address bits 42:32""", "" )
   RDW_DEF("hi", 0x44003, "red_hi2_mac_addr_hi","", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44003, "",15,0, "mac address bits 42:32""", "" )
   RDW_DEF("hi", 0x46003, "red_hi3_mac_addr_hi","", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46003, "",15,0, "mac address bits 42:32""", "" )
   RDW_DEF("hi", 0x48003, "red_hi4_mac_addr_hi","", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48003, "",15,0, "mac address bits 42:32""", "" )
   RDW_DEF("hi", 0x4a003, "red_hi5_mac_addr_hi","", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a003, "",15,0, "mac address bits 42:32""", "" )
   RDW_DEF("hi", 0x4c003, "red_hi6_mac_addr_hi","", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c003, "",15,0, "mac address bits 42:32""", "" )
   RDW_DEF("hi", 0x4e003, "red_hi7_mac_addr_hi","", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e003, "",15,0, "mac address bits 42:32""", "" )


   RDW_DEF("hi", 0x40004, "red_hi0_mac_addr_lo","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40004, "",31,0, "mac address bits 31:0""", "" )
   RDW_DEF("hi", 0x42004, "red_hi1_mac_addr_lo","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42004, "",31,0, "mac address bits 31:0""", "" )
   RDW_DEF("hi", 0x44004, "red_hi2_mac_addr_lo","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44004, "",31,0, "mac address bits 31:0""", "" )
   RDW_DEF("hi", 0x46004, "red_hi3_mac_addr_lo","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46004, "",31,0, "mac address bits 31:0""", "" )
   RDW_DEF("hi", 0x48004, "red_hi4_mac_addr_lo","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48004, "",31,0, "mac address bits 31:0""", "" )
   RDW_DEF("hi", 0x4a004, "red_hi5_mac_addr_lo","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a004, "",31,0, "mac address bits 31:0""", "" )
   RDW_DEF("hi", 0x4c004, "red_hi6_mac_addr_lo","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c004, "",31,0, "mac address bits 31:0""", "" )
   RDW_DEF("hi", 0x4e004, "red_hi7_mac_addr_lo","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e004, "",31,0, "mac address bits 31:0""", "" )


   RDW_DEF("hi", 0x40005, "red_hi0_mac_frm_length_max","", 0x7fff, 0x5ee, "cfg")
   RDW_DEF_FLD( 0x40005, "",14,0, " maximum supported frame length""", "" )
   RDW_DEF("hi", 0x42005, "red_hi1_mac_frm_length_max","", 0x7fff, 0x5ee, "cfg")
   RDW_DEF_FLD( 0x42005, "",14,0, " maximum supported frame length""", "" )
   RDW_DEF("hi", 0x44005, "red_hi2_mac_frm_length_max","", 0x7fff, 0x5ee, "cfg")
   RDW_DEF_FLD( 0x44005, "",14,0, " maximum supported frame length""", "" )
   RDW_DEF("hi", 0x46005, "red_hi3_mac_frm_length_max","", 0x7fff, 0x5ee, "cfg")
   RDW_DEF_FLD( 0x46005, "",14,0, " maximum supported frame length""", "" )
   RDW_DEF("hi", 0x48005, "red_hi4_mac_frm_length_max","", 0x7fff, 0x5ee, "cfg")
   RDW_DEF_FLD( 0x48005, "",14,0, " maximum supported frame length""", "" )
   RDW_DEF("hi", 0x4a005, "red_hi5_mac_frm_length_max","", 0x7fff, 0x5ee, "cfg")
   RDW_DEF_FLD( 0x4a005, "",14,0, " maximum supported frame length""", "" )
   RDW_DEF("hi", 0x4c005, "red_hi6_mac_frm_length_max","", 0x7fff, 0x5ee, "cfg")
   RDW_DEF_FLD( 0x4c005, "",14,0, " maximum supported frame length""", "" )
   RDW_DEF("hi", 0x4e005, "red_hi7_mac_frm_length_max","", 0x7fff, 0x5ee, "cfg")
   RDW_DEF_FLD( 0x4e005, "",14,0, " maximum supported frame length""", "" )


   RDW_DEF("hi", 0x40006, "red_hi0_mac_pause_quant","", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40006, "",15,0, "pause quanta when transmitting pause frames""", "" )
   RDW_DEF("hi", 0x42006, "red_hi1_mac_pause_quant","", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42006, "",15,0, "pause quanta when transmitting pause frames""", "" )
   RDW_DEF("hi", 0x44006, "red_hi2_mac_pause_quant","", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44006, "",15,0, "pause quanta when transmitting pause frames""", "" )
   RDW_DEF("hi", 0x46006, "red_hi3_mac_pause_quant","", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46006, "",15,0, "pause quanta when transmitting pause frames""", "" )
   RDW_DEF("hi", 0x48006, "red_hi4_mac_pause_quant","", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48006, "",15,0, "pause quanta when transmitting pause frames""", "" )
   RDW_DEF("hi", 0x4a006, "red_hi5_mac_pause_quant","", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a006, "",15,0, "pause quanta when transmitting pause frames""", "" )
   RDW_DEF("hi", 0x4c006, "red_hi6_mac_pause_quant","", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c006, "",15,0, "pause quanta when transmitting pause frames""", "" )
   RDW_DEF("hi", 0x4e006, "red_hi7_mac_pause_quant","", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e006, "",15,0, "pause quanta when transmitting pause frames""", "" )


   RDW_DEF("hi", 0x40007, "red_hi0_mac_rx_section","", 0xffffffff, 0x80000, "cfg")
   RDW_DEF_FLD( 0x40007, "e",15,0, "receive fifo section emtpy thresold""", "" )
   RDW_DEF_FLD( 0x40007, "",31,16, "receive fifo section available thresold""", "" )
   RDW_DEF("hi", 0x42007, "red_hi1_mac_rx_section","", 0xffffffff, 0x80000, "cfg")
   RDW_DEF_FLD( 0x42007, "e",15,0, "receive fifo section emtpy thresold""", "" )
   RDW_DEF_FLD( 0x42007, "",31,16, "receive fifo section available thresold""", "" )
   RDW_DEF("hi", 0x44007, "red_hi2_mac_rx_section","", 0xffffffff, 0x80000, "cfg")
   RDW_DEF_FLD( 0x44007, "e",15,0, "receive fifo section emtpy thresold""", "" )
   RDW_DEF_FLD( 0x44007, "",31,16, "receive fifo section available thresold""", "" )
   RDW_DEF("hi", 0x46007, "red_hi3_mac_rx_section","", 0xffffffff, 0x80000, "cfg")
   RDW_DEF_FLD( 0x46007, "e",15,0, "receive fifo section emtpy thresold""", "" )
   RDW_DEF_FLD( 0x46007, "",31,16, "receive fifo section available thresold""", "" )
   RDW_DEF("hi", 0x48007, "red_hi4_mac_rx_section","", 0xffffffff, 0x80000, "cfg")
   RDW_DEF_FLD( 0x48007, "e",15,0, "receive fifo section emtpy thresold""", "" )
   RDW_DEF_FLD( 0x48007, "",31,16, "receive fifo section available thresold""", "" )
   RDW_DEF("hi", 0x4a007, "red_hi5_mac_rx_section","", 0xffffffff, 0x80000, "cfg")
   RDW_DEF_FLD( 0x4a007, "e",15,0, "receive fifo section emtpy thresold""", "" )
   RDW_DEF_FLD( 0x4a007, "",31,16, "receive fifo section available thresold""", "" )
   RDW_DEF("hi", 0x4c007, "red_hi6_mac_rx_section","", 0xffffffff, 0x80000, "cfg")
   RDW_DEF_FLD( 0x4c007, "e",15,0, "receive fifo section emtpy thresold""", "" )
   RDW_DEF_FLD( 0x4c007, "",31,16, "receive fifo section available thresold""", "" )
   RDW_DEF("hi", 0x4e007, "red_hi7_mac_rx_section","", 0xffffffff, 0x80000, "cfg")
   RDW_DEF_FLD( 0x4e007, "e",15,0, "receive fifo section emtpy thresold""", "" )
   RDW_DEF_FLD( 0x4e007, "",31,16, "receive fifo section available thresold""", "" )


   RDW_DEF("hi", 0x40008, "red_hi0_mac_tx_section","", 0xffffffff, 0x80004, "cfg")
   RDW_DEF_FLD( 0x40008, "e",15,0, "transmit fifo section empty thresold""", "" )
   RDW_DEF_FLD( 0x40008, "",31,16, "transmit fifo section available thresold""", "" )
   RDW_DEF("hi", 0x42008, "red_hi1_mac_tx_section","", 0xffffffff, 0x80004, "cfg")
   RDW_DEF_FLD( 0x42008, "e",15,0, "transmit fifo section empty thresold""", "" )
   RDW_DEF_FLD( 0x42008, "",31,16, "transmit fifo section available thresold""", "" )
   RDW_DEF("hi", 0x44008, "red_hi2_mac_tx_section","", 0xffffffff, 0x80004, "cfg")
   RDW_DEF_FLD( 0x44008, "e",15,0, "transmit fifo section empty thresold""", "" )
   RDW_DEF_FLD( 0x44008, "",31,16, "transmit fifo section available thresold""", "" )
   RDW_DEF("hi", 0x46008, "red_hi3_mac_tx_section","", 0xffffffff, 0x80004, "cfg")
   RDW_DEF_FLD( 0x46008, "e",15,0, "transmit fifo section empty thresold""", "" )
   RDW_DEF_FLD( 0x46008, "",31,16, "transmit fifo section available thresold""", "" )
   RDW_DEF("hi", 0x48008, "red_hi4_mac_tx_section","", 0xffffffff, 0x80004, "cfg")
   RDW_DEF_FLD( 0x48008, "e",15,0, "transmit fifo section empty thresold""", "" )
   RDW_DEF_FLD( 0x48008, "",31,16, "transmit fifo section available thresold""", "" )
   RDW_DEF("hi", 0x4a008, "red_hi5_mac_tx_section","", 0xffffffff, 0x80004, "cfg")
   RDW_DEF_FLD( 0x4a008, "e",15,0, "transmit fifo section empty thresold""", "" )
   RDW_DEF_FLD( 0x4a008, "",31,16, "transmit fifo section available thresold""", "" )
   RDW_DEF("hi", 0x4c008, "red_hi6_mac_tx_section","", 0xffffffff, 0x80004, "cfg")
   RDW_DEF_FLD( 0x4c008, "e",15,0, "transmit fifo section empty thresold""", "" )
   RDW_DEF_FLD( 0x4c008, "",31,16, "transmit fifo section available thresold""", "" )
   RDW_DEF("hi", 0x4e008, "red_hi7_mac_tx_section","", 0xffffffff, 0x80004, "cfg")
   RDW_DEF_FLD( 0x4e008, "e",15,0, "transmit fifo section empty thresold""", "" )
   RDW_DEF_FLD( 0x4e008, "",31,16, "transmit fifo section available thresold""", "" )


   RDW_DEF("hi", 0x40009, "red_hi0_mac_diag","", 0x7ffff, 0x800, "cfg")
   RDW_DEF_FLD( 0x40009, "ins_cont_err",0,0, "insert continous disparity """, "" )
   RDW_DEF_FLD( 0x40009, "ins_disp_err",4,1, "insert disparity error""", "" )
   RDW_DEF_FLD( 0x40009, "ins_inv_code",8,5, "insert invalid code """, "" )
   RDW_DEF_FLD( 0x40009, "inv_code",18,9, "invalid code to insert""", "" )
   RDW_DEF("hi", 0x42009, "red_hi1_mac_diag","", 0x7ffff, 0x800, "cfg")
   RDW_DEF_FLD( 0x42009, "ins_cont_err",0,0, "insert continous disparity """, "" )
   RDW_DEF_FLD( 0x42009, "ins_disp_err",4,1, "insert disparity error""", "" )
   RDW_DEF_FLD( 0x42009, "ins_inv_code",8,5, "insert invalid code """, "" )
   RDW_DEF_FLD( 0x42009, "inv_code",18,9, "invalid code to insert""", "" )
   RDW_DEF("hi", 0x44009, "red_hi2_mac_diag","", 0x7ffff, 0x800, "cfg")
   RDW_DEF_FLD( 0x44009, "ins_cont_err",0,0, "insert continous disparity """, "" )
   RDW_DEF_FLD( 0x44009, "ins_disp_err",4,1, "insert disparity error""", "" )
   RDW_DEF_FLD( 0x44009, "ins_inv_code",8,5, "insert invalid code """, "" )
   RDW_DEF_FLD( 0x44009, "inv_code",18,9, "invalid code to insert""", "" )
   RDW_DEF("hi", 0x46009, "red_hi3_mac_diag","", 0x7ffff, 0x800, "cfg")
   RDW_DEF_FLD( 0x46009, "ins_cont_err",0,0, "insert continous disparity """, "" )
   RDW_DEF_FLD( 0x46009, "ins_disp_err",4,1, "insert disparity error""", "" )
   RDW_DEF_FLD( 0x46009, "ins_inv_code",8,5, "insert invalid code """, "" )
   RDW_DEF_FLD( 0x46009, "inv_code",18,9, "invalid code to insert""", "" )
   RDW_DEF("hi", 0x48009, "red_hi4_mac_diag","", 0x7ffff, 0x800, "cfg")
   RDW_DEF_FLD( 0x48009, "ins_cont_err",0,0, "insert continous disparity """, "" )
   RDW_DEF_FLD( 0x48009, "ins_disp_err",4,1, "insert disparity error""", "" )
   RDW_DEF_FLD( 0x48009, "ins_inv_code",8,5, "insert invalid code """, "" )
   RDW_DEF_FLD( 0x48009, "inv_code",18,9, "invalid code to insert""", "" )
   RDW_DEF("hi", 0x4a009, "red_hi5_mac_diag","", 0x7ffff, 0x800, "cfg")
   RDW_DEF_FLD( 0x4a009, "ins_cont_err",0,0, "insert continous disparity """, "" )
   RDW_DEF_FLD( 0x4a009, "ins_disp_err",4,1, "insert disparity error""", "" )
   RDW_DEF_FLD( 0x4a009, "ins_inv_code",8,5, "insert invalid code """, "" )
   RDW_DEF_FLD( 0x4a009, "inv_code",18,9, "invalid code to insert""", "" )
   RDW_DEF("hi", 0x4c009, "red_hi6_mac_diag","", 0x7ffff, 0x800, "cfg")
   RDW_DEF_FLD( 0x4c009, "ins_cont_err",0,0, "insert continous disparity """, "" )
   RDW_DEF_FLD( 0x4c009, "ins_disp_err",4,1, "insert disparity error""", "" )
   RDW_DEF_FLD( 0x4c009, "ins_inv_code",8,5, "insert invalid code """, "" )
   RDW_DEF_FLD( 0x4c009, "inv_code",18,9, "invalid code to insert""", "" )
   RDW_DEF("hi", 0x4e009, "red_hi7_mac_diag","", 0x7ffff, 0x800, "cfg")
   RDW_DEF_FLD( 0x4e009, "ins_cont_err",0,0, "insert continous disparity """, "" )
   RDW_DEF_FLD( 0x4e009, "ins_disp_err",4,1, "insert disparity error""", "" )
   RDW_DEF_FLD( 0x4e009, "ins_inv_code",8,5, "insert invalid code """, "" )
   RDW_DEF_FLD( 0x4e009, "inv_code",18,9, "invalid code to insert""", "" )


   RDW_DEF("hi", 0x4000a, "red_hi0_mac_user_pause","", 0xffffffff, RDW_MAC_USER_PAUSE_DFLT, "cfg")
   RDW_DEF_FLD( 0x4000a, "op",15,0, "op to send for user pause""", "" )
   RDW_DEF_FLD( 0x4000a, "type",31,16, "type field for user pause""", "" )
   RDW_DEF("hi", 0x4000b, "red_hi0_mac_user_pause","", 0x3, 0x1, "cfg")
   RDW_DEF_FLD( 0x4000b, "mcast_ena",0,0, "enable multicast reception of user pause frames""", "" )
   RDW_DEF_FLD( 0x4000b, "ucast_ena",1,1, "enable unicast reception of user pause frames""", "" )
   RDW_DEF("hi", 0x4200a, "red_hi1_mac_user_pause","", 0xffffffff, RDW_MAC_USER_PAUSE_DFLT, "cfg")
   RDW_DEF_FLD( 0x4200a, "op",15,0, "op to send for user pause""", "" )
   RDW_DEF_FLD( 0x4200a, "type",31,16, "type field for user pause""", "" )
   RDW_DEF("hi", 0x4200b, "red_hi1_mac_user_pause","", 0x3, 0x1, "cfg")
   RDW_DEF_FLD( 0x4200b, "mcast_ena",0,0, "enable multicast reception of user pause frames""", "" )
   RDW_DEF_FLD( 0x4200b, "ucast_ena",1,1, "enable unicast reception of user pause frames""", "" )
   RDW_DEF("hi", 0x4400a, "red_hi2_mac_user_pause","", 0xffffffff, RDW_MAC_USER_PAUSE_DFLT, "cfg")
   RDW_DEF_FLD( 0x4400a, "op",15,0, "op to send for user pause""", "" )
   RDW_DEF_FLD( 0x4400a, "type",31,16, "type field for user pause""", "" )
   RDW_DEF("hi", 0x4400b, "red_hi2_mac_user_pause","", 0x3, 0x1, "cfg")
   RDW_DEF_FLD( 0x4400b, "mcast_ena",0,0, "enable multicast reception of user pause frames""", "" )
   RDW_DEF_FLD( 0x4400b, "ucast_ena",1,1, "enable unicast reception of user pause frames""", "" )
   RDW_DEF("hi", 0x4600a, "red_hi3_mac_user_pause","", 0xffffffff, RDW_MAC_USER_PAUSE_DFLT, "cfg")
   RDW_DEF_FLD( 0x4600a, "op",15,0, "op to send for user pause""", "" )
   RDW_DEF_FLD( 0x4600a, "type",31,16, "type field for user pause""", "" )
   RDW_DEF("hi", 0x4600b, "red_hi3_mac_user_pause","", 0x3, 0x1, "cfg")
   RDW_DEF_FLD( 0x4600b, "mcast_ena",0,0, "enable multicast reception of user pause frames""", "" )
   RDW_DEF_FLD( 0x4600b, "ucast_ena",1,1, "enable unicast reception of user pause frames""", "" )
   RDW_DEF("hi", 0x4800a, "red_hi4_mac_user_pause","", 0xffffffff, RDW_MAC_USER_PAUSE_DFLT, "cfg")
   RDW_DEF_FLD( 0x4800a, "op",15,0, "op to send for user pause""", "" )
   RDW_DEF_FLD( 0x4800a, "type",31,16, "type field for user pause""", "" )
   RDW_DEF("hi", 0x4800b, "red_hi4_mac_user_pause","", 0x3, 0x1, "cfg")
   RDW_DEF_FLD( 0x4800b, "mcast_ena",0,0, "enable multicast reception of user pause frames""", "" )
   RDW_DEF_FLD( 0x4800b, "ucast_ena",1,1, "enable unicast reception of user pause frames""", "" )
   RDW_DEF("hi", 0x4a00a, "red_hi5_mac_user_pause","", 0xffffffff, RDW_MAC_USER_PAUSE_DFLT, "cfg")
   RDW_DEF_FLD( 0x4a00a, "op",15,0, "op to send for user pause""", "" )
   RDW_DEF_FLD( 0x4a00a, "type",31,16, "type field for user pause""", "" )
   RDW_DEF("hi", 0x4a00b, "red_hi5_mac_user_pause","", 0x3, 0x1, "cfg")
   RDW_DEF_FLD( 0x4a00b, "mcast_ena",0,0, "enable multicast reception of user pause frames""", "" )
   RDW_DEF_FLD( 0x4a00b, "ucast_ena",1,1, "enable unicast reception of user pause frames""", "" )
   RDW_DEF("hi", 0x4c00a, "red_hi6_mac_user_pause","", 0xffffffff, RDW_MAC_USER_PAUSE_DFLT, "cfg")
   RDW_DEF_FLD( 0x4c00a, "op",15,0, "op to send for user pause""", "" )
   RDW_DEF_FLD( 0x4c00a, "type",31,16, "type field for user pause""", "" )
   RDW_DEF("hi", 0x4c00b, "red_hi6_mac_user_pause","", 0x3, 0x1, "cfg")
   RDW_DEF_FLD( 0x4c00b, "mcast_ena",0,0, "enable multicast reception of user pause frames""", "" )
   RDW_DEF_FLD( 0x4c00b, "ucast_ena",1,1, "enable unicast reception of user pause frames""", "" )
   RDW_DEF("hi", 0x4e00a, "red_hi7_mac_user_pause","", 0xffffffff, RDW_MAC_USER_PAUSE_DFLT, "cfg")
   RDW_DEF_FLD( 0x4e00a, "op",15,0, "op to send for user pause""", "" )
   RDW_DEF_FLD( 0x4e00a, "type",31,16, "type field for user pause""", "" )
   RDW_DEF("hi", 0x4e00b, "red_hi7_mac_user_pause","", 0x3, 0x1, "cfg")
   RDW_DEF_FLD( 0x4e00b, "mcast_ena",0,0, "enable multicast reception of user pause frames""", "" )
   RDW_DEF_FLD( 0x4e00b, "ucast_ena",1,1, "enable unicast reception of user pause frames""", "" )


   RDW_DEF("hi", 0x4000c, "red_hi0_mac_user_pause_mcast_hi","", 0xffff, RDW_MAC_USER_PAUSE_MCAST_HI_DFLT, "cfg")
   RDW_DEF_FLD( 0x4000c, "",15,0, "bits 47:32 of multicast address for user pause frame""", "" )
   RDW_DEF("hi", 0x4200c, "red_hi1_mac_user_pause_mcast_hi","", 0xffff, RDW_MAC_USER_PAUSE_MCAST_HI_DFLT, "cfg")
   RDW_DEF_FLD( 0x4200c, "",15,0, "bits 47:32 of multicast address for user pause frame""", "" )
   RDW_DEF("hi", 0x4400c, "red_hi2_mac_user_pause_mcast_hi","", 0xffff, RDW_MAC_USER_PAUSE_MCAST_HI_DFLT, "cfg")
   RDW_DEF_FLD( 0x4400c, "",15,0, "bits 47:32 of multicast address for user pause frame""", "" )
   RDW_DEF("hi", 0x4600c, "red_hi3_mac_user_pause_mcast_hi","", 0xffff, RDW_MAC_USER_PAUSE_MCAST_HI_DFLT, "cfg")
   RDW_DEF_FLD( 0x4600c, "",15,0, "bits 47:32 of multicast address for user pause frame""", "" )
   RDW_DEF("hi", 0x4800c, "red_hi4_mac_user_pause_mcast_hi","", 0xffff, RDW_MAC_USER_PAUSE_MCAST_HI_DFLT, "cfg")
   RDW_DEF_FLD( 0x4800c, "",15,0, "bits 47:32 of multicast address for user pause frame""", "" )
   RDW_DEF("hi", 0x4a00c, "red_hi5_mac_user_pause_mcast_hi","", 0xffff, RDW_MAC_USER_PAUSE_MCAST_HI_DFLT, "cfg")
   RDW_DEF_FLD( 0x4a00c, "",15,0, "bits 47:32 of multicast address for user pause frame""", "" )
   RDW_DEF("hi", 0x4c00c, "red_hi6_mac_user_pause_mcast_hi","", 0xffff, RDW_MAC_USER_PAUSE_MCAST_HI_DFLT, "cfg")
   RDW_DEF_FLD( 0x4c00c, "",15,0, "bits 47:32 of multicast address for user pause frame""", "" )
   RDW_DEF("hi", 0x4e00c, "red_hi7_mac_user_pause_mcast_hi","", 0xffff, RDW_MAC_USER_PAUSE_MCAST_HI_DFLT, "cfg")
   RDW_DEF_FLD( 0x4e00c, "",15,0, "bits 47:32 of multicast address for user pause frame""", "" )

   RDW_DEF("hi", 0x4000d, "red_hi0_mac_user_pause_mcast_lo","", 0xffffffff, RDW_MAC_USER_PAUSE_MCAST_DFLT, "cfg")
   RDW_DEF_FLD( 0x4000d, "",31,0, "bits 31:0  of multicast address for user pause frame""", "" )
   RDW_DEF("hi", 0x4200d, "red_hi1_mac_user_pause_mcast_lo","", 0xffffffff, RDW_MAC_USER_PAUSE_MCAST_DFLT, "cfg")
   RDW_DEF_FLD( 0x4200d, "",31,0, "bits 31:0  of multicast address for user pause frame""", "" )
   RDW_DEF("hi", 0x4400d, "red_hi2_mac_user_pause_mcast_lo","", 0xffffffff, RDW_MAC_USER_PAUSE_MCAST_DFLT, "cfg")
   RDW_DEF_FLD( 0x4400d, "",31,0, "bits 31:0  of multicast address for user pause frame""", "" )
   RDW_DEF("hi", 0x4600d, "red_hi3_mac_user_pause_mcast_lo","", 0xffffffff, RDW_MAC_USER_PAUSE_MCAST_DFLT, "cfg")
   RDW_DEF_FLD( 0x4600d, "",31,0, "bits 31:0  of multicast address for user pause frame""", "" )
   RDW_DEF("hi", 0x4800d, "red_hi4_mac_user_pause_mcast_lo","", 0xffffffff, RDW_MAC_USER_PAUSE_MCAST_DFLT, "cfg")
   RDW_DEF_FLD( 0x4800d, "",31,0, "bits 31:0  of multicast address for user pause frame""", "" )
   RDW_DEF("hi", 0x4a00d, "red_hi5_mac_user_pause_mcast_lo","", 0xffffffff, RDW_MAC_USER_PAUSE_MCAST_DFLT, "cfg")
   RDW_DEF_FLD( 0x4a00d, "",31,0, "bits 31:0  of multicast address for user pause frame""", "" )
   RDW_DEF("hi", 0x4c00d, "red_hi6_mac_user_pause_mcast_lo","", 0xffffffff, RDW_MAC_USER_PAUSE_MCAST_DFLT, "cfg")
   RDW_DEF_FLD( 0x4c00d, "",31,0, "bits 31:0  of multicast address for user pause frame""", "" )
   RDW_DEF("hi", 0x4e00d, "red_hi7_mac_user_pause_mcast_lo","", 0xffffffff, RDW_MAC_USER_PAUSE_MCAST_DFLT, "cfg")
   RDW_DEF_FLD( 0x4e00d, "",31,0, "bits 31:0  of multicast address for user pause frame""", "" )


   RDW_DEF("hi", 0x4000e, "red_hi0_mac_ext_lpbk","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x4000e, "",3,0, " enable external loopback for 10-bit data""", "" )
   RDW_DEF("hi", 0x4200e, "red_hi1_mac_ext_lpbk","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x4200e, "",3,0, " enable external loopback for 10-bit data""", "" )
   RDW_DEF("hi", 0x4400e, "red_hi2_mac_ext_lpbk","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x4400e, "",3,0, " enable external loopback for 10-bit data""", "" )
   RDW_DEF("hi", 0x4600e, "red_hi3_mac_ext_lpbk","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x4600e, "",3,0, " enable external loopback for 10-bit data""", "" )
   RDW_DEF("hi", 0x4800e, "red_hi4_mac_ext_lpbk","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x4800e, "",3,0, " enable external loopback for 10-bit data""", "" )
   RDW_DEF("hi", 0x4a00e, "red_hi5_mac_ext_lpbk","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a00e, "",3,0, " enable external loopback for 10-bit data""", "" )
   RDW_DEF("hi", 0x4c00e, "red_hi6_mac_ext_lpbk","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c00e, "",3,0, " enable external loopback for 10-bit data""", "" )
   RDW_DEF("hi", 0x4e00e, "red_hi7_mac_ext_lpbk","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e00e, "",3,0, " enable external loopback for 10-bit data""", "" )


   RDW_DEF("hi", 0x4000f, "red_hi0_mac_status","MAC status""", 0x7, 0x0, "sta")
   RDW_DEF_FLD( 0x4000f, "loc_fault",0,0, "local fault detected""", "" )
   RDW_DEF_FLD( 0x4000f, "rem_fault",1,1, "remote fault detected""", "" )
   RDW_DEF_FLD( 0x4000f, "pause_on",2,2, "pause pending indication""", "" )
   RDW_DEF("hi", 0x4200f, "red_hi1_mac_status","MAC status""", 0x7, 0x0, "sta")
   RDW_DEF_FLD( 0x4200f, "loc_fault",0,0, "local fault detected""", "" )
   RDW_DEF_FLD( 0x4200f, "rem_fault",1,1, "remote fault detected""", "" )
   RDW_DEF_FLD( 0x4200f, "pause_on",2,2, "pause pending indication""", "" )
   RDW_DEF("hi", 0x4400f, "red_hi2_mac_status","MAC status""", 0x7, 0x0, "sta")
   RDW_DEF_FLD( 0x4400f, "loc_fault",0,0, "local fault detected""", "" )
   RDW_DEF_FLD( 0x4400f, "rem_fault",1,1, "remote fault detected""", "" )
   RDW_DEF_FLD( 0x4400f, "pause_on",2,2, "pause pending indication""", "" )
   RDW_DEF("hi", 0x4600f, "red_hi3_mac_status","MAC status""", 0x7, 0x0, "sta")
   RDW_DEF_FLD( 0x4600f, "loc_fault",0,0, "local fault detected""", "" )
   RDW_DEF_FLD( 0x4600f, "rem_fault",1,1, "remote fault detected""", "" )
   RDW_DEF_FLD( 0x4600f, "pause_on",2,2, "pause pending indication""", "" )
   RDW_DEF("hi", 0x4800f, "red_hi4_mac_status","MAC status""", 0x7, 0x0, "sta")
   RDW_DEF_FLD( 0x4800f, "loc_fault",0,0, "local fault detected""", "" )
   RDW_DEF_FLD( 0x4800f, "rem_fault",1,1, "remote fault detected""", "" )
   RDW_DEF_FLD( 0x4800f, "pause_on",2,2, "pause pending indication""", "" )
   RDW_DEF("hi", 0x4a00f, "red_hi5_mac_status","MAC status""", 0x7, 0x0, "sta")
   RDW_DEF_FLD( 0x4a00f, "loc_fault",0,0, "local fault detected""", "" )
   RDW_DEF_FLD( 0x4a00f, "rem_fault",1,1, "remote fault detected""", "" )
   RDW_DEF_FLD( 0x4a00f, "pause_on",2,2, "pause pending indication""", "" )
   RDW_DEF("hi", 0x4c00f, "red_hi6_mac_status","MAC status""", 0x7, 0x0, "sta")
   RDW_DEF_FLD( 0x4c00f, "loc_fault",0,0, "local fault detected""", "" )
   RDW_DEF_FLD( 0x4c00f, "rem_fault",1,1, "remote fault detected""", "" )
   RDW_DEF_FLD( 0x4c00f, "pause_on",2,2, "pause pending indication""", "" )
   RDW_DEF("hi", 0x4e00f, "red_hi7_mac_status","MAC status""", 0x7, 0x0, "sta")
   RDW_DEF_FLD( 0x4e00f, "loc_fault",0,0, "local fault detected""", "" )
   RDW_DEF_FLD( 0x4e00f, "rem_fault",1,1, "remote fault detected""", "" )
   RDW_DEF_FLD( 0x4e00f, "pause_on",2,2, "pause pending indication""", "" )


   RDW_DEF("hi", 0x40010, "red_hi0_mac_pcs_status"," XGXS PCS status""", 0x3fffff, 0x0, "sta")
   RDW_DEF_FLD( 0x40010, "align_done",0,0, "alignment complete""", "" )
   RDW_DEF_FLD( 0x40010, "match_fault",1,1, "receive rate matching error""", "" )
   RDW_DEF_FLD( 0x40010, "disp_err",5,2, "disparity error""", "" )
   RDW_DEF_FLD( 0x40010, "char_err",9,6, "character error""", "" )
   RDW_DEF_FLD( 0x40010, "cg_align",13,10, "code group alignment indication""", "" )
   RDW_DEF_FLD( 0x40010, "sync",17,14, "lane syncronization""", "" )
   RDW_DEF_FLD( 0x40010, "pat",21,18, "comma detection indication""", "" )
   RDW_DEF("hi", 0x42010, "red_hi1_mac_pcs_status"," XGXS PCS status""", 0x3fffff, 0x0, "sta")
   RDW_DEF_FLD( 0x42010, "align_done",0,0, "alignment complete""", "" )
   RDW_DEF_FLD( 0x42010, "match_fault",1,1, "receive rate matching error""", "" )
   RDW_DEF_FLD( 0x42010, "disp_err",5,2, "disparity error""", "" )
   RDW_DEF_FLD( 0x42010, "char_err",9,6, "character error""", "" )
   RDW_DEF_FLD( 0x42010, "cg_align",13,10, "code group alignment indication""", "" )
   RDW_DEF_FLD( 0x42010, "sync",17,14, "lane syncronization""", "" )
   RDW_DEF_FLD( 0x42010, "pat",21,18, "comma detection indication""", "" )
   RDW_DEF("hi", 0x44010, "red_hi2_mac_pcs_status"," XGXS PCS status""", 0x3fffff, 0x0, "sta")
   RDW_DEF_FLD( 0x44010, "align_done",0,0, "alignment complete""", "" )
   RDW_DEF_FLD( 0x44010, "match_fault",1,1, "receive rate matching error""", "" )
   RDW_DEF_FLD( 0x44010, "disp_err",5,2, "disparity error""", "" )
   RDW_DEF_FLD( 0x44010, "char_err",9,6, "character error""", "" )
   RDW_DEF_FLD( 0x44010, "cg_align",13,10, "code group alignment indication""", "" )
   RDW_DEF_FLD( 0x44010, "sync",17,14, "lane syncronization""", "" )
   RDW_DEF_FLD( 0x44010, "pat",21,18, "comma detection indication""", "" )
   RDW_DEF("hi", 0x46010, "red_hi3_mac_pcs_status"," XGXS PCS status""", 0x3fffff, 0x0, "sta")
   RDW_DEF_FLD( 0x46010, "align_done",0,0, "alignment complete""", "" )
   RDW_DEF_FLD( 0x46010, "match_fault",1,1, "receive rate matching error""", "" )
   RDW_DEF_FLD( 0x46010, "disp_err",5,2, "disparity error""", "" )
   RDW_DEF_FLD( 0x46010, "char_err",9,6, "character error""", "" )
   RDW_DEF_FLD( 0x46010, "cg_align",13,10, "code group alignment indication""", "" )
   RDW_DEF_FLD( 0x46010, "sync",17,14, "lane syncronization""", "" )
   RDW_DEF_FLD( 0x46010, "pat",21,18, "comma detection indication""", "" )
   RDW_DEF("hi", 0x48010, "red_hi4_mac_pcs_status"," XGXS PCS status""", 0x3fffff, 0x0, "sta")
   RDW_DEF_FLD( 0x48010, "align_done",0,0, "alignment complete""", "" )
   RDW_DEF_FLD( 0x48010, "match_fault",1,1, "receive rate matching error""", "" )
   RDW_DEF_FLD( 0x48010, "disp_err",5,2, "disparity error""", "" )
   RDW_DEF_FLD( 0x48010, "char_err",9,6, "character error""", "" )
   RDW_DEF_FLD( 0x48010, "cg_align",13,10, "code group alignment indication""", "" )
   RDW_DEF_FLD( 0x48010, "sync",17,14, "lane syncronization""", "" )
   RDW_DEF_FLD( 0x48010, "pat",21,18, "comma detection indication""", "" )
   RDW_DEF("hi", 0x4a010, "red_hi5_mac_pcs_status"," XGXS PCS status""", 0x3fffff, 0x0, "sta")
   RDW_DEF_FLD( 0x4a010, "align_done",0,0, "alignment complete""", "" )
   RDW_DEF_FLD( 0x4a010, "match_fault",1,1, "receive rate matching error""", "" )
   RDW_DEF_FLD( 0x4a010, "disp_err",5,2, "disparity error""", "" )
   RDW_DEF_FLD( 0x4a010, "char_err",9,6, "character error""", "" )
   RDW_DEF_FLD( 0x4a010, "cg_align",13,10, "code group alignment indication""", "" )
   RDW_DEF_FLD( 0x4a010, "sync",17,14, "lane syncronization""", "" )
   RDW_DEF_FLD( 0x4a010, "pat",21,18, "comma detection indication""", "" )
   RDW_DEF("hi", 0x4c010, "red_hi6_mac_pcs_status"," XGXS PCS status""", 0x3fffff, 0x0, "sta")
   RDW_DEF_FLD( 0x4c010, "align_done",0,0, "alignment complete""", "" )
   RDW_DEF_FLD( 0x4c010, "match_fault",1,1, "receive rate matching error""", "" )
   RDW_DEF_FLD( 0x4c010, "disp_err",5,2, "disparity error""", "" )
   RDW_DEF_FLD( 0x4c010, "char_err",9,6, "character error""", "" )
   RDW_DEF_FLD( 0x4c010, "cg_align",13,10, "code group alignment indication""", "" )
   RDW_DEF_FLD( 0x4c010, "sync",17,14, "lane syncronization""", "" )
   RDW_DEF_FLD( 0x4c010, "pat",21,18, "comma detection indication""", "" )
   RDW_DEF("hi", 0x4e010, "red_hi7_mac_pcs_status"," XGXS PCS status""", 0x3fffff, 0x0, "sta")
   RDW_DEF_FLD( 0x4e010, "align_done",0,0, "alignment complete""", "" )
   RDW_DEF_FLD( 0x4e010, "match_fault",1,1, "receive rate matching error""", "" )
   RDW_DEF_FLD( 0x4e010, "disp_err",5,2, "disparity error""", "" )
   RDW_DEF_FLD( 0x4e010, "char_err",9,6, "character error""", "" )
   RDW_DEF_FLD( 0x4e010, "cg_align",13,10, "code group alignment indication""", "" )
   RDW_DEF_FLD( 0x4e010, "sync",17,14, "lane syncronization""", "" )
   RDW_DEF_FLD( 0x4e010, "pat",21,18, "comma detection indication""", "" )


   RDW_DEF("hi", 0x40011, "red_hi0_mac_cnt_xgbe_stat_p0_tx_octets_ov_inc","total tx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x40011, "",15,0, "total tx octets overflow counter""", "" )
   RDW_DEF("hi", 0x42011, "red_hi1_mac_cnt_xgbe_stat_p0_tx_octets_ov_inc","total tx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x42011, "",15,0, "total tx octets overflow counter""", "" )
   RDW_DEF("hi", 0x44011, "red_hi2_mac_cnt_xgbe_stat_p0_tx_octets_ov_inc","total tx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x44011, "",15,0, "total tx octets overflow counter""", "" )
   RDW_DEF("hi", 0x46011, "red_hi3_mac_cnt_xgbe_stat_p0_tx_octets_ov_inc","total tx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x46011, "",15,0, "total tx octets overflow counter""", "" )
   RDW_DEF("hi", 0x48011, "red_hi4_mac_cnt_xgbe_stat_p0_tx_octets_ov_inc","total tx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x48011, "",15,0, "total tx octets overflow counter""", "" )
   RDW_DEF("hi", 0x4a011, "red_hi5_mac_cnt_xgbe_stat_p0_tx_octets_ov_inc","total tx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4a011, "",15,0, "total tx octets overflow counter""", "" )
   RDW_DEF("hi", 0x4c011, "red_hi6_mac_cnt_xgbe_stat_p0_tx_octets_ov_inc","total tx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4c011, "",15,0, "total tx octets overflow counter""", "" )
   RDW_DEF("hi", 0x4e011, "red_hi7_mac_cnt_xgbe_stat_p0_tx_octets_ov_inc","total tx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4e011, "",15,0, "total tx octets overflow counter""", "" )


   RDW_DEF("hi", 0x40012, "red_hi0_mac_cnt_xgbe_stat_p0_rx_octets_ov_inc","total rx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x40012, "",15,0, "total rx octets overflow counter""", "" )
   RDW_DEF("hi", 0x42012, "red_hi1_mac_cnt_xgbe_stat_p0_rx_octets_ov_inc","total rx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x42012, "",15,0, "total rx octets overflow counter""", "" )
   RDW_DEF("hi", 0x44012, "red_hi2_mac_cnt_xgbe_stat_p0_rx_octets_ov_inc","total rx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x44012, "",15,0, "total rx octets overflow counter""", "" )
   RDW_DEF("hi", 0x46012, "red_hi3_mac_cnt_xgbe_stat_p0_rx_octets_ov_inc","total rx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x46012, "",15,0, "total rx octets overflow counter""", "" )
   RDW_DEF("hi", 0x48012, "red_hi4_mac_cnt_xgbe_stat_p0_rx_octets_ov_inc","total rx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x48012, "",15,0, "total rx octets overflow counter""", "" )
   RDW_DEF("hi", 0x4a012, "red_hi5_mac_cnt_xgbe_stat_p0_rx_octets_ov_inc","total rx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4a012, "",15,0, "total rx octets overflow counter""", "" )
   RDW_DEF("hi", 0x4c012, "red_hi6_mac_cnt_xgbe_stat_p0_rx_octets_ov_inc","total rx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4c012, "",15,0, "total rx octets overflow counter""", "" )
   RDW_DEF("hi", 0x4e012, "red_hi7_mac_cnt_xgbe_stat_p0_rx_octets_ov_inc","total rx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4e012, "",15,0, "total rx octets overflow counter""", "" )


   RDW_DEF("hi", 0x40013, "red_hi0_mac_cnt_xgbe_stat_p0_tx_octetsok_ov_inc","total good tx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x40013, "",15,0, "total good tx octets overflow counter""", "" )
   RDW_DEF("hi", 0x42013, "red_hi1_mac_cnt_xgbe_stat_p0_tx_octetsok_ov_inc","total good tx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x42013, "",15,0, "total good tx octets overflow counter""", "" )
   RDW_DEF("hi", 0x44013, "red_hi2_mac_cnt_xgbe_stat_p0_tx_octetsok_ov_inc","total good tx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x44013, "",15,0, "total good tx octets overflow counter""", "" )
   RDW_DEF("hi", 0x46013, "red_hi3_mac_cnt_xgbe_stat_p0_tx_octetsok_ov_inc","total good tx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x46013, "",15,0, "total good tx octets overflow counter""", "" )
   RDW_DEF("hi", 0x48013, "red_hi4_mac_cnt_xgbe_stat_p0_tx_octetsok_ov_inc","total good tx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x48013, "",15,0, "total good tx octets overflow counter""", "" )
   RDW_DEF("hi", 0x4a013, "red_hi5_mac_cnt_xgbe_stat_p0_tx_octetsok_ov_inc","total good tx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4a013, "",15,0, "total good tx octets overflow counter""", "" )
   RDW_DEF("hi", 0x4c013, "red_hi6_mac_cnt_xgbe_stat_p0_tx_octetsok_ov_inc","total good tx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4c013, "",15,0, "total good tx octets overflow counter""", "" )
   RDW_DEF("hi", 0x4e013, "red_hi7_mac_cnt_xgbe_stat_p0_tx_octetsok_ov_inc","total good tx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4e013, "",15,0, "total good tx octets overflow counter""", "" )


   RDW_DEF("hi", 0x40014, "red_hi0_mac_cnt_xgbe_stat_p0_rx_octetsok_ov_inc","total good rx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x40014, "",15,0, "total good rx octets overflow counter""", "" )
   RDW_DEF("hi", 0x42014, "red_hi1_mac_cnt_xgbe_stat_p0_rx_octetsok_ov_inc","total good rx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x42014, "",15,0, "total good rx octets overflow counter""", "" )
   RDW_DEF("hi", 0x44014, "red_hi2_mac_cnt_xgbe_stat_p0_rx_octetsok_ov_inc","total good rx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x44014, "",15,0, "total good rx octets overflow counter""", "" )
   RDW_DEF("hi", 0x46014, "red_hi3_mac_cnt_xgbe_stat_p0_rx_octetsok_ov_inc","total good rx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x46014, "",15,0, "total good rx octets overflow counter""", "" )
   RDW_DEF("hi", 0x48014, "red_hi4_mac_cnt_xgbe_stat_p0_rx_octetsok_ov_inc","total good rx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x48014, "",15,0, "total good rx octets overflow counter""", "" )
   RDW_DEF("hi", 0x4a014, "red_hi5_mac_cnt_xgbe_stat_p0_rx_octetsok_ov_inc","total good rx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4a014, "",15,0, "total good rx octets overflow counter""", "" )
   RDW_DEF("hi", 0x4c014, "red_hi6_mac_cnt_xgbe_stat_p0_rx_octetsok_ov_inc","total good rx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4c014, "",15,0, "total good rx octets overflow counter""", "" )
   RDW_DEF("hi", 0x4e014, "red_hi7_mac_cnt_xgbe_stat_p0_rx_octetsok_ov_inc","total good rx octets overflow counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4e014, "",15,0, "total good rx octets overflow counter""", "" )


   RDW_DEF("hi", 0x40015, "red_hi0_mac_sta_dskwdbg_stm","", 0x7fff, 0x0, "sta")
   RDW_DEF_FLD( 0x40015, "",14,0, "xgxs deskew debug status""", "" )
   RDW_DEF("hi", 0x42015, "red_hi1_mac_sta_dskwdbg_stm","", 0x7fff, 0x0, "sta")
   RDW_DEF_FLD( 0x42015, "",14,0, "xgxs deskew debug status""", "" )
   RDW_DEF("hi", 0x44015, "red_hi2_mac_sta_dskwdbg_stm","", 0x7fff, 0x0, "sta")
   RDW_DEF_FLD( 0x44015, "",14,0, "xgxs deskew debug status""", "" )
   RDW_DEF("hi", 0x46015, "red_hi3_mac_sta_dskwdbg_stm","", 0x7fff, 0x0, "sta")
   RDW_DEF_FLD( 0x46015, "",14,0, "xgxs deskew debug status""", "" )
   RDW_DEF("hi", 0x48015, "red_hi4_mac_sta_dskwdbg_stm","", 0x7fff, 0x0, "sta")
   RDW_DEF_FLD( 0x48015, "",14,0, "xgxs deskew debug status""", "" )
   RDW_DEF("hi", 0x4a015, "red_hi5_mac_sta_dskwdbg_stm","", 0x7fff, 0x0, "sta")
   RDW_DEF_FLD( 0x4a015, "",14,0, "xgxs deskew debug status""", "" )
   RDW_DEF("hi", 0x4c015, "red_hi6_mac_sta_dskwdbg_stm","", 0x7fff, 0x0, "sta")
   RDW_DEF_FLD( 0x4c015, "",14,0, "xgxs deskew debug status""", "" )
   RDW_DEF("hi", 0x4e015, "red_hi7_mac_sta_dskwdbg_stm","", 0x7fff, 0x0, "sta")
   RDW_DEF_FLD( 0x4e015, "",14,0, "xgxs deskew debug status""", "" )


   RDW_DEF("hi", 0x40016, "red_hi0_sw_rst","", 0x3ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40016, "port",0,0, "port reset, resets port logic, mac, xgxs, gearboxes and dividers""", "" )
   RDW_DEF_FLD( 0x40016, "xgxs",1,1, "mac reset, resets rx and tx xgxs """, "" )
   RDW_DEF_FLD( 0x40016, "mac",2,2, "mac reset, resets rx and tx mac """, "" )
   RDW_DEF_FLD( 0x40016, "gbox_rx",6,3, "10b->20b converter reset - one per lane""", "" )
   RDW_DEF_FLD( 0x40016, "gbox_tx",10,7, "20b->10b converter reset - one per lane""", "" )
   RDW_DEF_FLD( 0x40016, "clkdiv_rx",14,11, "reset the clock rx serdes clock dividers - one per lane""", "" )
   RDW_DEF_FLD( 0x40016, "clkdiv_tx",15,15, "reset the clock divider for the tx serdes clock divider""", "" )
   RDW_DEF_FLD( 0x40016, "reset_10b20b",16,16, "10b20b reset in pad""", "" )
   RDW_DEF_FLD( 0x40016, "stat",17,17, "reset the stats logic""", "" )
   RDW_DEF("hi", 0x42016, "red_hi1_sw_rst","", 0x3ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42016, "port",0,0, "port reset, resets port logic, mac, xgxs, gearboxes and dividers""", "" )
   RDW_DEF_FLD( 0x42016, "xgxs",1,1, "mac reset, resets rx and tx xgxs """, "" )
   RDW_DEF_FLD( 0x42016, "mac",2,2, "mac reset, resets rx and tx mac """, "" )
   RDW_DEF_FLD( 0x42016, "gbox_rx",6,3, "10b->20b converter reset - one per lane""", "" )
   RDW_DEF_FLD( 0x42016, "gbox_tx",10,7, "20b->10b converter reset - one per lane""", "" )
   RDW_DEF_FLD( 0x42016, "clkdiv_rx",14,11, "reset the clock rx serdes clock dividers - one per lane""", "" )
   RDW_DEF_FLD( 0x42016, "clkdiv_tx",15,15, "reset the clock divider for the tx serdes clock divider""", "" )
   RDW_DEF_FLD( 0x42016, "reset_10b20b",16,16, "10b20b reset in pad""", "" )
   RDW_DEF_FLD( 0x42016, "stat",17,17, "reset the stats logic""", "" )
   RDW_DEF("hi", 0x44016, "red_hi2_sw_rst","", 0x3ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44016, "port",0,0, "port reset, resets port logic, mac, xgxs, gearboxes and dividers""", "" )
   RDW_DEF_FLD( 0x44016, "xgxs",1,1, "mac reset, resets rx and tx xgxs """, "" )
   RDW_DEF_FLD( 0x44016, "mac",2,2, "mac reset, resets rx and tx mac """, "" )
   RDW_DEF_FLD( 0x44016, "gbox_rx",6,3, "10b->20b converter reset - one per lane""", "" )
   RDW_DEF_FLD( 0x44016, "gbox_tx",10,7, "20b->10b converter reset - one per lane""", "" )
   RDW_DEF_FLD( 0x44016, "clkdiv_rx",14,11, "reset the clock rx serdes clock dividers - one per lane""", "" )
   RDW_DEF_FLD( 0x44016, "clkdiv_tx",15,15, "reset the clock divider for the tx serdes clock divider""", "" )
   RDW_DEF_FLD( 0x44016, "reset_10b20b",16,16, "10b20b reset in pad""", "" )
   RDW_DEF_FLD( 0x44016, "stat",17,17, "reset the stats logic""", "" )
   RDW_DEF("hi", 0x46016, "red_hi3_sw_rst","", 0x3ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46016, "port",0,0, "port reset, resets port logic, mac, xgxs, gearboxes and dividers""", "" )
   RDW_DEF_FLD( 0x46016, "xgxs",1,1, "mac reset, resets rx and tx xgxs """, "" )
   RDW_DEF_FLD( 0x46016, "mac",2,2, "mac reset, resets rx and tx mac """, "" )
   RDW_DEF_FLD( 0x46016, "gbox_rx",6,3, "10b->20b converter reset - one per lane""", "" )
   RDW_DEF_FLD( 0x46016, "gbox_tx",10,7, "20b->10b converter reset - one per lane""", "" )
   RDW_DEF_FLD( 0x46016, "clkdiv_rx",14,11, "reset the clock rx serdes clock dividers - one per lane""", "" )
   RDW_DEF_FLD( 0x46016, "clkdiv_tx",15,15, "reset the clock divider for the tx serdes clock divider""", "" )
   RDW_DEF_FLD( 0x46016, "reset_10b20b",16,16, "10b20b reset in pad""", "" )
   RDW_DEF_FLD( 0x46016, "stat",17,17, "reset the stats logic""", "" )
   RDW_DEF("hi", 0x48016, "red_hi4_sw_rst","", 0x3ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48016, "port",0,0, "port reset, resets port logic, mac, xgxs, gearboxes and dividers""", "" )
   RDW_DEF_FLD( 0x48016, "xgxs",1,1, "mac reset, resets rx and tx xgxs """, "" )
   RDW_DEF_FLD( 0x48016, "mac",2,2, "mac reset, resets rx and tx mac """, "" )
   RDW_DEF_FLD( 0x48016, "gbox_rx",6,3, "10b->20b converter reset - one per lane""", "" )
   RDW_DEF_FLD( 0x48016, "gbox_tx",10,7, "20b->10b converter reset - one per lane""", "" )
   RDW_DEF_FLD( 0x48016, "clkdiv_rx",14,11, "reset the clock rx serdes clock dividers - one per lane""", "" )
   RDW_DEF_FLD( 0x48016, "clkdiv_tx",15,15, "reset the clock divider for the tx serdes clock divider""", "" )
   RDW_DEF_FLD( 0x48016, "reset_10b20b",16,16, "10b20b reset in pad""", "" )
   RDW_DEF_FLD( 0x48016, "stat",17,17, "reset the stats logic""", "" )
   RDW_DEF("hi", 0x4a016, "red_hi5_sw_rst","", 0x3ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a016, "port",0,0, "port reset, resets port logic, mac, xgxs, gearboxes and dividers""", "" )
   RDW_DEF_FLD( 0x4a016, "xgxs",1,1, "mac reset, resets rx and tx xgxs """, "" )
   RDW_DEF_FLD( 0x4a016, "mac",2,2, "mac reset, resets rx and tx mac """, "" )
   RDW_DEF_FLD( 0x4a016, "gbox_rx",6,3, "10b->20b converter reset - one per lane""", "" )
   RDW_DEF_FLD( 0x4a016, "gbox_tx",10,7, "20b->10b converter reset - one per lane""", "" )
   RDW_DEF_FLD( 0x4a016, "clkdiv_rx",14,11, "reset the clock rx serdes clock dividers - one per lane""", "" )
   RDW_DEF_FLD( 0x4a016, "clkdiv_tx",15,15, "reset the clock divider for the tx serdes clock divider""", "" )
   RDW_DEF_FLD( 0x4a016, "reset_10b20b",16,16, "10b20b reset in pad""", "" )
   RDW_DEF_FLD( 0x4a016, "stat",17,17, "reset the stats logic""", "" )
   RDW_DEF("hi", 0x4c016, "red_hi6_sw_rst","", 0x3ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c016, "port",0,0, "port reset, resets port logic, mac, xgxs, gearboxes and dividers""", "" )
   RDW_DEF_FLD( 0x4c016, "xgxs",1,1, "mac reset, resets rx and tx xgxs """, "" )
   RDW_DEF_FLD( 0x4c016, "mac",2,2, "mac reset, resets rx and tx mac """, "" )
   RDW_DEF_FLD( 0x4c016, "gbox_rx",6,3, "10b->20b converter reset - one per lane""", "" )
   RDW_DEF_FLD( 0x4c016, "gbox_tx",10,7, "20b->10b converter reset - one per lane""", "" )
   RDW_DEF_FLD( 0x4c016, "clkdiv_rx",14,11, "reset the clock rx serdes clock dividers - one per lane""", "" )
   RDW_DEF_FLD( 0x4c016, "clkdiv_tx",15,15, "reset the clock divider for the tx serdes clock divider""", "" )
   RDW_DEF_FLD( 0x4c016, "reset_10b20b",16,16, "10b20b reset in pad""", "" )
   RDW_DEF_FLD( 0x4c016, "stat",17,17, "reset the stats logic""", "" )
   RDW_DEF("hi", 0x4e016, "red_hi7_sw_rst","", 0x3ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e016, "port",0,0, "port reset, resets port logic, mac, xgxs, gearboxes and dividers""", "" )
   RDW_DEF_FLD( 0x4e016, "xgxs",1,1, "mac reset, resets rx and tx xgxs """, "" )
   RDW_DEF_FLD( 0x4e016, "mac",2,2, "mac reset, resets rx and tx mac """, "" )
   RDW_DEF_FLD( 0x4e016, "gbox_rx",6,3, "10b->20b converter reset - one per lane""", "" )
   RDW_DEF_FLD( 0x4e016, "gbox_tx",10,7, "20b->10b converter reset - one per lane""", "" )
   RDW_DEF_FLD( 0x4e016, "clkdiv_rx",14,11, "reset the clock rx serdes clock dividers - one per lane""", "" )
   RDW_DEF_FLD( 0x4e016, "clkdiv_tx",15,15, "reset the clock divider for the tx serdes clock divider""", "" )
   RDW_DEF_FLD( 0x4e016, "reset_10b20b",16,16, "10b20b reset in pad""", "" )
   RDW_DEF_FLD( 0x4e016, "stat",17,17, "reset the stats logic""", "" )


   RDW_DEF("hi", 0x40017, "red_hi0_sta_1g_mode","Status of 1G mode""", 0x1, 0x0, "sta")
   RDW_DEF_FLD( 0x40017, "",0,0, "HI is in the 1G mode. From the pin directly to the register""", "" )
   RDW_DEF("hi", 0x42017, "red_hi1_sta_1g_mode","Status of 1G mode""", 0x1, 0x0, "sta")
   RDW_DEF_FLD( 0x42017, "",0,0, "HI is in the 1G mode. From the pin directly to the register""", "" )
   RDW_DEF("hi", 0x44017, "red_hi2_sta_1g_mode","Status of 1G mode""", 0x1, 0x0, "sta")
   RDW_DEF_FLD( 0x44017, "",0,0, "HI is in the 1G mode. From the pin directly to the register""", "" )
   RDW_DEF("hi", 0x46017, "red_hi3_sta_1g_mode","Status of 1G mode""", 0x1, 0x0, "sta")
   RDW_DEF_FLD( 0x46017, "",0,0, "HI is in the 1G mode. From the pin directly to the register""", "" )
   RDW_DEF("hi", 0x48017, "red_hi4_sta_1g_mode","Status of 1G mode""", 0x1, 0x0, "sta")
   RDW_DEF_FLD( 0x48017, "",0,0, "HI is in the 1G mode. From the pin directly to the register""", "" )
   RDW_DEF("hi", 0x4a017, "red_hi5_sta_1g_mode","Status of 1G mode""", 0x1, 0x0, "sta")
   RDW_DEF_FLD( 0x4a017, "",0,0, "HI is in the 1G mode. From the pin directly to the register""", "" )
   RDW_DEF("hi", 0x4c017, "red_hi6_sta_1g_mode","Status of 1G mode""", 0x1, 0x0, "sta")
   RDW_DEF_FLD( 0x4c017, "",0,0, "HI is in the 1G mode. From the pin directly to the register""", "" )
   RDW_DEF("hi", 0x4e017, "red_hi7_sta_1g_mode","Status of 1G mode""", 0x1, 0x0, "sta")
   RDW_DEF_FLD( 0x4e017, "",0,0, "HI is in the 1G mode. From the pin directly to the register""", "" )


   RDW_DEF("hi", 0x40018, "red_hi0_pkt_lpbk","", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x40018, "",0,0, "packet based loopback enable""", "" )
   RDW_DEF("hi", 0x42018, "red_hi1_pkt_lpbk","", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x42018, "",0,0, "packet based loopback enable""", "" )
   RDW_DEF("hi", 0x44018, "red_hi2_pkt_lpbk","", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x44018, "",0,0, "packet based loopback enable""", "" )
   RDW_DEF("hi", 0x46018, "red_hi3_pkt_lpbk","", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x46018, "",0,0, "packet based loopback enable""", "" )
   RDW_DEF("hi", 0x48018, "red_hi4_pkt_lpbk","", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x48018, "",0,0, "packet based loopback enable""", "" )
   RDW_DEF("hi", 0x4a018, "red_hi5_pkt_lpbk","", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a018, "",0,0, "packet based loopback enable""", "" )
   RDW_DEF("hi", 0x4c018, "red_hi6_pkt_lpbk","", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c018, "",0,0, "packet based loopback enable""", "" )
   RDW_DEF("hi", 0x4e018, "red_hi7_pkt_lpbk","", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e018, "",0,0, "packet based loopback enable""", "" )


   RDW_DEF("hi", 0x40019, "red_hi0_ignore_rx_sig_strength","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x40019, "L0",0,0, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x40019, "L1",1,1, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x40019, "L2",2,2, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x40019, "L3",3,3, "ignore_rx_sig_strength""", "" )
   RDW_DEF("hi", 0x42019, "red_hi1_ignore_rx_sig_strength","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x42019, "L0",0,0, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x42019, "L1",1,1, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x42019, "L2",2,2, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x42019, "L3",3,3, "ignore_rx_sig_strength""", "" )
   RDW_DEF("hi", 0x44019, "red_hi2_ignore_rx_sig_strength","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x44019, "L0",0,0, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x44019, "L1",1,1, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x44019, "L2",2,2, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x44019, "L3",3,3, "ignore_rx_sig_strength""", "" )
   RDW_DEF("hi", 0x46019, "red_hi3_ignore_rx_sig_strength","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x46019, "L0",0,0, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x46019, "L1",1,1, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x46019, "L2",2,2, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x46019, "L3",3,3, "ignore_rx_sig_strength""", "" )
   RDW_DEF("hi", 0x48019, "red_hi4_ignore_rx_sig_strength","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x48019, "L0",0,0, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x48019, "L1",1,1, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x48019, "L2",2,2, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x48019, "L3",3,3, "ignore_rx_sig_strength""", "" )
   RDW_DEF("hi", 0x4a019, "red_hi5_ignore_rx_sig_strength","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a019, "L0",0,0, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x4a019, "L1",1,1, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x4a019, "L2",2,2, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x4a019, "L3",3,3, "ignore_rx_sig_strength""", "" )
   RDW_DEF("hi", 0x4c019, "red_hi6_ignore_rx_sig_strength","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c019, "L0",0,0, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x4c019, "L1",1,1, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x4c019, "L2",2,2, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x4c019, "L3",3,3, "ignore_rx_sig_strength""", "" )
   RDW_DEF("hi", 0x4e019, "red_hi7_ignore_rx_sig_strength","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e019, "L0",0,0, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x4e019, "L1",1,1, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x4e019, "L2",2,2, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x4e019, "L3",3,3, "ignore_rx_sig_strength""", "" )


   RDW_DEF("hi", 0x4001a, "red_hi0_gbe_cfg_mac","configuration for the dover mac""", 0xff, 0x40, "cfg")
   RDW_DEF_FLD( 0x4001a, "runt_pkt_size",7,0, "Packets smaller than this(in bytes) will be considered runt packets and will be dropped by the runt drop module""", "" )
   RDW_DEF("hi", 0x4201a, "red_hi1_gbe_cfg_mac","configuration for the dover mac""", 0xff, 0x40, "cfg")
   RDW_DEF_FLD( 0x4201a, "runt_pkt_size",7,0, "Packets smaller than this(in bytes) will be considered runt packets and will be dropped by the runt drop module""", "" )
   RDW_DEF("hi", 0x4401a, "red_hi2_gbe_cfg_mac","configuration for the dover mac""", 0xff, 0x40, "cfg")
   RDW_DEF_FLD( 0x4401a, "runt_pkt_size",7,0, "Packets smaller than this(in bytes) will be considered runt packets and will be dropped by the runt drop module""", "" )
   RDW_DEF("hi", 0x4601a, "red_hi3_gbe_cfg_mac","configuration for the dover mac""", 0xff, 0x40, "cfg")
   RDW_DEF_FLD( 0x4601a, "runt_pkt_size",7,0, "Packets smaller than this(in bytes) will be considered runt packets and will be dropped by the runt drop module""", "" )
   RDW_DEF("hi", 0x4801a, "red_hi4_gbe_cfg_mac","configuration for the dover mac""", 0xff, 0x40, "cfg")
   RDW_DEF_FLD( 0x4801a, "runt_pkt_size",7,0, "Packets smaller than this(in bytes) will be considered runt packets and will be dropped by the runt drop module""", "" )
   RDW_DEF("hi", 0x4a01a, "red_hi5_gbe_cfg_mac","configuration for the dover mac""", 0xff, 0x40, "cfg")
   RDW_DEF_FLD( 0x4a01a, "runt_pkt_size",7,0, "Packets smaller than this(in bytes) will be considered runt packets and will be dropped by the runt drop module""", "" )
   RDW_DEF("hi", 0x4c01a, "red_hi6_gbe_cfg_mac","configuration for the dover mac""", 0xff, 0x40, "cfg")
   RDW_DEF_FLD( 0x4c01a, "runt_pkt_size",7,0, "Packets smaller than this(in bytes) will be considered runt packets and will be dropped by the runt drop module""", "" )
   RDW_DEF("hi", 0x4e01a, "red_hi7_gbe_cfg_mac","configuration for the dover mac""", 0xff, 0x40, "cfg")
   RDW_DEF_FLD( 0x4e01a, "runt_pkt_size",7,0, "Packets smaller than this(in bytes) will be considered runt packets and will be dropped by the runt drop module""", "" )


   RDW_DEF("hi", 0x4001b, "red_hi0_cfg_min_pkt_size_to_pad","configuration for the minimal pkt size to pad 0 to if less than that""", 0xff, 0x3c, "cfg")
   RDW_DEF_FLD( 0x4001b, "",7,0, "Packets smaller than this(in bytes) will be paded with 0; 64-4(CRC) = 60""", "" )
   RDW_DEF("hi", 0x4201b, "red_hi1_cfg_min_pkt_size_to_pad","configuration for the minimal pkt size to pad 0 to if less than that""", 0xff, 0x3c, "cfg")
   RDW_DEF_FLD( 0x4201b, "",7,0, "Packets smaller than this(in bytes) will be paded with 0; 64-4(CRC) = 60""", "" )
   RDW_DEF("hi", 0x4401b, "red_hi2_cfg_min_pkt_size_to_pad","configuration for the minimal pkt size to pad 0 to if less than that""", 0xff, 0x3c, "cfg")
   RDW_DEF_FLD( 0x4401b, "",7,0, "Packets smaller than this(in bytes) will be paded with 0; 64-4(CRC) = 60""", "" )
   RDW_DEF("hi", 0x4601b, "red_hi3_cfg_min_pkt_size_to_pad","configuration for the minimal pkt size to pad 0 to if less than that""", 0xff, 0x3c, "cfg")
   RDW_DEF_FLD( 0x4601b, "",7,0, "Packets smaller than this(in bytes) will be paded with 0; 64-4(CRC) = 60""", "" )
   RDW_DEF("hi", 0x4801b, "red_hi4_cfg_min_pkt_size_to_pad","configuration for the minimal pkt size to pad 0 to if less than that""", 0xff, 0x3c, "cfg")
   RDW_DEF_FLD( 0x4801b, "",7,0, "Packets smaller than this(in bytes) will be paded with 0; 64-4(CRC) = 60""", "" )
   RDW_DEF("hi", 0x4a01b, "red_hi5_cfg_min_pkt_size_to_pad","configuration for the minimal pkt size to pad 0 to if less than that""", 0xff, 0x3c, "cfg")
   RDW_DEF_FLD( 0x4a01b, "",7,0, "Packets smaller than this(in bytes) will be paded with 0; 64-4(CRC) = 60""", "" )
   RDW_DEF("hi", 0x4c01b, "red_hi6_cfg_min_pkt_size_to_pad","configuration for the minimal pkt size to pad 0 to if less than that""", 0xff, 0x3c, "cfg")
   RDW_DEF_FLD( 0x4c01b, "",7,0, "Packets smaller than this(in bytes) will be paded with 0; 64-4(CRC) = 60""", "" )
   RDW_DEF("hi", 0x4e01b, "red_hi7_cfg_min_pkt_size_to_pad","configuration for the minimal pkt size to pad 0 to if less than that""", 0xff, 0x3c, "cfg")
   RDW_DEF_FLD( 0x4e01b, "",7,0, "Packets smaller than this(in bytes) will be paded with 0; 64-4(CRC) = 60""", "" )


   RDW_DEF("hi", 0x4001c, "red_hi0_gbe_CFG_gbe","", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x4001c, "clock_enable",0,0, "clock enable for 1gbe""", "" )
   RDW_DEF("hi", 0x4201c, "red_hi1_gbe_CFG_gbe","", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x4201c, "clock_enable",0,0, "clock enable for 1gbe""", "" )
   RDW_DEF("hi", 0x4401c, "red_hi2_gbe_CFG_gbe","", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x4401c, "clock_enable",0,0, "clock enable for 1gbe""", "" )
   RDW_DEF("hi", 0x4601c, "red_hi3_gbe_CFG_gbe","", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x4601c, "clock_enable",0,0, "clock enable for 1gbe""", "" )
   RDW_DEF("hi", 0x4801c, "red_hi4_gbe_CFG_gbe","", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x4801c, "clock_enable",0,0, "clock enable for 1gbe""", "" )
   RDW_DEF("hi", 0x4a01c, "red_hi5_gbe_CFG_gbe","", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a01c, "clock_enable",0,0, "clock enable for 1gbe""", "" )
   RDW_DEF("hi", 0x4c01c, "red_hi6_gbe_CFG_gbe","", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c01c, "clock_enable",0,0, "clock enable for 1gbe""", "" )
   RDW_DEF("hi", 0x4e01c, "red_hi7_gbe_CFG_gbe","", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e01c, "clock_enable",0,0, "clock enable for 1gbe""", "" )


   RDW_DEF("hi", 0x4001d, "red_hi0_port_cfg","", 0xfff, 0x808, "cfg")
   RDW_DEF_FLD( 0x4001d, "is_vntag",0,0, "tx port is in vntag mode""", "" )
   RDW_DEF_FLD( 0x4001d, "rx_vntag_passthru",1,1, "don't rewrite/strip/insert vntag's""", "" )
   RDW_DEF_FLD( 0x4001d, "tx_vntag_passthru",2,2, "don't rewrite/strip/insert vntag's""", "" )
   RDW_DEF_FLD( 0x4001d, "rx_allow_vntag",3,3, "allow vntag frames to be forwarded from hif to nif/cif""", "" )
   RDW_DEF_FLD( 0x4001d, "cmtag_version",5,4, "CMTAG version input to the parser""", "" )
   RDW_DEF_FLD( 0x4001d, "fcoe_is_t11",6,6, "If set, FCOE packets must be compatible with the T11 FCOE spec""", "" )
   RDW_DEF_FLD( 0x4001d, "fcoe_t11_version",10,7, "T11 version field.  FCOE packets must have the version less than or equal\nthe FCOE_T11_VERSION to be recognized as FCOE by the parser""", "" )
   RDW_DEF_FLD( 0x4001d, "tx_err_en",11,11, " when set, any errors will be forwarded to the link,\nresulting in an error code (0xFE) being inserted in the packet""", "" )
   RDW_DEF("hi", 0x4201d, "red_hi1_port_cfg","", 0xfff, 0x808, "cfg")
   RDW_DEF_FLD( 0x4201d, "is_vntag",0,0, "tx port is in vntag mode""", "" )
   RDW_DEF_FLD( 0x4201d, "rx_vntag_passthru",1,1, "don't rewrite/strip/insert vntag's""", "" )
   RDW_DEF_FLD( 0x4201d, "tx_vntag_passthru",2,2, "don't rewrite/strip/insert vntag's""", "" )
   RDW_DEF_FLD( 0x4201d, "rx_allow_vntag",3,3, "allow vntag frames to be forwarded from hif to nif/cif""", "" )
   RDW_DEF_FLD( 0x4201d, "cmtag_version",5,4, "CMTAG version input to the parser""", "" )
   RDW_DEF_FLD( 0x4201d, "fcoe_is_t11",6,6, "If set, FCOE packets must be compatible with the T11 FCOE spec""", "" )
   RDW_DEF_FLD( 0x4201d, "fcoe_t11_version",10,7, "T11 version field.  FCOE packets must have the version less than or equal\nthe FCOE_T11_VERSION to be recognized as FCOE by the parser""", "" )
   RDW_DEF_FLD( 0x4201d, "tx_err_en",11,11, " when set, any errors will be forwarded to the link,\nresulting in an error code (0xFE) being inserted in the packet""", "" )
   RDW_DEF("hi", 0x4401d, "red_hi2_port_cfg","", 0xfff, 0x808, "cfg")
   RDW_DEF_FLD( 0x4401d, "is_vntag",0,0, "tx port is in vntag mode""", "" )
   RDW_DEF_FLD( 0x4401d, "rx_vntag_passthru",1,1, "don't rewrite/strip/insert vntag's""", "" )
   RDW_DEF_FLD( 0x4401d, "tx_vntag_passthru",2,2, "don't rewrite/strip/insert vntag's""", "" )
   RDW_DEF_FLD( 0x4401d, "rx_allow_vntag",3,3, "allow vntag frames to be forwarded from hif to nif/cif""", "" )
   RDW_DEF_FLD( 0x4401d, "cmtag_version",5,4, "CMTAG version input to the parser""", "" )
   RDW_DEF_FLD( 0x4401d, "fcoe_is_t11",6,6, "If set, FCOE packets must be compatible with the T11 FCOE spec""", "" )
   RDW_DEF_FLD( 0x4401d, "fcoe_t11_version",10,7, "T11 version field.  FCOE packets must have the version less than or equal\nthe FCOE_T11_VERSION to be recognized as FCOE by the parser""", "" )
   RDW_DEF_FLD( 0x4401d, "tx_err_en",11,11, " when set, any errors will be forwarded to the link,\nresulting in an error code (0xFE) being inserted in the packet""", "" )
   RDW_DEF("hi", 0x4601d, "red_hi3_port_cfg","", 0xfff, 0x808, "cfg")
   RDW_DEF_FLD( 0x4601d, "is_vntag",0,0, "tx port is in vntag mode""", "" )
   RDW_DEF_FLD( 0x4601d, "rx_vntag_passthru",1,1, "don't rewrite/strip/insert vntag's""", "" )
   RDW_DEF_FLD( 0x4601d, "tx_vntag_passthru",2,2, "don't rewrite/strip/insert vntag's""", "" )
   RDW_DEF_FLD( 0x4601d, "rx_allow_vntag",3,3, "allow vntag frames to be forwarded from hif to nif/cif""", "" )
   RDW_DEF_FLD( 0x4601d, "cmtag_version",5,4, "CMTAG version input to the parser""", "" )
   RDW_DEF_FLD( 0x4601d, "fcoe_is_t11",6,6, "If set, FCOE packets must be compatible with the T11 FCOE spec""", "" )
   RDW_DEF_FLD( 0x4601d, "fcoe_t11_version",10,7, "T11 version field.  FCOE packets must have the version less than or equal\nthe FCOE_T11_VERSION to be recognized as FCOE by the parser""", "" )
   RDW_DEF_FLD( 0x4601d, "tx_err_en",11,11, " when set, any errors will be forwarded to the link,\nresulting in an error code (0xFE) being inserted in the packet""", "" )
   RDW_DEF("hi", 0x4801d, "red_hi4_port_cfg","", 0xfff, 0x808, "cfg")
   RDW_DEF_FLD( 0x4801d, "is_vntag",0,0, "tx port is in vntag mode""", "" )
   RDW_DEF_FLD( 0x4801d, "rx_vntag_passthru",1,1, "don't rewrite/strip/insert vntag's""", "" )
   RDW_DEF_FLD( 0x4801d, "tx_vntag_passthru",2,2, "don't rewrite/strip/insert vntag's""", "" )
   RDW_DEF_FLD( 0x4801d, "rx_allow_vntag",3,3, "allow vntag frames to be forwarded from hif to nif/cif""", "" )
   RDW_DEF_FLD( 0x4801d, "cmtag_version",5,4, "CMTAG version input to the parser""", "" )
   RDW_DEF_FLD( 0x4801d, "fcoe_is_t11",6,6, "If set, FCOE packets must be compatible with the T11 FCOE spec""", "" )
   RDW_DEF_FLD( 0x4801d, "fcoe_t11_version",10,7, "T11 version field.  FCOE packets must have the version less than or equal\nthe FCOE_T11_VERSION to be recognized as FCOE by the parser""", "" )
   RDW_DEF_FLD( 0x4801d, "tx_err_en",11,11, " when set, any errors will be forwarded to the link,\nresulting in an error code (0xFE) being inserted in the packet""", "" )
   RDW_DEF("hi", 0x4a01d, "red_hi5_port_cfg","", 0xfff, 0x808, "cfg")
   RDW_DEF_FLD( 0x4a01d, "is_vntag",0,0, "tx port is in vntag mode""", "" )
   RDW_DEF_FLD( 0x4a01d, "rx_vntag_passthru",1,1, "don't rewrite/strip/insert vntag's""", "" )
   RDW_DEF_FLD( 0x4a01d, "tx_vntag_passthru",2,2, "don't rewrite/strip/insert vntag's""", "" )
   RDW_DEF_FLD( 0x4a01d, "rx_allow_vntag",3,3, "allow vntag frames to be forwarded from hif to nif/cif""", "" )
   RDW_DEF_FLD( 0x4a01d, "cmtag_version",5,4, "CMTAG version input to the parser""", "" )
   RDW_DEF_FLD( 0x4a01d, "fcoe_is_t11",6,6, "If set, FCOE packets must be compatible with the T11 FCOE spec""", "" )
   RDW_DEF_FLD( 0x4a01d, "fcoe_t11_version",10,7, "T11 version field.  FCOE packets must have the version less than or equal\nthe FCOE_T11_VERSION to be recognized as FCOE by the parser""", "" )
   RDW_DEF_FLD( 0x4a01d, "tx_err_en",11,11, " when set, any errors will be forwarded to the link,\nresulting in an error code (0xFE) being inserted in the packet""", "" )
   RDW_DEF("hi", 0x4c01d, "red_hi6_port_cfg","", 0xfff, 0x808, "cfg")
   RDW_DEF_FLD( 0x4c01d, "is_vntag",0,0, "tx port is in vntag mode""", "" )
   RDW_DEF_FLD( 0x4c01d, "rx_vntag_passthru",1,1, "don't rewrite/strip/insert vntag's""", "" )
   RDW_DEF_FLD( 0x4c01d, "tx_vntag_passthru",2,2, "don't rewrite/strip/insert vntag's""", "" )
   RDW_DEF_FLD( 0x4c01d, "rx_allow_vntag",3,3, "allow vntag frames to be forwarded from hif to nif/cif""", "" )
   RDW_DEF_FLD( 0x4c01d, "cmtag_version",5,4, "CMTAG version input to the parser""", "" )
   RDW_DEF_FLD( 0x4c01d, "fcoe_is_t11",6,6, "If set, FCOE packets must be compatible with the T11 FCOE spec""", "" )
   RDW_DEF_FLD( 0x4c01d, "fcoe_t11_version",10,7, "T11 version field.  FCOE packets must have the version less than or equal\nthe FCOE_T11_VERSION to be recognized as FCOE by the parser""", "" )
   RDW_DEF_FLD( 0x4c01d, "tx_err_en",11,11, " when set, any errors will be forwarded to the link,\nresulting in an error code (0xFE) being inserted in the packet""", "" )
   RDW_DEF("hi", 0x4e01d, "red_hi7_port_cfg","", 0xfff, 0x808, "cfg")
   RDW_DEF_FLD( 0x4e01d, "is_vntag",0,0, "tx port is in vntag mode""", "" )
   RDW_DEF_FLD( 0x4e01d, "rx_vntag_passthru",1,1, "don't rewrite/strip/insert vntag's""", "" )
   RDW_DEF_FLD( 0x4e01d, "tx_vntag_passthru",2,2, "don't rewrite/strip/insert vntag's""", "" )
   RDW_DEF_FLD( 0x4e01d, "rx_allow_vntag",3,3, "allow vntag frames to be forwarded from hif to nif/cif""", "" )
   RDW_DEF_FLD( 0x4e01d, "cmtag_version",5,4, "CMTAG version input to the parser""", "" )
   RDW_DEF_FLD( 0x4e01d, "fcoe_is_t11",6,6, "If set, FCOE packets must be compatible with the T11 FCOE spec""", "" )
   RDW_DEF_FLD( 0x4e01d, "fcoe_t11_version",10,7, "T11 version field.  FCOE packets must have the version less than or equal\nthe FCOE_T11_VERSION to be recognized as FCOE by the parser""", "" )
   RDW_DEF_FLD( 0x4e01d, "tx_err_en",11,11, " when set, any errors will be forwarded to the link,\nresulting in an error code (0xFE) being inserted in the packet""", "" )


   RDW_DEF("hi", 0x4001e, "red_hi0_hash_channel0"," config for etherchannel 0""", 0x1f3ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4001e, "select_fcoe",1,0, "select one of four hash algorithms for fcoe """, "" )
   RDW_DEF_FLD( 0x4001e, "select_non_fcoe",3,2, "select one of four hash algorithms for non-fcoe """, "" )
   RDW_DEF_FLD( 0x4001e, "fcoe_field_select",9,4, "determines which fields to include in hash calculation for FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 FC-DID\nbit 4:  L3 FC-SID\nbit 5:  L3 FC-OXID""", "" )
   RDW_DEF_FLD( 0x4001e, "non_fcoe_field_select",16,12, "determines which fields to include in hash calculation for non-FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 IP-DA\nbit 4:  L3 IP-SA""", "" )
   RDW_DEF("hi", 0x4201e, "red_hi1_hash_channel0"," config for etherchannel 0""", 0x1f3ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4201e, "select_fcoe",1,0, "select one of four hash algorithms for fcoe """, "" )
   RDW_DEF_FLD( 0x4201e, "select_non_fcoe",3,2, "select one of four hash algorithms for non-fcoe """, "" )
   RDW_DEF_FLD( 0x4201e, "fcoe_field_select",9,4, "determines which fields to include in hash calculation for FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 FC-DID\nbit 4:  L3 FC-SID\nbit 5:  L3 FC-OXID""", "" )
   RDW_DEF_FLD( 0x4201e, "non_fcoe_field_select",16,12, "determines which fields to include in hash calculation for non-FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 IP-DA\nbit 4:  L3 IP-SA""", "" )
   RDW_DEF("hi", 0x4401e, "red_hi2_hash_channel0"," config for etherchannel 0""", 0x1f3ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4401e, "select_fcoe",1,0, "select one of four hash algorithms for fcoe """, "" )
   RDW_DEF_FLD( 0x4401e, "select_non_fcoe",3,2, "select one of four hash algorithms for non-fcoe """, "" )
   RDW_DEF_FLD( 0x4401e, "fcoe_field_select",9,4, "determines which fields to include in hash calculation for FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 FC-DID\nbit 4:  L3 FC-SID\nbit 5:  L3 FC-OXID""", "" )
   RDW_DEF_FLD( 0x4401e, "non_fcoe_field_select",16,12, "determines which fields to include in hash calculation for non-FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 IP-DA\nbit 4:  L3 IP-SA""", "" )
   RDW_DEF("hi", 0x4601e, "red_hi3_hash_channel0"," config for etherchannel 0""", 0x1f3ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4601e, "select_fcoe",1,0, "select one of four hash algorithms for fcoe """, "" )
   RDW_DEF_FLD( 0x4601e, "select_non_fcoe",3,2, "select one of four hash algorithms for non-fcoe """, "" )
   RDW_DEF_FLD( 0x4601e, "fcoe_field_select",9,4, "determines which fields to include in hash calculation for FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 FC-DID\nbit 4:  L3 FC-SID\nbit 5:  L3 FC-OXID""", "" )
   RDW_DEF_FLD( 0x4601e, "non_fcoe_field_select",16,12, "determines which fields to include in hash calculation for non-FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 IP-DA\nbit 4:  L3 IP-SA""", "" )
   RDW_DEF("hi", 0x4801e, "red_hi4_hash_channel0"," config for etherchannel 0""", 0x1f3ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4801e, "select_fcoe",1,0, "select one of four hash algorithms for fcoe """, "" )
   RDW_DEF_FLD( 0x4801e, "select_non_fcoe",3,2, "select one of four hash algorithms for non-fcoe """, "" )
   RDW_DEF_FLD( 0x4801e, "fcoe_field_select",9,4, "determines which fields to include in hash calculation for FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 FC-DID\nbit 4:  L3 FC-SID\nbit 5:  L3 FC-OXID""", "" )
   RDW_DEF_FLD( 0x4801e, "non_fcoe_field_select",16,12, "determines which fields to include in hash calculation for non-FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 IP-DA\nbit 4:  L3 IP-SA""", "" )
   RDW_DEF("hi", 0x4a01e, "red_hi5_hash_channel0"," config for etherchannel 0""", 0x1f3ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a01e, "select_fcoe",1,0, "select one of four hash algorithms for fcoe """, "" )
   RDW_DEF_FLD( 0x4a01e, "select_non_fcoe",3,2, "select one of four hash algorithms for non-fcoe """, "" )
   RDW_DEF_FLD( 0x4a01e, "fcoe_field_select",9,4, "determines which fields to include in hash calculation for FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 FC-DID\nbit 4:  L3 FC-SID\nbit 5:  L3 FC-OXID""", "" )
   RDW_DEF_FLD( 0x4a01e, "non_fcoe_field_select",16,12, "determines which fields to include in hash calculation for non-FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 IP-DA\nbit 4:  L3 IP-SA""", "" )
   RDW_DEF("hi", 0x4c01e, "red_hi6_hash_channel0"," config for etherchannel 0""", 0x1f3ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c01e, "select_fcoe",1,0, "select one of four hash algorithms for fcoe """, "" )
   RDW_DEF_FLD( 0x4c01e, "select_non_fcoe",3,2, "select one of four hash algorithms for non-fcoe """, "" )
   RDW_DEF_FLD( 0x4c01e, "fcoe_field_select",9,4, "determines which fields to include in hash calculation for FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 FC-DID\nbit 4:  L3 FC-SID\nbit 5:  L3 FC-OXID""", "" )
   RDW_DEF_FLD( 0x4c01e, "non_fcoe_field_select",16,12, "determines which fields to include in hash calculation for non-FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 IP-DA\nbit 4:  L3 IP-SA""", "" )
   RDW_DEF("hi", 0x4e01e, "red_hi7_hash_channel0"," config for etherchannel 0""", 0x1f3ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e01e, "select_fcoe",1,0, "select one of four hash algorithms for fcoe """, "" )
   RDW_DEF_FLD( 0x4e01e, "select_non_fcoe",3,2, "select one of four hash algorithms for non-fcoe """, "" )
   RDW_DEF_FLD( 0x4e01e, "fcoe_field_select",9,4, "determines which fields to include in hash calculation for FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 FC-DID\nbit 4:  L3 FC-SID\nbit 5:  L3 FC-OXID""", "" )
   RDW_DEF_FLD( 0x4e01e, "non_fcoe_field_select",16,12, "determines which fields to include in hash calculation for non-FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 IP-DA\nbit 4:  L3 IP-SA""", "" )


   RDW_DEF("hi", 0x4001f, "red_hi0_hash_channel1"," config for etherchannel 1""", 0x1f3ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4001f, "select_fcoe",1,0, "select one of four hash algorithms for fcoe """, "" )
   RDW_DEF_FLD( 0x4001f, "select_non_fcoe",3,2, "select one of four hash algorithms for non-fcoe """, "" )
   RDW_DEF_FLD( 0x4001f, "fcoe_field_select",9,4, "determines which fields to include in hash calculation for FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 FC-DID\nbit 4:  L3 FC-SID\nbit 5:  L3 FC-OXID""", "" )
   RDW_DEF_FLD( 0x4001f, "non_fcoe_field_select",16,12, "determines which fields to include in hash calculation for non-FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 IP-DA\nbit 4:  L3 IP-SA""", "" )
   RDW_DEF("hi", 0x4201f, "red_hi1_hash_channel1"," config for etherchannel 1""", 0x1f3ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4201f, "select_fcoe",1,0, "select one of four hash algorithms for fcoe """, "" )
   RDW_DEF_FLD( 0x4201f, "select_non_fcoe",3,2, "select one of four hash algorithms for non-fcoe """, "" )
   RDW_DEF_FLD( 0x4201f, "fcoe_field_select",9,4, "determines which fields to include in hash calculation for FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 FC-DID\nbit 4:  L3 FC-SID\nbit 5:  L3 FC-OXID""", "" )
   RDW_DEF_FLD( 0x4201f, "non_fcoe_field_select",16,12, "determines which fields to include in hash calculation for non-FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 IP-DA\nbit 4:  L3 IP-SA""", "" )
   RDW_DEF("hi", 0x4401f, "red_hi2_hash_channel1"," config for etherchannel 1""", 0x1f3ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4401f, "select_fcoe",1,0, "select one of four hash algorithms for fcoe """, "" )
   RDW_DEF_FLD( 0x4401f, "select_non_fcoe",3,2, "select one of four hash algorithms for non-fcoe """, "" )
   RDW_DEF_FLD( 0x4401f, "fcoe_field_select",9,4, "determines which fields to include in hash calculation for FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 FC-DID\nbit 4:  L3 FC-SID\nbit 5:  L3 FC-OXID""", "" )
   RDW_DEF_FLD( 0x4401f, "non_fcoe_field_select",16,12, "determines which fields to include in hash calculation for non-FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 IP-DA\nbit 4:  L3 IP-SA""", "" )
   RDW_DEF("hi", 0x4601f, "red_hi3_hash_channel1"," config for etherchannel 1""", 0x1f3ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4601f, "select_fcoe",1,0, "select one of four hash algorithms for fcoe """, "" )
   RDW_DEF_FLD( 0x4601f, "select_non_fcoe",3,2, "select one of four hash algorithms for non-fcoe """, "" )
   RDW_DEF_FLD( 0x4601f, "fcoe_field_select",9,4, "determines which fields to include in hash calculation for FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 FC-DID\nbit 4:  L3 FC-SID\nbit 5:  L3 FC-OXID""", "" )
   RDW_DEF_FLD( 0x4601f, "non_fcoe_field_select",16,12, "determines which fields to include in hash calculation for non-FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 IP-DA\nbit 4:  L3 IP-SA""", "" )
   RDW_DEF("hi", 0x4801f, "red_hi4_hash_channel1"," config for etherchannel 1""", 0x1f3ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4801f, "select_fcoe",1,0, "select one of four hash algorithms for fcoe """, "" )
   RDW_DEF_FLD( 0x4801f, "select_non_fcoe",3,2, "select one of four hash algorithms for non-fcoe """, "" )
   RDW_DEF_FLD( 0x4801f, "fcoe_field_select",9,4, "determines which fields to include in hash calculation for FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 FC-DID\nbit 4:  L3 FC-SID\nbit 5:  L3 FC-OXID""", "" )
   RDW_DEF_FLD( 0x4801f, "non_fcoe_field_select",16,12, "determines which fields to include in hash calculation for non-FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 IP-DA\nbit 4:  L3 IP-SA""", "" )
   RDW_DEF("hi", 0x4a01f, "red_hi5_hash_channel1"," config for etherchannel 1""", 0x1f3ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a01f, "select_fcoe",1,0, "select one of four hash algorithms for fcoe """, "" )
   RDW_DEF_FLD( 0x4a01f, "select_non_fcoe",3,2, "select one of four hash algorithms for non-fcoe """, "" )
   RDW_DEF_FLD( 0x4a01f, "fcoe_field_select",9,4, "determines which fields to include in hash calculation for FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 FC-DID\nbit 4:  L3 FC-SID\nbit 5:  L3 FC-OXID""", "" )
   RDW_DEF_FLD( 0x4a01f, "non_fcoe_field_select",16,12, "determines which fields to include in hash calculation for non-FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 IP-DA\nbit 4:  L3 IP-SA""", "" )
   RDW_DEF("hi", 0x4c01f, "red_hi6_hash_channel1"," config for etherchannel 1""", 0x1f3ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c01f, "select_fcoe",1,0, "select one of four hash algorithms for fcoe """, "" )
   RDW_DEF_FLD( 0x4c01f, "select_non_fcoe",3,2, "select one of four hash algorithms for non-fcoe """, "" )
   RDW_DEF_FLD( 0x4c01f, "fcoe_field_select",9,4, "determines which fields to include in hash calculation for FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 FC-DID\nbit 4:  L3 FC-SID\nbit 5:  L3 FC-OXID""", "" )
   RDW_DEF_FLD( 0x4c01f, "non_fcoe_field_select",16,12, "determines which fields to include in hash calculation for non-FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 IP-DA\nbit 4:  L3 IP-SA""", "" )
   RDW_DEF("hi", 0x4e01f, "red_hi7_hash_channel1"," config for etherchannel 1""", 0x1f3ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e01f, "select_fcoe",1,0, "select one of four hash algorithms for fcoe """, "" )
   RDW_DEF_FLD( 0x4e01f, "select_non_fcoe",3,2, "select one of four hash algorithms for non-fcoe """, "" )
   RDW_DEF_FLD( 0x4e01f, "fcoe_field_select",9,4, "determines which fields to include in hash calculation for FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 FC-DID\nbit 4:  L3 FC-SID\nbit 5:  L3 FC-OXID""", "" )
   RDW_DEF_FLD( 0x4e01f, "non_fcoe_field_select",16,12, "determines which fields to include in hash calculation for non-FCOE traffic:\nbit 0:  L2 DA\nbit 1:  L2 SA\nbit 2:  L2 VLAN\nbit 3:  L3 IP-DA\nbit 4:  L3 IP-SA""", "" )


   RDW_DEF("hi", 0x40020, "red_hi0_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40020, "vlan0",11,0, "mymac_vlan0 value""", "" )
   RDW_DEF_FLD( 0x40020, "vlan1",23,12, "mymac_vlan1 value""", "" )
   RDW_DEF_FLD( 0x40020, "vlan2_00",31,24, "mymac_vlan2 value""", "" )
   RDW_DEF("hi", 0x40021, "red_hi0_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40021, "vlan2_01",3,0, "mymac_vlan2 value""", "" )
   RDW_DEF_FLD( 0x40021, "vlan3",15,4, "mymac_vlan3 value""", "" )
   RDW_DEF_FLD( 0x40021, "vlan_en0",16,16, "mymac_vlan0 enable""", "" )
   RDW_DEF_FLD( 0x40021, "vlan_en1",17,17, "mymac_vlan1 enable""", "" )
   RDW_DEF_FLD( 0x40021, "vlan_en2",18,18, "mymac_vlan2 enable""", "" )
   RDW_DEF_FLD( 0x40021, "vlan_en3",19,19, "mymac_vlan3 enable""", "" )
   RDW_DEF_FLD( 0x40021, "macda0_00",31,20, "mymac_macda0 value""", "" )
   RDW_DEF("hi", 0x40022, "red_hi0_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40022, "macda0_01",31,0, "mymac_macda0 value""", "" )
   RDW_DEF("hi", 0x40023, "red_hi0_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40023, "macda0_02",3,0, "mymac_macda0 value""", "" )
   RDW_DEF_FLD( 0x40023, "macda1_00",31,4, "mymac_macda1 value""", "" )
   RDW_DEF("hi", 0x40024, "red_hi0_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40024, "macda1_01",19,0, "mymac_macda1 value""", "" )
   RDW_DEF_FLD( 0x40024, "macda2_00",31,20, "mymac_macda2 value""", "" )
   RDW_DEF("hi", 0x40025, "red_hi0_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40025, "macda2_01",31,0, "mymac_macda2 value""", "" )
   RDW_DEF("hi", 0x40026, "red_hi0_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40026, "macda2_02",3,0, "mymac_macda2 value""", "" )
   RDW_DEF_FLD( 0x40026, "macda3_00",31,4, "mymac_macda3 value""", "" )
   RDW_DEF("hi", 0x40027, "red_hi0_mymac","", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40027, "macda3_01",19,0, "mymac_macda3 value""", "" )
   RDW_DEF_FLD( 0x40027, "macda_en0",20,20, "mymac_macda0 enable""", "" )
   RDW_DEF_FLD( 0x40027, "macda_en1",21,21, "mymac_macda1 enable""", "" )
   RDW_DEF_FLD( 0x40027, "macda_en2",22,22, "mymac_macda2 enable""", "" )
   RDW_DEF_FLD( 0x40027, "macda_en3",23,23, "mymac_macda3 enable""", "" )
   RDW_DEF("hi", 0x42020, "red_hi1_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42020, "vlan0",11,0, "mymac_vlan0 value""", "" )
   RDW_DEF_FLD( 0x42020, "vlan1",23,12, "mymac_vlan1 value""", "" )
   RDW_DEF_FLD( 0x42020, "vlan2_00",31,24, "mymac_vlan2 value""", "" )
   RDW_DEF("hi", 0x42021, "red_hi1_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42021, "vlan2_01",3,0, "mymac_vlan2 value""", "" )
   RDW_DEF_FLD( 0x42021, "vlan3",15,4, "mymac_vlan3 value""", "" )
   RDW_DEF_FLD( 0x42021, "vlan_en0",16,16, "mymac_vlan0 enable""", "" )
   RDW_DEF_FLD( 0x42021, "vlan_en1",17,17, "mymac_vlan1 enable""", "" )
   RDW_DEF_FLD( 0x42021, "vlan_en2",18,18, "mymac_vlan2 enable""", "" )
   RDW_DEF_FLD( 0x42021, "vlan_en3",19,19, "mymac_vlan3 enable""", "" )
   RDW_DEF_FLD( 0x42021, "macda0_00",31,20, "mymac_macda0 value""", "" )
   RDW_DEF("hi", 0x42022, "red_hi1_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42022, "macda0_01",31,0, "mymac_macda0 value""", "" )
   RDW_DEF("hi", 0x42023, "red_hi1_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42023, "macda0_02",3,0, "mymac_macda0 value""", "" )
   RDW_DEF_FLD( 0x42023, "macda1_00",31,4, "mymac_macda1 value""", "" )
   RDW_DEF("hi", 0x42024, "red_hi1_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42024, "macda1_01",19,0, "mymac_macda1 value""", "" )
   RDW_DEF_FLD( 0x42024, "macda2_00",31,20, "mymac_macda2 value""", "" )
   RDW_DEF("hi", 0x42025, "red_hi1_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42025, "macda2_01",31,0, "mymac_macda2 value""", "" )
   RDW_DEF("hi", 0x42026, "red_hi1_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42026, "macda2_02",3,0, "mymac_macda2 value""", "" )
   RDW_DEF_FLD( 0x42026, "macda3_00",31,4, "mymac_macda3 value""", "" )
   RDW_DEF("hi", 0x42027, "red_hi1_mymac","", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42027, "macda3_01",19,0, "mymac_macda3 value""", "" )
   RDW_DEF_FLD( 0x42027, "macda_en0",20,20, "mymac_macda0 enable""", "" )
   RDW_DEF_FLD( 0x42027, "macda_en1",21,21, "mymac_macda1 enable""", "" )
   RDW_DEF_FLD( 0x42027, "macda_en2",22,22, "mymac_macda2 enable""", "" )
   RDW_DEF_FLD( 0x42027, "macda_en3",23,23, "mymac_macda3 enable""", "" )
   RDW_DEF("hi", 0x44020, "red_hi2_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44020, "vlan0",11,0, "mymac_vlan0 value""", "" )
   RDW_DEF_FLD( 0x44020, "vlan1",23,12, "mymac_vlan1 value""", "" )
   RDW_DEF_FLD( 0x44020, "vlan2_00",31,24, "mymac_vlan2 value""", "" )
   RDW_DEF("hi", 0x44021, "red_hi2_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44021, "vlan2_01",3,0, "mymac_vlan2 value""", "" )
   RDW_DEF_FLD( 0x44021, "vlan3",15,4, "mymac_vlan3 value""", "" )
   RDW_DEF_FLD( 0x44021, "vlan_en0",16,16, "mymac_vlan0 enable""", "" )
   RDW_DEF_FLD( 0x44021, "vlan_en1",17,17, "mymac_vlan1 enable""", "" )
   RDW_DEF_FLD( 0x44021, "vlan_en2",18,18, "mymac_vlan2 enable""", "" )
   RDW_DEF_FLD( 0x44021, "vlan_en3",19,19, "mymac_vlan3 enable""", "" )
   RDW_DEF_FLD( 0x44021, "macda0_00",31,20, "mymac_macda0 value""", "" )
   RDW_DEF("hi", 0x44022, "red_hi2_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44022, "macda0_01",31,0, "mymac_macda0 value""", "" )
   RDW_DEF("hi", 0x44023, "red_hi2_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44023, "macda0_02",3,0, "mymac_macda0 value""", "" )
   RDW_DEF_FLD( 0x44023, "macda1_00",31,4, "mymac_macda1 value""", "" )
   RDW_DEF("hi", 0x44024, "red_hi2_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44024, "macda1_01",19,0, "mymac_macda1 value""", "" )
   RDW_DEF_FLD( 0x44024, "macda2_00",31,20, "mymac_macda2 value""", "" )
   RDW_DEF("hi", 0x44025, "red_hi2_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44025, "macda2_01",31,0, "mymac_macda2 value""", "" )
   RDW_DEF("hi", 0x44026, "red_hi2_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44026, "macda2_02",3,0, "mymac_macda2 value""", "" )
   RDW_DEF_FLD( 0x44026, "macda3_00",31,4, "mymac_macda3 value""", "" )
   RDW_DEF("hi", 0x44027, "red_hi2_mymac","", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44027, "macda3_01",19,0, "mymac_macda3 value""", "" )
   RDW_DEF_FLD( 0x44027, "macda_en0",20,20, "mymac_macda0 enable""", "" )
   RDW_DEF_FLD( 0x44027, "macda_en1",21,21, "mymac_macda1 enable""", "" )
   RDW_DEF_FLD( 0x44027, "macda_en2",22,22, "mymac_macda2 enable""", "" )
   RDW_DEF_FLD( 0x44027, "macda_en3",23,23, "mymac_macda3 enable""", "" )
   RDW_DEF("hi", 0x46020, "red_hi3_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46020, "vlan0",11,0, "mymac_vlan0 value""", "" )
   RDW_DEF_FLD( 0x46020, "vlan1",23,12, "mymac_vlan1 value""", "" )
   RDW_DEF_FLD( 0x46020, "vlan2_00",31,24, "mymac_vlan2 value""", "" )
   RDW_DEF("hi", 0x46021, "red_hi3_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46021, "vlan2_01",3,0, "mymac_vlan2 value""", "" )
   RDW_DEF_FLD( 0x46021, "vlan3",15,4, "mymac_vlan3 value""", "" )
   RDW_DEF_FLD( 0x46021, "vlan_en0",16,16, "mymac_vlan0 enable""", "" )
   RDW_DEF_FLD( 0x46021, "vlan_en1",17,17, "mymac_vlan1 enable""", "" )
   RDW_DEF_FLD( 0x46021, "vlan_en2",18,18, "mymac_vlan2 enable""", "" )
   RDW_DEF_FLD( 0x46021, "vlan_en3",19,19, "mymac_vlan3 enable""", "" )
   RDW_DEF_FLD( 0x46021, "macda0_00",31,20, "mymac_macda0 value""", "" )
   RDW_DEF("hi", 0x46022, "red_hi3_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46022, "macda0_01",31,0, "mymac_macda0 value""", "" )
   RDW_DEF("hi", 0x46023, "red_hi3_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46023, "macda0_02",3,0, "mymac_macda0 value""", "" )
   RDW_DEF_FLD( 0x46023, "macda1_00",31,4, "mymac_macda1 value""", "" )
   RDW_DEF("hi", 0x46024, "red_hi3_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46024, "macda1_01",19,0, "mymac_macda1 value""", "" )
   RDW_DEF_FLD( 0x46024, "macda2_00",31,20, "mymac_macda2 value""", "" )
   RDW_DEF("hi", 0x46025, "red_hi3_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46025, "macda2_01",31,0, "mymac_macda2 value""", "" )
   RDW_DEF("hi", 0x46026, "red_hi3_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46026, "macda2_02",3,0, "mymac_macda2 value""", "" )
   RDW_DEF_FLD( 0x46026, "macda3_00",31,4, "mymac_macda3 value""", "" )
   RDW_DEF("hi", 0x46027, "red_hi3_mymac","", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46027, "macda3_01",19,0, "mymac_macda3 value""", "" )
   RDW_DEF_FLD( 0x46027, "macda_en0",20,20, "mymac_macda0 enable""", "" )
   RDW_DEF_FLD( 0x46027, "macda_en1",21,21, "mymac_macda1 enable""", "" )
   RDW_DEF_FLD( 0x46027, "macda_en2",22,22, "mymac_macda2 enable""", "" )
   RDW_DEF_FLD( 0x46027, "macda_en3",23,23, "mymac_macda3 enable""", "" )
   RDW_DEF("hi", 0x48020, "red_hi4_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48020, "vlan0",11,0, "mymac_vlan0 value""", "" )
   RDW_DEF_FLD( 0x48020, "vlan1",23,12, "mymac_vlan1 value""", "" )
   RDW_DEF_FLD( 0x48020, "vlan2_00",31,24, "mymac_vlan2 value""", "" )
   RDW_DEF("hi", 0x48021, "red_hi4_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48021, "vlan2_01",3,0, "mymac_vlan2 value""", "" )
   RDW_DEF_FLD( 0x48021, "vlan3",15,4, "mymac_vlan3 value""", "" )
   RDW_DEF_FLD( 0x48021, "vlan_en0",16,16, "mymac_vlan0 enable""", "" )
   RDW_DEF_FLD( 0x48021, "vlan_en1",17,17, "mymac_vlan1 enable""", "" )
   RDW_DEF_FLD( 0x48021, "vlan_en2",18,18, "mymac_vlan2 enable""", "" )
   RDW_DEF_FLD( 0x48021, "vlan_en3",19,19, "mymac_vlan3 enable""", "" )
   RDW_DEF_FLD( 0x48021, "macda0_00",31,20, "mymac_macda0 value""", "" )
   RDW_DEF("hi", 0x48022, "red_hi4_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48022, "macda0_01",31,0, "mymac_macda0 value""", "" )
   RDW_DEF("hi", 0x48023, "red_hi4_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48023, "macda0_02",3,0, "mymac_macda0 value""", "" )
   RDW_DEF_FLD( 0x48023, "macda1_00",31,4, "mymac_macda1 value""", "" )
   RDW_DEF("hi", 0x48024, "red_hi4_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48024, "macda1_01",19,0, "mymac_macda1 value""", "" )
   RDW_DEF_FLD( 0x48024, "macda2_00",31,20, "mymac_macda2 value""", "" )
   RDW_DEF("hi", 0x48025, "red_hi4_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48025, "macda2_01",31,0, "mymac_macda2 value""", "" )
   RDW_DEF("hi", 0x48026, "red_hi4_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48026, "macda2_02",3,0, "mymac_macda2 value""", "" )
   RDW_DEF_FLD( 0x48026, "macda3_00",31,4, "mymac_macda3 value""", "" )
   RDW_DEF("hi", 0x48027, "red_hi4_mymac","", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48027, "macda3_01",19,0, "mymac_macda3 value""", "" )
   RDW_DEF_FLD( 0x48027, "macda_en0",20,20, "mymac_macda0 enable""", "" )
   RDW_DEF_FLD( 0x48027, "macda_en1",21,21, "mymac_macda1 enable""", "" )
   RDW_DEF_FLD( 0x48027, "macda_en2",22,22, "mymac_macda2 enable""", "" )
   RDW_DEF_FLD( 0x48027, "macda_en3",23,23, "mymac_macda3 enable""", "" )
   RDW_DEF("hi", 0x4a020, "red_hi5_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a020, "vlan0",11,0, "mymac_vlan0 value""", "" )
   RDW_DEF_FLD( 0x4a020, "vlan1",23,12, "mymac_vlan1 value""", "" )
   RDW_DEF_FLD( 0x4a020, "vlan2_00",31,24, "mymac_vlan2 value""", "" )
   RDW_DEF("hi", 0x4a021, "red_hi5_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a021, "vlan2_01",3,0, "mymac_vlan2 value""", "" )
   RDW_DEF_FLD( 0x4a021, "vlan3",15,4, "mymac_vlan3 value""", "" )
   RDW_DEF_FLD( 0x4a021, "vlan_en0",16,16, "mymac_vlan0 enable""", "" )
   RDW_DEF_FLD( 0x4a021, "vlan_en1",17,17, "mymac_vlan1 enable""", "" )
   RDW_DEF_FLD( 0x4a021, "vlan_en2",18,18, "mymac_vlan2 enable""", "" )
   RDW_DEF_FLD( 0x4a021, "vlan_en3",19,19, "mymac_vlan3 enable""", "" )
   RDW_DEF_FLD( 0x4a021, "macda0_00",31,20, "mymac_macda0 value""", "" )
   RDW_DEF("hi", 0x4a022, "red_hi5_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a022, "macda0_01",31,0, "mymac_macda0 value""", "" )
   RDW_DEF("hi", 0x4a023, "red_hi5_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a023, "macda0_02",3,0, "mymac_macda0 value""", "" )
   RDW_DEF_FLD( 0x4a023, "macda1_00",31,4, "mymac_macda1 value""", "" )
   RDW_DEF("hi", 0x4a024, "red_hi5_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a024, "macda1_01",19,0, "mymac_macda1 value""", "" )
   RDW_DEF_FLD( 0x4a024, "macda2_00",31,20, "mymac_macda2 value""", "" )
   RDW_DEF("hi", 0x4a025, "red_hi5_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a025, "macda2_01",31,0, "mymac_macda2 value""", "" )
   RDW_DEF("hi", 0x4a026, "red_hi5_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a026, "macda2_02",3,0, "mymac_macda2 value""", "" )
   RDW_DEF_FLD( 0x4a026, "macda3_00",31,4, "mymac_macda3 value""", "" )
   RDW_DEF("hi", 0x4a027, "red_hi5_mymac","", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a027, "macda3_01",19,0, "mymac_macda3 value""", "" )
   RDW_DEF_FLD( 0x4a027, "macda_en0",20,20, "mymac_macda0 enable""", "" )
   RDW_DEF_FLD( 0x4a027, "macda_en1",21,21, "mymac_macda1 enable""", "" )
   RDW_DEF_FLD( 0x4a027, "macda_en2",22,22, "mymac_macda2 enable""", "" )
   RDW_DEF_FLD( 0x4a027, "macda_en3",23,23, "mymac_macda3 enable""", "" )
   RDW_DEF("hi", 0x4c020, "red_hi6_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c020, "vlan0",11,0, "mymac_vlan0 value""", "" )
   RDW_DEF_FLD( 0x4c020, "vlan1",23,12, "mymac_vlan1 value""", "" )
   RDW_DEF_FLD( 0x4c020, "vlan2_00",31,24, "mymac_vlan2 value""", "" )
   RDW_DEF("hi", 0x4c021, "red_hi6_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c021, "vlan2_01",3,0, "mymac_vlan2 value""", "" )
   RDW_DEF_FLD( 0x4c021, "vlan3",15,4, "mymac_vlan3 value""", "" )
   RDW_DEF_FLD( 0x4c021, "vlan_en0",16,16, "mymac_vlan0 enable""", "" )
   RDW_DEF_FLD( 0x4c021, "vlan_en1",17,17, "mymac_vlan1 enable""", "" )
   RDW_DEF_FLD( 0x4c021, "vlan_en2",18,18, "mymac_vlan2 enable""", "" )
   RDW_DEF_FLD( 0x4c021, "vlan_en3",19,19, "mymac_vlan3 enable""", "" )
   RDW_DEF_FLD( 0x4c021, "macda0_00",31,20, "mymac_macda0 value""", "" )
   RDW_DEF("hi", 0x4c022, "red_hi6_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c022, "macda0_01",31,0, "mymac_macda0 value""", "" )
   RDW_DEF("hi", 0x4c023, "red_hi6_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c023, "macda0_02",3,0, "mymac_macda0 value""", "" )
   RDW_DEF_FLD( 0x4c023, "macda1_00",31,4, "mymac_macda1 value""", "" )
   RDW_DEF("hi", 0x4c024, "red_hi6_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c024, "macda1_01",19,0, "mymac_macda1 value""", "" )
   RDW_DEF_FLD( 0x4c024, "macda2_00",31,20, "mymac_macda2 value""", "" )
   RDW_DEF("hi", 0x4c025, "red_hi6_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c025, "macda2_01",31,0, "mymac_macda2 value""", "" )
   RDW_DEF("hi", 0x4c026, "red_hi6_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c026, "macda2_02",3,0, "mymac_macda2 value""", "" )
   RDW_DEF_FLD( 0x4c026, "macda3_00",31,4, "mymac_macda3 value""", "" )
   RDW_DEF("hi", 0x4c027, "red_hi6_mymac","", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c027, "macda3_01",19,0, "mymac_macda3 value""", "" )
   RDW_DEF_FLD( 0x4c027, "macda_en0",20,20, "mymac_macda0 enable""", "" )
   RDW_DEF_FLD( 0x4c027, "macda_en1",21,21, "mymac_macda1 enable""", "" )
   RDW_DEF_FLD( 0x4c027, "macda_en2",22,22, "mymac_macda2 enable""", "" )
   RDW_DEF_FLD( 0x4c027, "macda_en3",23,23, "mymac_macda3 enable""", "" )
   RDW_DEF("hi", 0x4e020, "red_hi7_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e020, "vlan0",11,0, "mymac_vlan0 value""", "" )
   RDW_DEF_FLD( 0x4e020, "vlan1",23,12, "mymac_vlan1 value""", "" )
   RDW_DEF_FLD( 0x4e020, "vlan2_00",31,24, "mymac_vlan2 value""", "" )
   RDW_DEF("hi", 0x4e021, "red_hi7_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e021, "vlan2_01",3,0, "mymac_vlan2 value""", "" )
   RDW_DEF_FLD( 0x4e021, "vlan3",15,4, "mymac_vlan3 value""", "" )
   RDW_DEF_FLD( 0x4e021, "vlan_en0",16,16, "mymac_vlan0 enable""", "" )
   RDW_DEF_FLD( 0x4e021, "vlan_en1",17,17, "mymac_vlan1 enable""", "" )
   RDW_DEF_FLD( 0x4e021, "vlan_en2",18,18, "mymac_vlan2 enable""", "" )
   RDW_DEF_FLD( 0x4e021, "vlan_en3",19,19, "mymac_vlan3 enable""", "" )
   RDW_DEF_FLD( 0x4e021, "macda0_00",31,20, "mymac_macda0 value""", "" )
   RDW_DEF("hi", 0x4e022, "red_hi7_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e022, "macda0_01",31,0, "mymac_macda0 value""", "" )
   RDW_DEF("hi", 0x4e023, "red_hi7_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e023, "macda0_02",3,0, "mymac_macda0 value""", "" )
   RDW_DEF_FLD( 0x4e023, "macda1_00",31,4, "mymac_macda1 value""", "" )
   RDW_DEF("hi", 0x4e024, "red_hi7_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e024, "macda1_01",19,0, "mymac_macda1 value""", "" )
   RDW_DEF_FLD( 0x4e024, "macda2_00",31,20, "mymac_macda2 value""", "" )
   RDW_DEF("hi", 0x4e025, "red_hi7_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e025, "macda2_01",31,0, "mymac_macda2 value""", "" )
   RDW_DEF("hi", 0x4e026, "red_hi7_mymac","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e026, "macda2_02",3,0, "mymac_macda2 value""", "" )
   RDW_DEF_FLD( 0x4e026, "macda3_00",31,4, "mymac_macda3 value""", "" )
   RDW_DEF("hi", 0x4e027, "red_hi7_mymac","", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e027, "macda3_01",19,0, "mymac_macda3 value""", "" )
   RDW_DEF_FLD( 0x4e027, "macda_en0",20,20, "mymac_macda0 enable""", "" )
   RDW_DEF_FLD( 0x4e027, "macda_en1",21,21, "mymac_macda1 enable""", "" )
   RDW_DEF_FLD( 0x4e027, "macda_en2",22,22, "mymac_macda2 enable""", "" )
   RDW_DEF_FLD( 0x4e027, "macda_en3",23,23, "mymac_macda3 enable""", "" )


   RDW_DEF("hi", 0x40028, "red_hi0_rx_vif_min","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40028, "",11,0, "minimum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x42028, "red_hi1_rx_vif_min","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42028, "",11,0, "minimum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x44028, "red_hi2_rx_vif_min","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44028, "",11,0, "minimum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x46028, "red_hi3_rx_vif_min","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46028, "",11,0, "minimum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x48028, "red_hi4_rx_vif_min","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48028, "",11,0, "minimum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x4a028, "red_hi5_rx_vif_min","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a028, "",11,0, "minimum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x4c028, "red_hi6_rx_vif_min","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c028, "",11,0, "minimum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x4e028, "red_hi7_rx_vif_min","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e028, "",11,0, "minimum hif value for checking incoming packets""", "" )


   RDW_DEF("hi", 0x40029, "red_hi0_rx_vif_max","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40029, "",11,0, "maximum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x42029, "red_hi1_rx_vif_max","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42029, "",11,0, "maximum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x44029, "red_hi2_rx_vif_max","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44029, "",11,0, "maximum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x46029, "red_hi3_rx_vif_max","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46029, "",11,0, "maximum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x48029, "red_hi4_rx_vif_max","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48029, "",11,0, "maximum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x4a029, "red_hi5_rx_vif_max","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a029, "",11,0, "maximum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x4c029, "red_hi6_rx_vif_max","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c029, "",11,0, "maximum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x4e029, "red_hi7_rx_vif_max","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e029, "",11,0, "maximum hif value for checking incoming packets""", "" )


   RDW_DEF("hi", 0x4002a, "red_hi0_rx_vif_offset","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4002a, "",11,0, "vif offset to add to src vif on incoming packets""", "" )
   RDW_DEF("hi", 0x4202a, "red_hi1_rx_vif_offset","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4202a, "",11,0, "vif offset to add to src vif on incoming packets""", "" )
   RDW_DEF("hi", 0x4402a, "red_hi2_rx_vif_offset","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4402a, "",11,0, "vif offset to add to src vif on incoming packets""", "" )
   RDW_DEF("hi", 0x4602a, "red_hi3_rx_vif_offset","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4602a, "",11,0, "vif offset to add to src vif on incoming packets""", "" )
   RDW_DEF("hi", 0x4802a, "red_hi4_rx_vif_offset","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4802a, "",11,0, "vif offset to add to src vif on incoming packets""", "" )
   RDW_DEF("hi", 0x4a02a, "red_hi5_rx_vif_offset","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a02a, "",11,0, "vif offset to add to src vif on incoming packets""", "" )
   RDW_DEF("hi", 0x4c02a, "red_hi6_rx_vif_offset","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c02a, "",11,0, "vif offset to add to src vif on incoming packets""", "" )
   RDW_DEF("hi", 0x4e02a, "red_hi7_rx_vif_offset","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e02a, "",11,0, "vif offset to add to src vif on incoming packets""", "" )


   RDW_DEF("hi", 0x4002b, "red_hi0_tx_vif_min","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4002b, "",11,0, "minimum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x4202b, "red_hi1_tx_vif_min","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4202b, "",11,0, "minimum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x4402b, "red_hi2_tx_vif_min","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4402b, "",11,0, "minimum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x4602b, "red_hi3_tx_vif_min","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4602b, "",11,0, "minimum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x4802b, "red_hi4_tx_vif_min","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4802b, "",11,0, "minimum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x4a02b, "red_hi5_tx_vif_min","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a02b, "",11,0, "minimum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x4c02b, "red_hi6_tx_vif_min","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c02b, "",11,0, "minimum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x4e02b, "red_hi7_tx_vif_min","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e02b, "",11,0, "minimum hif value for checking incoming packets""", "" )


   RDW_DEF("hi", 0x4002c, "red_hi0_tx_vif_max","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4002c, "",11,0, "maximum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x4202c, "red_hi1_tx_vif_max","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4202c, "",11,0, "maximum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x4402c, "red_hi2_tx_vif_max","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4402c, "",11,0, "maximum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x4602c, "red_hi3_tx_vif_max","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4602c, "",11,0, "maximum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x4802c, "red_hi4_tx_vif_max","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4802c, "",11,0, "maximum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x4a02c, "red_hi5_tx_vif_max","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a02c, "",11,0, "maximum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x4c02c, "red_hi6_tx_vif_max","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c02c, "",11,0, "maximum hif value for checking incoming packets""", "" )
   RDW_DEF("hi", 0x4e02c, "red_hi7_tx_vif_max","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e02c, "",11,0, "maximum hif value for checking incoming packets""", "" )


   RDW_DEF("hi", 0x4002d, "red_hi0_tx_vif_offset","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4002d, "",11,0, "vif offset to add to src vif on incoming packets""", "" )
   RDW_DEF("hi", 0x4202d, "red_hi1_tx_vif_offset","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4202d, "",11,0, "vif offset to add to src vif on incoming packets""", "" )
   RDW_DEF("hi", 0x4402d, "red_hi2_tx_vif_offset","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4402d, "",11,0, "vif offset to add to src vif on incoming packets""", "" )
   RDW_DEF("hi", 0x4602d, "red_hi3_tx_vif_offset","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4602d, "",11,0, "vif offset to add to src vif on incoming packets""", "" )
   RDW_DEF("hi", 0x4802d, "red_hi4_tx_vif_offset","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4802d, "",11,0, "vif offset to add to src vif on incoming packets""", "" )
   RDW_DEF("hi", 0x4a02d, "red_hi5_tx_vif_offset","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a02d, "",11,0, "vif offset to add to src vif on incoming packets""", "" )
   RDW_DEF("hi", 0x4c02d, "red_hi6_tx_vif_offset","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c02d, "",11,0, "vif offset to add to src vif on incoming packets""", "" )
   RDW_DEF("hi", 0x4e02d, "red_hi7_tx_vif_offset","", 0xfff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e02d, "",11,0, "vif offset to add to src vif on incoming packets""", "" )


   RDW_DEF("hi", 0x4002e, "red_hi0_fcoe_rx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4002e, "",31,0, "fcoe vntag to insert when ce packets are recieved""", "" )
   RDW_DEF("hi", 0x4202e, "red_hi1_fcoe_rx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4202e, "",31,0, "fcoe vntag to insert when ce packets are recieved""", "" )
   RDW_DEF("hi", 0x4402e, "red_hi2_fcoe_rx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4402e, "",31,0, "fcoe vntag to insert when ce packets are recieved""", "" )
   RDW_DEF("hi", 0x4602e, "red_hi3_fcoe_rx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4602e, "",31,0, "fcoe vntag to insert when ce packets are recieved""", "" )
   RDW_DEF("hi", 0x4802e, "red_hi4_fcoe_rx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4802e, "",31,0, "fcoe vntag to insert when ce packets are recieved""", "" )
   RDW_DEF("hi", 0x4a02e, "red_hi5_fcoe_rx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a02e, "",31,0, "fcoe vntag to insert when ce packets are recieved""", "" )
   RDW_DEF("hi", 0x4c02e, "red_hi6_fcoe_rx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c02e, "",31,0, "fcoe vntag to insert when ce packets are recieved""", "" )
   RDW_DEF("hi", 0x4e02e, "red_hi7_fcoe_rx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e02e, "",31,0, "fcoe vntag to insert when ce packets are recieved""", "" )


   RDW_DEF("hi", 0x4002f, "red_hi0_fcoe_tx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4002f, "",31,0, "fcoe vntag to insert when ce packets are transmitted""", "" )
   RDW_DEF("hi", 0x4202f, "red_hi1_fcoe_tx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4202f, "",31,0, "fcoe vntag to insert when ce packets are transmitted""", "" )
   RDW_DEF("hi", 0x4402f, "red_hi2_fcoe_tx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4402f, "",31,0, "fcoe vntag to insert when ce packets are transmitted""", "" )
   RDW_DEF("hi", 0x4602f, "red_hi3_fcoe_tx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4602f, "",31,0, "fcoe vntag to insert when ce packets are transmitted""", "" )
   RDW_DEF("hi", 0x4802f, "red_hi4_fcoe_tx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4802f, "",31,0, "fcoe vntag to insert when ce packets are transmitted""", "" )
   RDW_DEF("hi", 0x4a02f, "red_hi5_fcoe_tx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a02f, "",31,0, "fcoe vntag to insert when ce packets are transmitted""", "" )
   RDW_DEF("hi", 0x4c02f, "red_hi6_fcoe_tx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c02f, "",31,0, "fcoe vntag to insert when ce packets are transmitted""", "" )
   RDW_DEF("hi", 0x4e02f, "red_hi7_fcoe_tx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e02f, "",31,0, "fcoe vntag to insert when ce packets are transmitted""", "" )


   RDW_DEF("hi", 0x40030, "red_hi0_non_fcoe_rx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40030, "",31,0, "non_fcoe vntag to insert when ce packets are recieved""", "" )
   RDW_DEF("hi", 0x42030, "red_hi1_non_fcoe_rx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42030, "",31,0, "non_fcoe vntag to insert when ce packets are recieved""", "" )
   RDW_DEF("hi", 0x44030, "red_hi2_non_fcoe_rx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44030, "",31,0, "non_fcoe vntag to insert when ce packets are recieved""", "" )
   RDW_DEF("hi", 0x46030, "red_hi3_non_fcoe_rx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46030, "",31,0, "non_fcoe vntag to insert when ce packets are recieved""", "" )
   RDW_DEF("hi", 0x48030, "red_hi4_non_fcoe_rx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48030, "",31,0, "non_fcoe vntag to insert when ce packets are recieved""", "" )
   RDW_DEF("hi", 0x4a030, "red_hi5_non_fcoe_rx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a030, "",31,0, "non_fcoe vntag to insert when ce packets are recieved""", "" )
   RDW_DEF("hi", 0x4c030, "red_hi6_non_fcoe_rx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c030, "",31,0, "non_fcoe vntag to insert when ce packets are recieved""", "" )
   RDW_DEF("hi", 0x4e030, "red_hi7_non_fcoe_rx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e030, "",31,0, "non_fcoe vntag to insert when ce packets are recieved""", "" )


   RDW_DEF("hi", 0x40031, "red_hi0_non_fcoe_tx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40031, "",31,0, "non_fcoe vntag to insert when ce packets are transmitted""", "" )
   RDW_DEF("hi", 0x42031, "red_hi1_non_fcoe_tx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42031, "",31,0, "non_fcoe vntag to insert when ce packets are transmitted""", "" )
   RDW_DEF("hi", 0x44031, "red_hi2_non_fcoe_tx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44031, "",31,0, "non_fcoe vntag to insert when ce packets are transmitted""", "" )
   RDW_DEF("hi", 0x46031, "red_hi3_non_fcoe_tx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46031, "",31,0, "non_fcoe vntag to insert when ce packets are transmitted""", "" )
   RDW_DEF("hi", 0x48031, "red_hi4_non_fcoe_tx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48031, "",31,0, "non_fcoe vntag to insert when ce packets are transmitted""", "" )
   RDW_DEF("hi", 0x4a031, "red_hi5_non_fcoe_tx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a031, "",31,0, "non_fcoe vntag to insert when ce packets are transmitted""", "" )
   RDW_DEF("hi", 0x4c031, "red_hi6_non_fcoe_tx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c031, "",31,0, "non_fcoe vntag to insert when ce packets are transmitted""", "" )
   RDW_DEF("hi", 0x4e031, "red_hi7_non_fcoe_tx_default_vntag","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e031, "",31,0, "non_fcoe vntag to insert when ce packets are transmitted""", "" )


   RDW_DEF("hi", 0x40032, "red_hi0_class_xoff","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40032, "inc_sel0",4,0, "mux sel""", "" )
   RDW_DEF_FLD( 0x40032, "inc_sel1",9,5, "mux sel""", "" )
   RDW_DEF_FLD( 0x40032, "duration_inc_sel0",14,10, "mux sel""", "" )
   RDW_DEF_FLD( 0x40032, "duration_inc_sel1",19,15, "mux sel""", "" )
   RDW_DEF("hi", 0x42032, "red_hi1_class_xoff","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42032, "inc_sel0",4,0, "mux sel""", "" )
   RDW_DEF_FLD( 0x42032, "inc_sel1",9,5, "mux sel""", "" )
   RDW_DEF_FLD( 0x42032, "duration_inc_sel0",14,10, "mux sel""", "" )
   RDW_DEF_FLD( 0x42032, "duration_inc_sel1",19,15, "mux sel""", "" )
   RDW_DEF("hi", 0x44032, "red_hi2_class_xoff","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44032, "inc_sel0",4,0, "mux sel""", "" )
   RDW_DEF_FLD( 0x44032, "inc_sel1",9,5, "mux sel""", "" )
   RDW_DEF_FLD( 0x44032, "duration_inc_sel0",14,10, "mux sel""", "" )
   RDW_DEF_FLD( 0x44032, "duration_inc_sel1",19,15, "mux sel""", "" )
   RDW_DEF("hi", 0x46032, "red_hi3_class_xoff","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46032, "inc_sel0",4,0, "mux sel""", "" )
   RDW_DEF_FLD( 0x46032, "inc_sel1",9,5, "mux sel""", "" )
   RDW_DEF_FLD( 0x46032, "duration_inc_sel0",14,10, "mux sel""", "" )
   RDW_DEF_FLD( 0x46032, "duration_inc_sel1",19,15, "mux sel""", "" )
   RDW_DEF("hi", 0x48032, "red_hi4_class_xoff","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48032, "inc_sel0",4,0, "mux sel""", "" )
   RDW_DEF_FLD( 0x48032, "inc_sel1",9,5, "mux sel""", "" )
   RDW_DEF_FLD( 0x48032, "duration_inc_sel0",14,10, "mux sel""", "" )
   RDW_DEF_FLD( 0x48032, "duration_inc_sel1",19,15, "mux sel""", "" )
   RDW_DEF("hi", 0x4a032, "red_hi5_class_xoff","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a032, "inc_sel0",4,0, "mux sel""", "" )
   RDW_DEF_FLD( 0x4a032, "inc_sel1",9,5, "mux sel""", "" )
   RDW_DEF_FLD( 0x4a032, "duration_inc_sel0",14,10, "mux sel""", "" )
   RDW_DEF_FLD( 0x4a032, "duration_inc_sel1",19,15, "mux sel""", "" )
   RDW_DEF("hi", 0x4c032, "red_hi6_class_xoff","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c032, "inc_sel0",4,0, "mux sel""", "" )
   RDW_DEF_FLD( 0x4c032, "inc_sel1",9,5, "mux sel""", "" )
   RDW_DEF_FLD( 0x4c032, "duration_inc_sel0",14,10, "mux sel""", "" )
   RDW_DEF_FLD( 0x4c032, "duration_inc_sel1",19,15, "mux sel""", "" )
   RDW_DEF("hi", 0x4e032, "red_hi7_class_xoff","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e032, "inc_sel0",4,0, "mux sel""", "" )
   RDW_DEF_FLD( 0x4e032, "inc_sel1",9,5, "mux sel""", "" )
   RDW_DEF_FLD( 0x4e032, "duration_inc_sel0",14,10, "mux sel""", "" )
   RDW_DEF_FLD( 0x4e032, "duration_inc_sel1",19,15, "mux sel""", "" )


   RDW_DEF("hi", 0x40033, "red_hi0_CNT_class_xoff_cnt0","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x40033, "",15,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x42033, "red_hi1_CNT_class_xoff_cnt0","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x42033, "",15,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x44033, "red_hi2_CNT_class_xoff_cnt0","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x44033, "",15,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x46033, "red_hi3_CNT_class_xoff_cnt0","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x46033, "",15,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x48033, "red_hi4_CNT_class_xoff_cnt0","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x48033, "",15,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x4a033, "red_hi5_CNT_class_xoff_cnt0","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4a033, "",15,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x4c033, "red_hi6_CNT_class_xoff_cnt0","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4c033, "",15,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x4e033, "red_hi7_CNT_class_xoff_cnt0","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4e033, "",15,0, "tx xon->xoff counter""", "" )


   RDW_DEF("hi", 0x40034, "red_hi0_CNT_class_xoff_cnt1","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x40034, "",15,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x42034, "red_hi1_CNT_class_xoff_cnt1","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x42034, "",15,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x44034, "red_hi2_CNT_class_xoff_cnt1","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x44034, "",15,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x46034, "red_hi3_CNT_class_xoff_cnt1","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x46034, "",15,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x48034, "red_hi4_CNT_class_xoff_cnt1","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x48034, "",15,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x4a034, "red_hi5_CNT_class_xoff_cnt1","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4a034, "",15,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x4c034, "red_hi6_CNT_class_xoff_cnt1","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4c034, "",15,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x4e034, "red_hi7_CNT_class_xoff_cnt1","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4e034, "",15,0, "tx xon->xoff counter""", "" )


   RDW_DEF("hi", 0x40035, "red_hi0_CNT_class_xoff_duration_cnt0","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x40035, "",23,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x42035, "red_hi1_CNT_class_xoff_duration_cnt0","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x42035, "",23,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x44035, "red_hi2_CNT_class_xoff_duration_cnt0","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x44035, "",23,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x46035, "red_hi3_CNT_class_xoff_duration_cnt0","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x46035, "",23,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x48035, "red_hi4_CNT_class_xoff_duration_cnt0","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x48035, "",23,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x4a035, "red_hi5_CNT_class_xoff_duration_cnt0","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4a035, "",23,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x4c035, "red_hi6_CNT_class_xoff_duration_cnt0","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4c035, "",23,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x4e035, "red_hi7_CNT_class_xoff_duration_cnt0","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4e035, "",23,0, "tx xon->xoff counter""", "" )


   RDW_DEF("hi", 0x40036, "red_hi0_CNT_class_xoff_duration_cnt1","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x40036, "",23,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x42036, "red_hi1_CNT_class_xoff_duration_cnt1","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x42036, "",23,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x44036, "red_hi2_CNT_class_xoff_duration_cnt1","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x44036, "",23,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x46036, "red_hi3_CNT_class_xoff_duration_cnt1","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x46036, "",23,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x48036, "red_hi4_CNT_class_xoff_duration_cnt1","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x48036, "",23,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x4a036, "red_hi5_CNT_class_xoff_duration_cnt1","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4a036, "",23,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x4c036, "red_hi6_CNT_class_xoff_duration_cnt1","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4c036, "",23,0, "tx xon->xoff counter""", "" )
   RDW_DEF("hi", 0x4e036, "red_hi7_CNT_class_xoff_duration_cnt1","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4e036, "",23,0, "tx xon->xoff counter""", "" )


   RDW_DEF("hi", 0x40037, "red_hi0_STA_tx_class_xoff","STA for tx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x40037, "",8,0, "STA for tx class xon/xoff state""", "" )
   RDW_DEF("hi", 0x42037, "red_hi1_STA_tx_class_xoff","STA for tx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x42037, "",8,0, "STA for tx class xon/xoff state""", "" )
   RDW_DEF("hi", 0x44037, "red_hi2_STA_tx_class_xoff","STA for tx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x44037, "",8,0, "STA for tx class xon/xoff state""", "" )
   RDW_DEF("hi", 0x46037, "red_hi3_STA_tx_class_xoff","STA for tx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x46037, "",8,0, "STA for tx class xon/xoff state""", "" )
   RDW_DEF("hi", 0x48037, "red_hi4_STA_tx_class_xoff","STA for tx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x48037, "",8,0, "STA for tx class xon/xoff state""", "" )
   RDW_DEF("hi", 0x4a037, "red_hi5_STA_tx_class_xoff","STA for tx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x4a037, "",8,0, "STA for tx class xon/xoff state""", "" )
   RDW_DEF("hi", 0x4c037, "red_hi6_STA_tx_class_xoff","STA for tx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x4c037, "",8,0, "STA for tx class xon/xoff state""", "" )
   RDW_DEF("hi", 0x4e037, "red_hi7_STA_tx_class_xoff","STA for tx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x4e037, "",8,0, "STA for tx class xon/xoff state""", "" )


   RDW_DEF("hi", 0x40038, "red_hi0_STA_rx_class_xoff","STA for rx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x40038, "",8,0, "STA for rx class xon/xoff state""", "" )
   RDW_DEF("hi", 0x42038, "red_hi1_STA_rx_class_xoff","STA for rx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x42038, "",8,0, "STA for rx class xon/xoff state""", "" )
   RDW_DEF("hi", 0x44038, "red_hi2_STA_rx_class_xoff","STA for rx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x44038, "",8,0, "STA for rx class xon/xoff state""", "" )
   RDW_DEF("hi", 0x46038, "red_hi3_STA_rx_class_xoff","STA for rx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x46038, "",8,0, "STA for rx class xon/xoff state""", "" )
   RDW_DEF("hi", 0x48038, "red_hi4_STA_rx_class_xoff","STA for rx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x48038, "",8,0, "STA for rx class xon/xoff state""", "" )
   RDW_DEF("hi", 0x4a038, "red_hi5_STA_rx_class_xoff","STA for rx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x4a038, "",8,0, "STA for rx class xon/xoff state""", "" )
   RDW_DEF("hi", 0x4c038, "red_hi6_STA_rx_class_xoff","STA for rx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x4c038, "",8,0, "STA for rx class xon/xoff state""", "" )
   RDW_DEF("hi", 0x4e038, "red_hi7_STA_rx_class_xoff","STA for rx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x4e038, "",8,0, "STA for rx class xon/xoff state""", "" )


   RDW_DEF("hi", 0x40039, "red_hi0_fcoe_qtag_rx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40039, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x40039, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x40039, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x40039, "rewrite_mode",18,16, " \\n0:  always strip. \nIf a tagged packet is received, strip the qtag.  \nIf a untagged packet is recieved, don't touch the packet.\n\nIf the pkt received is tagged use the received cos, dp else use default cos,\ndp for mapping to internal cos/queue.\n\n1:  always tag.   \nIf a tagged packet is received, don't touch the vlan field, map cos,dp to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos, dp for mapping to internal cos/queue.\n\n2:  always tag with default vlan.  \nIf a tagged packet is received, override the vlan field with the default vlan ,map {cos,dp} to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos,dp for mapping to internal cos/queue.\n\n3: untag default vlan .  \nIf a tagged packet is received and the received vlan == default vlan, \nthen untag the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, \ndon't touch the vlan\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\nIf the incoming packet has no qtag or if the qtag is being stripped\nthe vlan given out is zeroed for the my-mac checks.\n\n4: ptag mode. \nIf a tagged packet is received and the received vlan == default vlan, \nthen rewrite vlan with 0x000.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, don't touch the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\n5: pass thru.  \nForward the packet without modifications.  If the received packet is tagged, \nthen use the received cos,dp for mapping to internal cos/queue. Otherwise, use\nthe default cos,dp for mapping to internal cos/queue.""", "" )
   RDW_DEF("hi", 0x42039, "red_hi1_fcoe_qtag_rx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42039, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x42039, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x42039, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x42039, "rewrite_mode",18,16, " \\n0:  always strip. \nIf a tagged packet is received, strip the qtag.  \nIf a untagged packet is recieved, don't touch the packet.\n\nIf the pkt received is tagged use the received cos, dp else use default cos,\ndp for mapping to internal cos/queue.\n\n1:  always tag.   \nIf a tagged packet is received, don't touch the vlan field, map cos,dp to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos, dp for mapping to internal cos/queue.\n\n2:  always tag with default vlan.  \nIf a tagged packet is received, override the vlan field with the default vlan ,map {cos,dp} to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos,dp for mapping to internal cos/queue.\n\n3: untag default vlan .  \nIf a tagged packet is received and the received vlan == default vlan, \nthen untag the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, \ndon't touch the vlan\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\nIf the incoming packet has no qtag or if the qtag is being stripped\nthe vlan given out is zeroed for the my-mac checks.\n\n4: ptag mode. \nIf a tagged packet is received and the received vlan == default vlan, \nthen rewrite vlan with 0x000.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, don't touch the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\n5: pass thru.  \nForward the packet without modifications.  If the received packet is tagged, \nthen use the received cos,dp for mapping to internal cos/queue. Otherwise, use\nthe default cos,dp for mapping to internal cos/queue.""", "" )
   RDW_DEF("hi", 0x44039, "red_hi2_fcoe_qtag_rx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44039, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x44039, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x44039, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x44039, "rewrite_mode",18,16, " \\n0:  always strip. \nIf a tagged packet is received, strip the qtag.  \nIf a untagged packet is recieved, don't touch the packet.\n\nIf the pkt received is tagged use the received cos, dp else use default cos,\ndp for mapping to internal cos/queue.\n\n1:  always tag.   \nIf a tagged packet is received, don't touch the vlan field, map cos,dp to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos, dp for mapping to internal cos/queue.\n\n2:  always tag with default vlan.  \nIf a tagged packet is received, override the vlan field with the default vlan ,map {cos,dp} to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos,dp for mapping to internal cos/queue.\n\n3: untag default vlan .  \nIf a tagged packet is received and the received vlan == default vlan, \nthen untag the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, \ndon't touch the vlan\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\nIf the incoming packet has no qtag or if the qtag is being stripped\nthe vlan given out is zeroed for the my-mac checks.\n\n4: ptag mode. \nIf a tagged packet is received and the received vlan == default vlan, \nthen rewrite vlan with 0x000.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, don't touch the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\n5: pass thru.  \nForward the packet without modifications.  If the received packet is tagged, \nthen use the received cos,dp for mapping to internal cos/queue. Otherwise, use\nthe default cos,dp for mapping to internal cos/queue.""", "" )
   RDW_DEF("hi", 0x46039, "red_hi3_fcoe_qtag_rx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46039, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x46039, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x46039, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x46039, "rewrite_mode",18,16, " \\n0:  always strip. \nIf a tagged packet is received, strip the qtag.  \nIf a untagged packet is recieved, don't touch the packet.\n\nIf the pkt received is tagged use the received cos, dp else use default cos,\ndp for mapping to internal cos/queue.\n\n1:  always tag.   \nIf a tagged packet is received, don't touch the vlan field, map cos,dp to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos, dp for mapping to internal cos/queue.\n\n2:  always tag with default vlan.  \nIf a tagged packet is received, override the vlan field with the default vlan ,map {cos,dp} to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos,dp for mapping to internal cos/queue.\n\n3: untag default vlan .  \nIf a tagged packet is received and the received vlan == default vlan, \nthen untag the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, \ndon't touch the vlan\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\nIf the incoming packet has no qtag or if the qtag is being stripped\nthe vlan given out is zeroed for the my-mac checks.\n\n4: ptag mode. \nIf a tagged packet is received and the received vlan == default vlan, \nthen rewrite vlan with 0x000.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, don't touch the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\n5: pass thru.  \nForward the packet without modifications.  If the received packet is tagged, \nthen use the received cos,dp for mapping to internal cos/queue. Otherwise, use\nthe default cos,dp for mapping to internal cos/queue.""", "" )
   RDW_DEF("hi", 0x48039, "red_hi4_fcoe_qtag_rx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48039, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x48039, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x48039, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x48039, "rewrite_mode",18,16, " \\n0:  always strip. \nIf a tagged packet is received, strip the qtag.  \nIf a untagged packet is recieved, don't touch the packet.\n\nIf the pkt received is tagged use the received cos, dp else use default cos,\ndp for mapping to internal cos/queue.\n\n1:  always tag.   \nIf a tagged packet is received, don't touch the vlan field, map cos,dp to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos, dp for mapping to internal cos/queue.\n\n2:  always tag with default vlan.  \nIf a tagged packet is received, override the vlan field with the default vlan ,map {cos,dp} to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos,dp for mapping to internal cos/queue.\n\n3: untag default vlan .  \nIf a tagged packet is received and the received vlan == default vlan, \nthen untag the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, \ndon't touch the vlan\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\nIf the incoming packet has no qtag or if the qtag is being stripped\nthe vlan given out is zeroed for the my-mac checks.\n\n4: ptag mode. \nIf a tagged packet is received and the received vlan == default vlan, \nthen rewrite vlan with 0x000.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, don't touch the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\n5: pass thru.  \nForward the packet without modifications.  If the received packet is tagged, \nthen use the received cos,dp for mapping to internal cos/queue. Otherwise, use\nthe default cos,dp for mapping to internal cos/queue.""", "" )
   RDW_DEF("hi", 0x4a039, "red_hi5_fcoe_qtag_rx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a039, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x4a039, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x4a039, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x4a039, "rewrite_mode",18,16, " \\n0:  always strip. \nIf a tagged packet is received, strip the qtag.  \nIf a untagged packet is recieved, don't touch the packet.\n\nIf the pkt received is tagged use the received cos, dp else use default cos,\ndp for mapping to internal cos/queue.\n\n1:  always tag.   \nIf a tagged packet is received, don't touch the vlan field, map cos,dp to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos, dp for mapping to internal cos/queue.\n\n2:  always tag with default vlan.  \nIf a tagged packet is received, override the vlan field with the default vlan ,map {cos,dp} to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos,dp for mapping to internal cos/queue.\n\n3: untag default vlan .  \nIf a tagged packet is received and the received vlan == default vlan, \nthen untag the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, \ndon't touch the vlan\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\nIf the incoming packet has no qtag or if the qtag is being stripped\nthe vlan given out is zeroed for the my-mac checks.\n\n4: ptag mode. \nIf a tagged packet is received and the received vlan == default vlan, \nthen rewrite vlan with 0x000.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, don't touch the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\n5: pass thru.  \nForward the packet without modifications.  If the received packet is tagged, \nthen use the received cos,dp for mapping to internal cos/queue. Otherwise, use\nthe default cos,dp for mapping to internal cos/queue.""", "" )
   RDW_DEF("hi", 0x4c039, "red_hi6_fcoe_qtag_rx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c039, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x4c039, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x4c039, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x4c039, "rewrite_mode",18,16, " \\n0:  always strip. \nIf a tagged packet is received, strip the qtag.  \nIf a untagged packet is recieved, don't touch the packet.\n\nIf the pkt received is tagged use the received cos, dp else use default cos,\ndp for mapping to internal cos/queue.\n\n1:  always tag.   \nIf a tagged packet is received, don't touch the vlan field, map cos,dp to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos, dp for mapping to internal cos/queue.\n\n2:  always tag with default vlan.  \nIf a tagged packet is received, override the vlan field with the default vlan ,map {cos,dp} to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos,dp for mapping to internal cos/queue.\n\n3: untag default vlan .  \nIf a tagged packet is received and the received vlan == default vlan, \nthen untag the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, \ndon't touch the vlan\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\nIf the incoming packet has no qtag or if the qtag is being stripped\nthe vlan given out is zeroed for the my-mac checks.\n\n4: ptag mode. \nIf a tagged packet is received and the received vlan == default vlan, \nthen rewrite vlan with 0x000.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, don't touch the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\n5: pass thru.  \nForward the packet without modifications.  If the received packet is tagged, \nthen use the received cos,dp for mapping to internal cos/queue. Otherwise, use\nthe default cos,dp for mapping to internal cos/queue.""", "" )
   RDW_DEF("hi", 0x4e039, "red_hi7_fcoe_qtag_rx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e039, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x4e039, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x4e039, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x4e039, "rewrite_mode",18,16, " \\n0:  always strip. \nIf a tagged packet is received, strip the qtag.  \nIf a untagged packet is recieved, don't touch the packet.\n\nIf the pkt received is tagged use the received cos, dp else use default cos,\ndp for mapping to internal cos/queue.\n\n1:  always tag.   \nIf a tagged packet is received, don't touch the vlan field, map cos,dp to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos, dp for mapping to internal cos/queue.\n\n2:  always tag with default vlan.  \nIf a tagged packet is received, override the vlan field with the default vlan ,map {cos,dp} to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos,dp for mapping to internal cos/queue.\n\n3: untag default vlan .  \nIf a tagged packet is received and the received vlan == default vlan, \nthen untag the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, \ndon't touch the vlan\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\nIf the incoming packet has no qtag or if the qtag is being stripped\nthe vlan given out is zeroed for the my-mac checks.\n\n4: ptag mode. \nIf a tagged packet is received and the received vlan == default vlan, \nthen rewrite vlan with 0x000.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, don't touch the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\n5: pass thru.  \nForward the packet without modifications.  If the received packet is tagged, \nthen use the received cos,dp for mapping to internal cos/queue. Otherwise, use\nthe default cos,dp for mapping to internal cos/queue.""", "" )


   RDW_DEF("hi", 0x4003a, "red_hi0_fcoe_qtag_tx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4003a, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x4003a, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x4003a, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x4003a, "rewrite_mode",18,16, " see fcoe_qtag_rx rewrite field for rewrite rules""", "" )
   RDW_DEF("hi", 0x4203a, "red_hi1_fcoe_qtag_tx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4203a, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x4203a, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x4203a, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x4203a, "rewrite_mode",18,16, " see fcoe_qtag_rx rewrite field for rewrite rules""", "" )
   RDW_DEF("hi", 0x4403a, "red_hi2_fcoe_qtag_tx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4403a, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x4403a, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x4403a, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x4403a, "rewrite_mode",18,16, " see fcoe_qtag_rx rewrite field for rewrite rules""", "" )
   RDW_DEF("hi", 0x4603a, "red_hi3_fcoe_qtag_tx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4603a, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x4603a, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x4603a, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x4603a, "rewrite_mode",18,16, " see fcoe_qtag_rx rewrite field for rewrite rules""", "" )
   RDW_DEF("hi", 0x4803a, "red_hi4_fcoe_qtag_tx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4803a, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x4803a, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x4803a, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x4803a, "rewrite_mode",18,16, " see fcoe_qtag_rx rewrite field for rewrite rules""", "" )
   RDW_DEF("hi", 0x4a03a, "red_hi5_fcoe_qtag_tx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a03a, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x4a03a, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x4a03a, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x4a03a, "rewrite_mode",18,16, " see fcoe_qtag_rx rewrite field for rewrite rules""", "" )
   RDW_DEF("hi", 0x4c03a, "red_hi6_fcoe_qtag_tx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c03a, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x4c03a, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x4c03a, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x4c03a, "rewrite_mode",18,16, " see fcoe_qtag_rx rewrite field for rewrite rules""", "" )
   RDW_DEF("hi", 0x4e03a, "red_hi7_fcoe_qtag_tx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e03a, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x4e03a, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x4e03a, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x4e03a, "rewrite_mode",18,16, " see fcoe_qtag_rx rewrite field for rewrite rules""", "" )


   RDW_DEF("hi", 0x4003c, "red_hi0_fcoe_rx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x4003c, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x4003d, "red_hi0_fcoe_rx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x4003d, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x4203c, "red_hi1_fcoe_rx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x4203c, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x4203d, "red_hi1_fcoe_rx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x4203d, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x4403c, "red_hi2_fcoe_rx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x4403c, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x4403d, "red_hi2_fcoe_rx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x4403d, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x4603c, "red_hi3_fcoe_rx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x4603c, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x4603d, "red_hi3_fcoe_rx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x4603d, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x4803c, "red_hi4_fcoe_rx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x4803c, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x4803d, "red_hi4_fcoe_rx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x4803d, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x4a03c, "red_hi5_fcoe_rx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x4a03c, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x4a03d, "red_hi5_fcoe_rx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x4a03d, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x4c03c, "red_hi6_fcoe_rx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x4c03c, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x4c03d, "red_hi6_fcoe_rx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x4c03d, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x4e03c, "red_hi7_fcoe_rx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x4e03c, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x4e03d, "red_hi7_fcoe_rx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x4e03d, "_01",31,0, "", "" )


   RDW_DEF("hi", 0x4003e, "red_hi0_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4003e, "",31,0, "", "" )
   RDW_DEF("hi", 0x4203e, "red_hi1_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4203e, "",31,0, "", "" )
   RDW_DEF("hi", 0x4403e, "red_hi2_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4403e, "",31,0, "", "" )
   RDW_DEF("hi", 0x4603e, "red_hi3_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4603e, "",31,0, "", "" )
   RDW_DEF("hi", 0x4803e, "red_hi4_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4803e, "",31,0, "", "" )
   RDW_DEF("hi", 0x4a03e, "red_hi5_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a03e, "",31,0, "", "" )
   RDW_DEF("hi", 0x4c03e, "red_hi6_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c03e, "",31,0, "", "" )
   RDW_DEF("hi", 0x4e03e, "red_hi7_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e03e, "",31,0, "", "" )


   RDW_DEF("hi", 0x40040, "red_hi0_fcoe_tx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x40040, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x40041, "red_hi0_fcoe_tx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x40041, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x42040, "red_hi1_fcoe_tx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x42040, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x42041, "red_hi1_fcoe_tx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x42041, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x44040, "red_hi2_fcoe_tx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x44040, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x44041, "red_hi2_fcoe_tx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x44041, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x46040, "red_hi3_fcoe_tx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x46040, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x46041, "red_hi3_fcoe_tx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x46041, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x48040, "red_hi4_fcoe_tx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x48040, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x48041, "red_hi4_fcoe_tx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x48041, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x4a040, "red_hi5_fcoe_tx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x4a040, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x4a041, "red_hi5_fcoe_tx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x4a041, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x4c040, "red_hi6_fcoe_tx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x4c040, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x4c041, "red_hi6_fcoe_tx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x4c041, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x4e040, "red_hi7_fcoe_tx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x4e040, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x4e041, "red_hi7_fcoe_tx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x4e041, "_01",31,0, "", "" )


   RDW_DEF("hi", 0x40042, "red_hi0_non_fcoe_qtag_rx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40042, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x40042, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x40042, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x40042, "rewrite_mode",18,16, " \\n0:  always strip. \nIf a tagged packet is received, strip the qtag.  \nIf a untagged packet is recieved, don't touch the packet.\n\nIf the pkt received is tagged use the received cos, dp else use default cos,\ndp for mapping to internal cos/queue.\n\n1:  always tag.   \nIf a tagged packet is received, don't touch the vlan field, map cos,dp to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos, dp for mapping to internal cos/queue.\n\n2:  always tag with default vlan.  \nIf a tagged packet is received, override the vlan field with the default vlan ,map {cos,dp} to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos,dp for mapping to internal cos/queue.\n\n3: untag default vlan .  \nIf a tagged packet is received and the received vlan == default vlan, \nthen untag the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, \ndon't touch the vlan\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\nIf the incoming packet has no qtag or if the qtag is being stripped\nthe vlan given out is zeroed for the my-mac checks.\n\n4: ptag mode. \nIf a tagged packet is received and the received vlan == default vlan, \nthen rewrite vlan with 0x000.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, don't touch the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\n5: pass thru.  \nForward the packet without modifications.  If the received packet is tagged, \nthen use the received cos,dp for mapping to internal cos/queue. Otherwise, use\nthe default cos,dp for mapping to internal cos/queue.""", "" )
   RDW_DEF("hi", 0x42042, "red_hi1_non_fcoe_qtag_rx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42042, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x42042, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x42042, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x42042, "rewrite_mode",18,16, " \\n0:  always strip. \nIf a tagged packet is received, strip the qtag.  \nIf a untagged packet is recieved, don't touch the packet.\n\nIf the pkt received is tagged use the received cos, dp else use default cos,\ndp for mapping to internal cos/queue.\n\n1:  always tag.   \nIf a tagged packet is received, don't touch the vlan field, map cos,dp to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos, dp for mapping to internal cos/queue.\n\n2:  always tag with default vlan.  \nIf a tagged packet is received, override the vlan field with the default vlan ,map {cos,dp} to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos,dp for mapping to internal cos/queue.\n\n3: untag default vlan .  \nIf a tagged packet is received and the received vlan == default vlan, \nthen untag the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, \ndon't touch the vlan\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\nIf the incoming packet has no qtag or if the qtag is being stripped\nthe vlan given out is zeroed for the my-mac checks.\n\n4: ptag mode. \nIf a tagged packet is received and the received vlan == default vlan, \nthen rewrite vlan with 0x000.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, don't touch the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\n5: pass thru.  \nForward the packet without modifications.  If the received packet is tagged, \nthen use the received cos,dp for mapping to internal cos/queue. Otherwise, use\nthe default cos,dp for mapping to internal cos/queue.""", "" )
   RDW_DEF("hi", 0x44042, "red_hi2_non_fcoe_qtag_rx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44042, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x44042, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x44042, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x44042, "rewrite_mode",18,16, " \\n0:  always strip. \nIf a tagged packet is received, strip the qtag.  \nIf a untagged packet is recieved, don't touch the packet.\n\nIf the pkt received is tagged use the received cos, dp else use default cos,\ndp for mapping to internal cos/queue.\n\n1:  always tag.   \nIf a tagged packet is received, don't touch the vlan field, map cos,dp to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos, dp for mapping to internal cos/queue.\n\n2:  always tag with default vlan.  \nIf a tagged packet is received, override the vlan field with the default vlan ,map {cos,dp} to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos,dp for mapping to internal cos/queue.\n\n3: untag default vlan .  \nIf a tagged packet is received and the received vlan == default vlan, \nthen untag the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, \ndon't touch the vlan\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\nIf the incoming packet has no qtag or if the qtag is being stripped\nthe vlan given out is zeroed for the my-mac checks.\n\n4: ptag mode. \nIf a tagged packet is received and the received vlan == default vlan, \nthen rewrite vlan with 0x000.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, don't touch the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\n5: pass thru.  \nForward the packet without modifications.  If the received packet is tagged, \nthen use the received cos,dp for mapping to internal cos/queue. Otherwise, use\nthe default cos,dp for mapping to internal cos/queue.""", "" )
   RDW_DEF("hi", 0x46042, "red_hi3_non_fcoe_qtag_rx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46042, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x46042, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x46042, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x46042, "rewrite_mode",18,16, " \\n0:  always strip. \nIf a tagged packet is received, strip the qtag.  \nIf a untagged packet is recieved, don't touch the packet.\n\nIf the pkt received is tagged use the received cos, dp else use default cos,\ndp for mapping to internal cos/queue.\n\n1:  always tag.   \nIf a tagged packet is received, don't touch the vlan field, map cos,dp to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos, dp for mapping to internal cos/queue.\n\n2:  always tag with default vlan.  \nIf a tagged packet is received, override the vlan field with the default vlan ,map {cos,dp} to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos,dp for mapping to internal cos/queue.\n\n3: untag default vlan .  \nIf a tagged packet is received and the received vlan == default vlan, \nthen untag the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, \ndon't touch the vlan\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\nIf the incoming packet has no qtag or if the qtag is being stripped\nthe vlan given out is zeroed for the my-mac checks.\n\n4: ptag mode. \nIf a tagged packet is received and the received vlan == default vlan, \nthen rewrite vlan with 0x000.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, don't touch the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\n5: pass thru.  \nForward the packet without modifications.  If the received packet is tagged, \nthen use the received cos,dp for mapping to internal cos/queue. Otherwise, use\nthe default cos,dp for mapping to internal cos/queue.""", "" )
   RDW_DEF("hi", 0x48042, "red_hi4_non_fcoe_qtag_rx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48042, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x48042, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x48042, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x48042, "rewrite_mode",18,16, " \\n0:  always strip. \nIf a tagged packet is received, strip the qtag.  \nIf a untagged packet is recieved, don't touch the packet.\n\nIf the pkt received is tagged use the received cos, dp else use default cos,\ndp for mapping to internal cos/queue.\n\n1:  always tag.   \nIf a tagged packet is received, don't touch the vlan field, map cos,dp to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos, dp for mapping to internal cos/queue.\n\n2:  always tag with default vlan.  \nIf a tagged packet is received, override the vlan field with the default vlan ,map {cos,dp} to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos,dp for mapping to internal cos/queue.\n\n3: untag default vlan .  \nIf a tagged packet is received and the received vlan == default vlan, \nthen untag the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, \ndon't touch the vlan\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\nIf the incoming packet has no qtag or if the qtag is being stripped\nthe vlan given out is zeroed for the my-mac checks.\n\n4: ptag mode. \nIf a tagged packet is received and the received vlan == default vlan, \nthen rewrite vlan with 0x000.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, don't touch the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\n5: pass thru.  \nForward the packet without modifications.  If the received packet is tagged, \nthen use the received cos,dp for mapping to internal cos/queue. Otherwise, use\nthe default cos,dp for mapping to internal cos/queue.""", "" )
   RDW_DEF("hi", 0x4a042, "red_hi5_non_fcoe_qtag_rx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a042, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x4a042, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x4a042, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x4a042, "rewrite_mode",18,16, " \\n0:  always strip. \nIf a tagged packet is received, strip the qtag.  \nIf a untagged packet is recieved, don't touch the packet.\n\nIf the pkt received is tagged use the received cos, dp else use default cos,\ndp for mapping to internal cos/queue.\n\n1:  always tag.   \nIf a tagged packet is received, don't touch the vlan field, map cos,dp to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos, dp for mapping to internal cos/queue.\n\n2:  always tag with default vlan.  \nIf a tagged packet is received, override the vlan field with the default vlan ,map {cos,dp} to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos,dp for mapping to internal cos/queue.\n\n3: untag default vlan .  \nIf a tagged packet is received and the received vlan == default vlan, \nthen untag the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, \ndon't touch the vlan\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\nIf the incoming packet has no qtag or if the qtag is being stripped\nthe vlan given out is zeroed for the my-mac checks.\n\n4: ptag mode. \nIf a tagged packet is received and the received vlan == default vlan, \nthen rewrite vlan with 0x000.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, don't touch the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\n5: pass thru.  \nForward the packet without modifications.  If the received packet is tagged, \nthen use the received cos,dp for mapping to internal cos/queue. Otherwise, use\nthe default cos,dp for mapping to internal cos/queue.""", "" )
   RDW_DEF("hi", 0x4c042, "red_hi6_non_fcoe_qtag_rx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c042, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x4c042, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x4c042, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x4c042, "rewrite_mode",18,16, " \\n0:  always strip. \nIf a tagged packet is received, strip the qtag.  \nIf a untagged packet is recieved, don't touch the packet.\n\nIf the pkt received is tagged use the received cos, dp else use default cos,\ndp for mapping to internal cos/queue.\n\n1:  always tag.   \nIf a tagged packet is received, don't touch the vlan field, map cos,dp to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos, dp for mapping to internal cos/queue.\n\n2:  always tag with default vlan.  \nIf a tagged packet is received, override the vlan field with the default vlan ,map {cos,dp} to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos,dp for mapping to internal cos/queue.\n\n3: untag default vlan .  \nIf a tagged packet is received and the received vlan == default vlan, \nthen untag the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, \ndon't touch the vlan\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\nIf the incoming packet has no qtag or if the qtag is being stripped\nthe vlan given out is zeroed for the my-mac checks.\n\n4: ptag mode. \nIf a tagged packet is received and the received vlan == default vlan, \nthen rewrite vlan with 0x000.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, don't touch the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\n5: pass thru.  \nForward the packet without modifications.  If the received packet is tagged, \nthen use the received cos,dp for mapping to internal cos/queue. Otherwise, use\nthe default cos,dp for mapping to internal cos/queue.""", "" )
   RDW_DEF("hi", 0x4e042, "red_hi7_non_fcoe_qtag_rx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e042, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x4e042, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x4e042, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x4e042, "rewrite_mode",18,16, " \\n0:  always strip. \nIf a tagged packet is received, strip the qtag.  \nIf a untagged packet is recieved, don't touch the packet.\n\nIf the pkt received is tagged use the received cos, dp else use default cos,\ndp for mapping to internal cos/queue.\n\n1:  always tag.   \nIf a tagged packet is received, don't touch the vlan field, map cos,dp to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos, dp for mapping to internal cos/queue.\n\n2:  always tag with default vlan.  \nIf a tagged packet is received, override the vlan field with the default vlan ,map {cos,dp} to internal {cos,dp}.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a untagged packet is received, tag the packet with default vlan,cos,dp.\nUse the default cos,dp for mapping to internal cos/queue.\n\n3: untag default vlan .  \nIf a tagged packet is received and the received vlan == default vlan, \nthen untag the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, \ndon't touch the vlan\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\nIf the incoming packet has no qtag or if the qtag is being stripped\nthe vlan given out is zeroed for the my-mac checks.\n\n4: ptag mode. \nIf a tagged packet is received and the received vlan == default vlan, \nthen rewrite vlan with 0x000.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf a tagged packet is received and the received vlan != default vlan, don't touch the frame.\nUse the received cos,dp for mapping to internal cos/queue.\n\nIf an untagged packet is received, don't touch the frame.\nUse the default cos,dp for mapping to internal cos/queue.\n\n5: pass thru.  \nForward the packet without modifications.  If the received packet is tagged, \nthen use the received cos,dp for mapping to internal cos/queue. Otherwise, use\nthe default cos,dp for mapping to internal cos/queue.""", "" )


   RDW_DEF("hi", 0x40043, "red_hi0_non_fcoe_qtag_tx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40043, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x40043, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x40043, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x40043, "rewrite_mode",18,16, " see non_fcoe_qtag_rx rewrite field for rewrite rules""", "" )
   RDW_DEF("hi", 0x42043, "red_hi1_non_fcoe_qtag_tx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42043, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x42043, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x42043, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x42043, "rewrite_mode",18,16, " see non_fcoe_qtag_rx rewrite field for rewrite rules""", "" )
   RDW_DEF("hi", 0x44043, "red_hi2_non_fcoe_qtag_tx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44043, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x44043, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x44043, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x44043, "rewrite_mode",18,16, " see non_fcoe_qtag_rx rewrite field for rewrite rules""", "" )
   RDW_DEF("hi", 0x46043, "red_hi3_non_fcoe_qtag_tx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46043, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x46043, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x46043, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x46043, "rewrite_mode",18,16, " see non_fcoe_qtag_rx rewrite field for rewrite rules""", "" )
   RDW_DEF("hi", 0x48043, "red_hi4_non_fcoe_qtag_tx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48043, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x48043, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x48043, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x48043, "rewrite_mode",18,16, " see non_fcoe_qtag_rx rewrite field for rewrite rules""", "" )
   RDW_DEF("hi", 0x4a043, "red_hi5_non_fcoe_qtag_tx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a043, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x4a043, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x4a043, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x4a043, "rewrite_mode",18,16, " see non_fcoe_qtag_rx rewrite field for rewrite rules""", "" )
   RDW_DEF("hi", 0x4c043, "red_hi6_non_fcoe_qtag_tx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c043, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x4c043, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x4c043, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x4c043, "rewrite_mode",18,16, " see non_fcoe_qtag_rx rewrite field for rewrite rules""", "" )
   RDW_DEF("hi", 0x4e043, "red_hi7_non_fcoe_qtag_tx","", 0x7ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e043, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x4e043, "default_dp",3,3, "", "" )
   RDW_DEF_FLD( 0x4e043, "default_vlan",15,4, "", "" )
   RDW_DEF_FLD( 0x4e043, "rewrite_mode",18,16, " see non_fcoe_qtag_rx rewrite field for rewrite rules""", "" )


   RDW_DEF("hi", 0x40044, "red_hi0_non_fcoe_rx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x40044, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x40045, "red_hi0_non_fcoe_rx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x40045, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x42044, "red_hi1_non_fcoe_rx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x42044, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x42045, "red_hi1_non_fcoe_rx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x42045, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x44044, "red_hi2_non_fcoe_rx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x44044, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x44045, "red_hi2_non_fcoe_rx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x44045, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x46044, "red_hi3_non_fcoe_rx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x46044, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x46045, "red_hi3_non_fcoe_rx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x46045, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x48044, "red_hi4_non_fcoe_rx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x48044, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x48045, "red_hi4_non_fcoe_rx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x48045, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x4a044, "red_hi5_non_fcoe_rx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x4a044, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x4a045, "red_hi5_non_fcoe_rx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x4a045, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x4c044, "red_hi6_non_fcoe_rx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x4c044, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x4c045, "red_hi6_non_fcoe_rx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x4c045, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x4e044, "red_hi7_non_fcoe_rx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x4e044, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x4e045, "red_hi7_non_fcoe_rx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x4e045, "_01",31,0, "", "" )


   RDW_DEF("hi", 0x40046, "red_hi0_non_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40046, "",31,0, "", "" )
   RDW_DEF("hi", 0x42046, "red_hi1_non_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42046, "",31,0, "", "" )
   RDW_DEF("hi", 0x44046, "red_hi2_non_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44046, "",31,0, "", "" )
   RDW_DEF("hi", 0x46046, "red_hi3_non_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46046, "",31,0, "", "" )
   RDW_DEF("hi", 0x48046, "red_hi4_non_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48046, "",31,0, "", "" )
   RDW_DEF("hi", 0x4a046, "red_hi5_non_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a046, "",31,0, "", "" )
   RDW_DEF("hi", 0x4c046, "red_hi6_non_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c046, "",31,0, "", "" )
   RDW_DEF("hi", 0x4e046, "red_hi7_non_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e046, "",31,0, "", "" )


   RDW_DEF("hi", 0x40048, "red_hi0_non_fcoe_tx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x40048, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x40049, "red_hi0_non_fcoe_tx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x40049, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x42048, "red_hi1_non_fcoe_tx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x42048, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x42049, "red_hi1_non_fcoe_tx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x42049, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x44048, "red_hi2_non_fcoe_tx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x44048, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x44049, "red_hi2_non_fcoe_tx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x44049, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x46048, "red_hi3_non_fcoe_tx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x46048, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x46049, "red_hi3_non_fcoe_tx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x46049, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x48048, "red_hi4_non_fcoe_tx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x48048, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x48049, "red_hi4_non_fcoe_tx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x48049, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x4a048, "red_hi5_non_fcoe_tx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x4a048, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x4a049, "red_hi5_non_fcoe_tx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x4a049, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x4c048, "red_hi6_non_fcoe_tx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x4c048, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x4c049, "red_hi6_non_fcoe_tx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x4c049, "_01",31,0, "", "" )
   RDW_DEF("hi", 0x4e048, "red_hi7_non_fcoe_tx_cos_map","", 0xffffffff, 0x76543210, "cfg")
   RDW_DEF_FLD( 0x4e048, "_00",31,0, "", "" )
   RDW_DEF("hi", 0x4e049, "red_hi7_non_fcoe_tx_cos_map","", 0xffffffff, 0xfedcba98, "cfg")
   RDW_DEF_FLD( 0x4e049, "_01",31,0, "", "" )


   RDW_DEF("hi", 0x4004a, "red_hi0_flow_control_q2cos_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4004a, "",31,0, "q2cos mapping to translate the xoff from the switch queues(nr/hr_ci_xoff) to the appropriate class""", "" )
   RDW_DEF("hi", 0x4204a, "red_hi1_flow_control_q2cos_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4204a, "",31,0, "q2cos mapping to translate the xoff from the switch queues(nr/hr_ci_xoff) to the appropriate class""", "" )
   RDW_DEF("hi", 0x4404a, "red_hi2_flow_control_q2cos_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4404a, "",31,0, "q2cos mapping to translate the xoff from the switch queues(nr/hr_ci_xoff) to the appropriate class""", "" )
   RDW_DEF("hi", 0x4604a, "red_hi3_flow_control_q2cos_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4604a, "",31,0, "q2cos mapping to translate the xoff from the switch queues(nr/hr_ci_xoff) to the appropriate class""", "" )
   RDW_DEF("hi", 0x4804a, "red_hi4_flow_control_q2cos_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4804a, "",31,0, "q2cos mapping to translate the xoff from the switch queues(nr/hr_ci_xoff) to the appropriate class""", "" )
   RDW_DEF("hi", 0x4a04a, "red_hi5_flow_control_q2cos_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a04a, "",31,0, "q2cos mapping to translate the xoff from the switch queues(nr/hr_ci_xoff) to the appropriate class""", "" )
   RDW_DEF("hi", 0x4c04a, "red_hi6_flow_control_q2cos_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c04a, "",31,0, "q2cos mapping to translate the xoff from the switch queues(nr/hr_ci_xoff) to the appropriate class""", "" )
   RDW_DEF("hi", 0x4e04a, "red_hi7_flow_control_q2cos_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e04a, "",31,0, "q2cos mapping to translate the xoff from the switch queues(nr/hr_ci_xoff) to the appropriate class""", "" )


   RDW_DEF("hi", 0x4004b, "red_hi0_flow_control_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4004b, "",31,0, "cos2q mapping to translate the xoff from the received ause frame to the switch queues(ci_nr/hr_xoff)""", "" )
   RDW_DEF("hi", 0x4204b, "red_hi1_flow_control_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4204b, "",31,0, "cos2q mapping to translate the xoff from the received ause frame to the switch queues(ci_nr/hr_xoff)""", "" )
   RDW_DEF("hi", 0x4404b, "red_hi2_flow_control_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4404b, "",31,0, "cos2q mapping to translate the xoff from the received ause frame to the switch queues(ci_nr/hr_xoff)""", "" )
   RDW_DEF("hi", 0x4604b, "red_hi3_flow_control_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4604b, "",31,0, "cos2q mapping to translate the xoff from the received ause frame to the switch queues(ci_nr/hr_xoff)""", "" )
   RDW_DEF("hi", 0x4804b, "red_hi4_flow_control_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4804b, "",31,0, "cos2q mapping to translate the xoff from the received ause frame to the switch queues(ci_nr/hr_xoff)""", "" )
   RDW_DEF("hi", 0x4a04b, "red_hi5_flow_control_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a04b, "",31,0, "cos2q mapping to translate the xoff from the received ause frame to the switch queues(ci_nr/hr_xoff)""", "" )
   RDW_DEF("hi", 0x4c04b, "red_hi6_flow_control_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c04b, "",31,0, "cos2q mapping to translate the xoff from the received ause frame to the switch queues(ci_nr/hr_xoff)""", "" )
   RDW_DEF("hi", 0x4e04b, "red_hi7_flow_control_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e04b, "",31,0, "cos2q mapping to translate the xoff from the received ause frame to the switch queues(ci_nr/hr_xoff)""", "" )


   RDW_DEF("hi", 0x4004c, "red_hi0_cfg_pause","pause configuration""", 0xffffff, 0xc00000, "cfg")
   RDW_DEF_FLD( 0x4004c, "tx_wfc_en",0,0, "word flow control tx en""", "" )
   RDW_DEF_FLD( 0x4004c, "tx_pfc_en",1,1, "802.3x pause tx en""", "" )
   RDW_DEF_FLD( 0x4004c, "tx_cfc_en",9,2, "priority pause tx en""", "" )
   RDW_DEF_FLD( 0x4004c, "rx_wfc_en",10,10, "word flow control rx en""", "" )
   RDW_DEF_FLD( 0x4004c, "rx_pfc_en",11,11, "802.3x pause rx en""", "" )
   RDW_DEF_FLD( 0x4004c, "rx_cfc_en",19,12, "priority pause rx en""", "" )
   RDW_DEF_FLD( 0x4004c, "fc_timer_only",20,20, "xoff timer sample mode only""", "" )
   RDW_DEF_FLD( 0x4004c, "rx_ucast_en",21,21, "rx ucast pause enable""", "" )
   RDW_DEF_FLD( 0x4004c, "rx_mc_drop_en",22,22, "rx mc control frame enable""", "" )
   RDW_DEF_FLD( 0x4004c, "seq_type",23,23, "seq type for special control word""", "" )
   RDW_DEF("hi", 0x4204c, "red_hi1_cfg_pause","pause configuration""", 0xffffff, 0xc00000, "cfg")
   RDW_DEF_FLD( 0x4204c, "tx_wfc_en",0,0, "word flow control tx en""", "" )
   RDW_DEF_FLD( 0x4204c, "tx_pfc_en",1,1, "802.3x pause tx en""", "" )
   RDW_DEF_FLD( 0x4204c, "tx_cfc_en",9,2, "priority pause tx en""", "" )
   RDW_DEF_FLD( 0x4204c, "rx_wfc_en",10,10, "word flow control rx en""", "" )
   RDW_DEF_FLD( 0x4204c, "rx_pfc_en",11,11, "802.3x pause rx en""", "" )
   RDW_DEF_FLD( 0x4204c, "rx_cfc_en",19,12, "priority pause rx en""", "" )
   RDW_DEF_FLD( 0x4204c, "fc_timer_only",20,20, "xoff timer sample mode only""", "" )
   RDW_DEF_FLD( 0x4204c, "rx_ucast_en",21,21, "rx ucast pause enable""", "" )
   RDW_DEF_FLD( 0x4204c, "rx_mc_drop_en",22,22, "rx mc control frame enable""", "" )
   RDW_DEF_FLD( 0x4204c, "seq_type",23,23, "seq type for special control word""", "" )
   RDW_DEF("hi", 0x4404c, "red_hi2_cfg_pause","pause configuration""", 0xffffff, 0xc00000, "cfg")
   RDW_DEF_FLD( 0x4404c, "tx_wfc_en",0,0, "word flow control tx en""", "" )
   RDW_DEF_FLD( 0x4404c, "tx_pfc_en",1,1, "802.3x pause tx en""", "" )
   RDW_DEF_FLD( 0x4404c, "tx_cfc_en",9,2, "priority pause tx en""", "" )
   RDW_DEF_FLD( 0x4404c, "rx_wfc_en",10,10, "word flow control rx en""", "" )
   RDW_DEF_FLD( 0x4404c, "rx_pfc_en",11,11, "802.3x pause rx en""", "" )
   RDW_DEF_FLD( 0x4404c, "rx_cfc_en",19,12, "priority pause rx en""", "" )
   RDW_DEF_FLD( 0x4404c, "fc_timer_only",20,20, "xoff timer sample mode only""", "" )
   RDW_DEF_FLD( 0x4404c, "rx_ucast_en",21,21, "rx ucast pause enable""", "" )
   RDW_DEF_FLD( 0x4404c, "rx_mc_drop_en",22,22, "rx mc control frame enable""", "" )
   RDW_DEF_FLD( 0x4404c, "seq_type",23,23, "seq type for special control word""", "" )
   RDW_DEF("hi", 0x4604c, "red_hi3_cfg_pause","pause configuration""", 0xffffff, 0xc00000, "cfg")
   RDW_DEF_FLD( 0x4604c, "tx_wfc_en",0,0, "word flow control tx en""", "" )
   RDW_DEF_FLD( 0x4604c, "tx_pfc_en",1,1, "802.3x pause tx en""", "" )
   RDW_DEF_FLD( 0x4604c, "tx_cfc_en",9,2, "priority pause tx en""", "" )
   RDW_DEF_FLD( 0x4604c, "rx_wfc_en",10,10, "word flow control rx en""", "" )
   RDW_DEF_FLD( 0x4604c, "rx_pfc_en",11,11, "802.3x pause rx en""", "" )
   RDW_DEF_FLD( 0x4604c, "rx_cfc_en",19,12, "priority pause rx en""", "" )
   RDW_DEF_FLD( 0x4604c, "fc_timer_only",20,20, "xoff timer sample mode only""", "" )
   RDW_DEF_FLD( 0x4604c, "rx_ucast_en",21,21, "rx ucast pause enable""", "" )
   RDW_DEF_FLD( 0x4604c, "rx_mc_drop_en",22,22, "rx mc control frame enable""", "" )
   RDW_DEF_FLD( 0x4604c, "seq_type",23,23, "seq type for special control word""", "" )
   RDW_DEF("hi", 0x4804c, "red_hi4_cfg_pause","pause configuration""", 0xffffff, 0xc00000, "cfg")
   RDW_DEF_FLD( 0x4804c, "tx_wfc_en",0,0, "word flow control tx en""", "" )
   RDW_DEF_FLD( 0x4804c, "tx_pfc_en",1,1, "802.3x pause tx en""", "" )
   RDW_DEF_FLD( 0x4804c, "tx_cfc_en",9,2, "priority pause tx en""", "" )
   RDW_DEF_FLD( 0x4804c, "rx_wfc_en",10,10, "word flow control rx en""", "" )
   RDW_DEF_FLD( 0x4804c, "rx_pfc_en",11,11, "802.3x pause rx en""", "" )
   RDW_DEF_FLD( 0x4804c, "rx_cfc_en",19,12, "priority pause rx en""", "" )
   RDW_DEF_FLD( 0x4804c, "fc_timer_only",20,20, "xoff timer sample mode only""", "" )
   RDW_DEF_FLD( 0x4804c, "rx_ucast_en",21,21, "rx ucast pause enable""", "" )
   RDW_DEF_FLD( 0x4804c, "rx_mc_drop_en",22,22, "rx mc control frame enable""", "" )
   RDW_DEF_FLD( 0x4804c, "seq_type",23,23, "seq type for special control word""", "" )
   RDW_DEF("hi", 0x4a04c, "red_hi5_cfg_pause","pause configuration""", 0xffffff, 0xc00000, "cfg")
   RDW_DEF_FLD( 0x4a04c, "tx_wfc_en",0,0, "word flow control tx en""", "" )
   RDW_DEF_FLD( 0x4a04c, "tx_pfc_en",1,1, "802.3x pause tx en""", "" )
   RDW_DEF_FLD( 0x4a04c, "tx_cfc_en",9,2, "priority pause tx en""", "" )
   RDW_DEF_FLD( 0x4a04c, "rx_wfc_en",10,10, "word flow control rx en""", "" )
   RDW_DEF_FLD( 0x4a04c, "rx_pfc_en",11,11, "802.3x pause rx en""", "" )
   RDW_DEF_FLD( 0x4a04c, "rx_cfc_en",19,12, "priority pause rx en""", "" )
   RDW_DEF_FLD( 0x4a04c, "fc_timer_only",20,20, "xoff timer sample mode only""", "" )
   RDW_DEF_FLD( 0x4a04c, "rx_ucast_en",21,21, "rx ucast pause enable""", "" )
   RDW_DEF_FLD( 0x4a04c, "rx_mc_drop_en",22,22, "rx mc control frame enable""", "" )
   RDW_DEF_FLD( 0x4a04c, "seq_type",23,23, "seq type for special control word""", "" )
   RDW_DEF("hi", 0x4c04c, "red_hi6_cfg_pause","pause configuration""", 0xffffff, 0xc00000, "cfg")
   RDW_DEF_FLD( 0x4c04c, "tx_wfc_en",0,0, "word flow control tx en""", "" )
   RDW_DEF_FLD( 0x4c04c, "tx_pfc_en",1,1, "802.3x pause tx en""", "" )
   RDW_DEF_FLD( 0x4c04c, "tx_cfc_en",9,2, "priority pause tx en""", "" )
   RDW_DEF_FLD( 0x4c04c, "rx_wfc_en",10,10, "word flow control rx en""", "" )
   RDW_DEF_FLD( 0x4c04c, "rx_pfc_en",11,11, "802.3x pause rx en""", "" )
   RDW_DEF_FLD( 0x4c04c, "rx_cfc_en",19,12, "priority pause rx en""", "" )
   RDW_DEF_FLD( 0x4c04c, "fc_timer_only",20,20, "xoff timer sample mode only""", "" )
   RDW_DEF_FLD( 0x4c04c, "rx_ucast_en",21,21, "rx ucast pause enable""", "" )
   RDW_DEF_FLD( 0x4c04c, "rx_mc_drop_en",22,22, "rx mc control frame enable""", "" )
   RDW_DEF_FLD( 0x4c04c, "seq_type",23,23, "seq type for special control word""", "" )
   RDW_DEF("hi", 0x4e04c, "red_hi7_cfg_pause","pause configuration""", 0xffffff, 0xc00000, "cfg")
   RDW_DEF_FLD( 0x4e04c, "tx_wfc_en",0,0, "word flow control tx en""", "" )
   RDW_DEF_FLD( 0x4e04c, "tx_pfc_en",1,1, "802.3x pause tx en""", "" )
   RDW_DEF_FLD( 0x4e04c, "tx_cfc_en",9,2, "priority pause tx en""", "" )
   RDW_DEF_FLD( 0x4e04c, "rx_wfc_en",10,10, "word flow control rx en""", "" )
   RDW_DEF_FLD( 0x4e04c, "rx_pfc_en",11,11, "802.3x pause rx en""", "" )
   RDW_DEF_FLD( 0x4e04c, "rx_cfc_en",19,12, "priority pause rx en""", "" )
   RDW_DEF_FLD( 0x4e04c, "fc_timer_only",20,20, "xoff timer sample mode only""", "" )
   RDW_DEF_FLD( 0x4e04c, "rx_ucast_en",21,21, "rx ucast pause enable""", "" )
   RDW_DEF_FLD( 0x4e04c, "rx_mc_drop_en",22,22, "rx mc control frame enable""", "" )
   RDW_DEF_FLD( 0x4e04c, "seq_type",23,23, "seq type for special control word""", "" )


   RDW_DEF("hi", 0x4004d, "red_hi0_cfg_pause_cfc_opcode","", 0xffff, 0x101, "cfg")
   RDW_DEF_FLD( 0x4004d, "",15,0, "priority pause op code""", "" )
   RDW_DEF("hi", 0x4204d, "red_hi1_cfg_pause_cfc_opcode","", 0xffff, 0x101, "cfg")
   RDW_DEF_FLD( 0x4204d, "",15,0, "priority pause op code""", "" )
   RDW_DEF("hi", 0x4404d, "red_hi2_cfg_pause_cfc_opcode","", 0xffff, 0x101, "cfg")
   RDW_DEF_FLD( 0x4404d, "",15,0, "priority pause op code""", "" )
   RDW_DEF("hi", 0x4604d, "red_hi3_cfg_pause_cfc_opcode","", 0xffff, 0x101, "cfg")
   RDW_DEF_FLD( 0x4604d, "",15,0, "priority pause op code""", "" )
   RDW_DEF("hi", 0x4804d, "red_hi4_cfg_pause_cfc_opcode","", 0xffff, 0x101, "cfg")
   RDW_DEF_FLD( 0x4804d, "",15,0, "priority pause op code""", "" )
   RDW_DEF("hi", 0x4a04d, "red_hi5_cfg_pause_cfc_opcode","", 0xffff, 0x101, "cfg")
   RDW_DEF_FLD( 0x4a04d, "",15,0, "priority pause op code""", "" )
   RDW_DEF("hi", 0x4c04d, "red_hi6_cfg_pause_cfc_opcode","", 0xffff, 0x101, "cfg")
   RDW_DEF_FLD( 0x4c04d, "",15,0, "priority pause op code""", "" )
   RDW_DEF("hi", 0x4e04d, "red_hi7_cfg_pause_cfc_opcode","", 0xffff, 0x101, "cfg")
   RDW_DEF_FLD( 0x4e04d, "",15,0, "priority pause op code""", "" )


   RDW_DEF("hi", 0x4004e, "red_hi0_cfg_pause_time","", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x4004e, "",15,0, "802.3x pause tx time""", "" )
   RDW_DEF("hi", 0x4204e, "red_hi1_cfg_pause_time","", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x4204e, "",15,0, "802.3x pause tx time""", "" )
   RDW_DEF("hi", 0x4404e, "red_hi2_cfg_pause_time","", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x4404e, "",15,0, "802.3x pause tx time""", "" )
   RDW_DEF("hi", 0x4604e, "red_hi3_cfg_pause_time","", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x4604e, "",15,0, "802.3x pause tx time""", "" )
   RDW_DEF("hi", 0x4804e, "red_hi4_cfg_pause_time","", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x4804e, "",15,0, "802.3x pause tx time""", "" )
   RDW_DEF("hi", 0x4a04e, "red_hi5_cfg_pause_time","", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x4a04e, "",15,0, "802.3x pause tx time""", "" )
   RDW_DEF("hi", 0x4c04e, "red_hi6_cfg_pause_time","", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x4c04e, "",15,0, "802.3x pause tx time""", "" )
   RDW_DEF("hi", 0x4e04e, "red_hi7_cfg_pause_time","", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x4e04e, "",15,0, "802.3x pause tx time""", "" )


   RDW_DEF("hi", 0x4004f, "red_hi0_cfg_pause_sample_timer","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4004f, "",19,0, "xoff timer sample period""", "" )
   RDW_DEF("hi", 0x4204f, "red_hi1_cfg_pause_sample_timer","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4204f, "",19,0, "xoff timer sample period""", "" )
   RDW_DEF("hi", 0x4404f, "red_hi2_cfg_pause_sample_timer","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4404f, "",19,0, "xoff timer sample period""", "" )
   RDW_DEF("hi", 0x4604f, "red_hi3_cfg_pause_sample_timer","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4604f, "",19,0, "xoff timer sample period""", "" )
   RDW_DEF("hi", 0x4804f, "red_hi4_cfg_pause_sample_timer","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4804f, "",19,0, "xoff timer sample period""", "" )
   RDW_DEF("hi", 0x4a04f, "red_hi5_cfg_pause_sample_timer","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a04f, "",19,0, "xoff timer sample period""", "" )
   RDW_DEF("hi", 0x4c04f, "red_hi6_cfg_pause_sample_timer","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c04f, "",19,0, "xoff timer sample period""", "" )
   RDW_DEF("hi", 0x4e04f, "red_hi7_cfg_pause_sample_timer","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e04f, "",19,0, "xoff timer sample period""", "" )


   RDW_DEF("hi", 0x40050, "red_hi0_cfg_pause_fc_limit","pause configuration""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40050, "",19,0, "xoff timer sample rate limit""", "" )
   RDW_DEF("hi", 0x42050, "red_hi1_cfg_pause_fc_limit","pause configuration""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42050, "",19,0, "xoff timer sample rate limit""", "" )
   RDW_DEF("hi", 0x44050, "red_hi2_cfg_pause_fc_limit","pause configuration""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44050, "",19,0, "xoff timer sample rate limit""", "" )
   RDW_DEF("hi", 0x46050, "red_hi3_cfg_pause_fc_limit","pause configuration""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46050, "",19,0, "xoff timer sample rate limit""", "" )
   RDW_DEF("hi", 0x48050, "red_hi4_cfg_pause_fc_limit","pause configuration""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48050, "",19,0, "xoff timer sample rate limit""", "" )
   RDW_DEF("hi", 0x4a050, "red_hi5_cfg_pause_fc_limit","pause configuration""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a050, "",19,0, "xoff timer sample rate limit""", "" )
   RDW_DEF("hi", 0x4c050, "red_hi6_cfg_pause_fc_limit","pause configuration""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c050, "",19,0, "xoff timer sample rate limit""", "" )
   RDW_DEF("hi", 0x4e050, "red_hi7_cfg_pause_fc_limit","pause configuration""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e050, "",19,0, "xoff timer sample rate limit""", "" )


   RDW_DEF("hi", 0x40051, "red_hi0_cfg_pause_0_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x40051, "",3,0, "priority pause class 0 tx time""", "" )
   RDW_DEF("hi", 0x42051, "red_hi1_cfg_pause_0_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x42051, "",3,0, "priority pause class 0 tx time""", "" )
   RDW_DEF("hi", 0x44051, "red_hi2_cfg_pause_0_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x44051, "",3,0, "priority pause class 0 tx time""", "" )
   RDW_DEF("hi", 0x46051, "red_hi3_cfg_pause_0_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x46051, "",3,0, "priority pause class 0 tx time""", "" )
   RDW_DEF("hi", 0x48051, "red_hi4_cfg_pause_0_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x48051, "",3,0, "priority pause class 0 tx time""", "" )
   RDW_DEF("hi", 0x4a051, "red_hi5_cfg_pause_0_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x4a051, "",3,0, "priority pause class 0 tx time""", "" )
   RDW_DEF("hi", 0x4c051, "red_hi6_cfg_pause_0_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x4c051, "",3,0, "priority pause class 0 tx time""", "" )
   RDW_DEF("hi", 0x4e051, "red_hi7_cfg_pause_0_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x4e051, "",3,0, "priority pause class 0 tx time""", "" )


   RDW_DEF("hi", 0x40052, "red_hi0_cfg_pause_1_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x40052, "",3,0, "priority pause class 1 tx time""", "" )
   RDW_DEF("hi", 0x42052, "red_hi1_cfg_pause_1_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x42052, "",3,0, "priority pause class 1 tx time""", "" )
   RDW_DEF("hi", 0x44052, "red_hi2_cfg_pause_1_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x44052, "",3,0, "priority pause class 1 tx time""", "" )
   RDW_DEF("hi", 0x46052, "red_hi3_cfg_pause_1_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x46052, "",3,0, "priority pause class 1 tx time""", "" )
   RDW_DEF("hi", 0x48052, "red_hi4_cfg_pause_1_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x48052, "",3,0, "priority pause class 1 tx time""", "" )
   RDW_DEF("hi", 0x4a052, "red_hi5_cfg_pause_1_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x4a052, "",3,0, "priority pause class 1 tx time""", "" )
   RDW_DEF("hi", 0x4c052, "red_hi6_cfg_pause_1_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x4c052, "",3,0, "priority pause class 1 tx time""", "" )
   RDW_DEF("hi", 0x4e052, "red_hi7_cfg_pause_1_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x4e052, "",3,0, "priority pause class 1 tx time""", "" )


   RDW_DEF("hi", 0x40053, "red_hi0_cfg_pause_2_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x40053, "",3,0, "priority pause class 2 tx time""", "" )
   RDW_DEF("hi", 0x42053, "red_hi1_cfg_pause_2_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x42053, "",3,0, "priority pause class 2 tx time""", "" )
   RDW_DEF("hi", 0x44053, "red_hi2_cfg_pause_2_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x44053, "",3,0, "priority pause class 2 tx time""", "" )
   RDW_DEF("hi", 0x46053, "red_hi3_cfg_pause_2_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x46053, "",3,0, "priority pause class 2 tx time""", "" )
   RDW_DEF("hi", 0x48053, "red_hi4_cfg_pause_2_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x48053, "",3,0, "priority pause class 2 tx time""", "" )
   RDW_DEF("hi", 0x4a053, "red_hi5_cfg_pause_2_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x4a053, "",3,0, "priority pause class 2 tx time""", "" )
   RDW_DEF("hi", 0x4c053, "red_hi6_cfg_pause_2_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x4c053, "",3,0, "priority pause class 2 tx time""", "" )
   RDW_DEF("hi", 0x4e053, "red_hi7_cfg_pause_2_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x4e053, "",3,0, "priority pause class 2 tx time""", "" )


   RDW_DEF("hi", 0x40054, "red_hi0_cfg_pause_3_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x40054, "",3,0, "priority pause class 3 tx time""", "" )
   RDW_DEF("hi", 0x42054, "red_hi1_cfg_pause_3_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x42054, "",3,0, "priority pause class 3 tx time""", "" )
   RDW_DEF("hi", 0x44054, "red_hi2_cfg_pause_3_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x44054, "",3,0, "priority pause class 3 tx time""", "" )
   RDW_DEF("hi", 0x46054, "red_hi3_cfg_pause_3_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x46054, "",3,0, "priority pause class 3 tx time""", "" )
   RDW_DEF("hi", 0x48054, "red_hi4_cfg_pause_3_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x48054, "",3,0, "priority pause class 3 tx time""", "" )
   RDW_DEF("hi", 0x4a054, "red_hi5_cfg_pause_3_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x4a054, "",3,0, "priority pause class 3 tx time""", "" )
   RDW_DEF("hi", 0x4c054, "red_hi6_cfg_pause_3_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x4c054, "",3,0, "priority pause class 3 tx time""", "" )
   RDW_DEF("hi", 0x4e054, "red_hi7_cfg_pause_3_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x4e054, "",3,0, "priority pause class 3 tx time""", "" )


   RDW_DEF("hi", 0x40055, "red_hi0_cfg_pause_4_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x40055, "",3,0, "priority pause class 4 tx time""", "" )
   RDW_DEF("hi", 0x42055, "red_hi1_cfg_pause_4_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x42055, "",3,0, "priority pause class 4 tx time""", "" )
   RDW_DEF("hi", 0x44055, "red_hi2_cfg_pause_4_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x44055, "",3,0, "priority pause class 4 tx time""", "" )
   RDW_DEF("hi", 0x46055, "red_hi3_cfg_pause_4_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x46055, "",3,0, "priority pause class 4 tx time""", "" )
   RDW_DEF("hi", 0x48055, "red_hi4_cfg_pause_4_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x48055, "",3,0, "priority pause class 4 tx time""", "" )
   RDW_DEF("hi", 0x4a055, "red_hi5_cfg_pause_4_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x4a055, "",3,0, "priority pause class 4 tx time""", "" )
   RDW_DEF("hi", 0x4c055, "red_hi6_cfg_pause_4_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x4c055, "",3,0, "priority pause class 4 tx time""", "" )
   RDW_DEF("hi", 0x4e055, "red_hi7_cfg_pause_4_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x4e055, "",3,0, "priority pause class 4 tx time""", "" )


   RDW_DEF("hi", 0x40056, "red_hi0_cfg_pause_5_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x40056, "",3,0, "priority pause class 5 tx time""", "" )
   RDW_DEF("hi", 0x42056, "red_hi1_cfg_pause_5_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x42056, "",3,0, "priority pause class 5 tx time""", "" )
   RDW_DEF("hi", 0x44056, "red_hi2_cfg_pause_5_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x44056, "",3,0, "priority pause class 5 tx time""", "" )
   RDW_DEF("hi", 0x46056, "red_hi3_cfg_pause_5_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x46056, "",3,0, "priority pause class 5 tx time""", "" )
   RDW_DEF("hi", 0x48056, "red_hi4_cfg_pause_5_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x48056, "",3,0, "priority pause class 5 tx time""", "" )
   RDW_DEF("hi", 0x4a056, "red_hi5_cfg_pause_5_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x4a056, "",3,0, "priority pause class 5 tx time""", "" )
   RDW_DEF("hi", 0x4c056, "red_hi6_cfg_pause_5_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x4c056, "",3,0, "priority pause class 5 tx time""", "" )
   RDW_DEF("hi", 0x4e056, "red_hi7_cfg_pause_5_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x4e056, "",3,0, "priority pause class 5 tx time""", "" )


   RDW_DEF("hi", 0x40057, "red_hi0_cfg_pause_6_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x40057, "",3,0, "priority pause class 6 tx time""", "" )
   RDW_DEF("hi", 0x42057, "red_hi1_cfg_pause_6_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x42057, "",3,0, "priority pause class 6 tx time""", "" )
   RDW_DEF("hi", 0x44057, "red_hi2_cfg_pause_6_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x44057, "",3,0, "priority pause class 6 tx time""", "" )
   RDW_DEF("hi", 0x46057, "red_hi3_cfg_pause_6_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x46057, "",3,0, "priority pause class 6 tx time""", "" )
   RDW_DEF("hi", 0x48057, "red_hi4_cfg_pause_6_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x48057, "",3,0, "priority pause class 6 tx time""", "" )
   RDW_DEF("hi", 0x4a057, "red_hi5_cfg_pause_6_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x4a057, "",3,0, "priority pause class 6 tx time""", "" )
   RDW_DEF("hi", 0x4c057, "red_hi6_cfg_pause_6_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x4c057, "",3,0, "priority pause class 6 tx time""", "" )
   RDW_DEF("hi", 0x4e057, "red_hi7_cfg_pause_6_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x4e057, "",3,0, "priority pause class 6 tx time""", "" )


   RDW_DEF("hi", 0x40058, "red_hi0_cfg_pause_7_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x40058, "",3,0, "priority pause class 7 tx time""", "" )
   RDW_DEF("hi", 0x42058, "red_hi1_cfg_pause_7_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x42058, "",3,0, "priority pause class 7 tx time""", "" )
   RDW_DEF("hi", 0x44058, "red_hi2_cfg_pause_7_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x44058, "",3,0, "priority pause class 7 tx time""", "" )
   RDW_DEF("hi", 0x46058, "red_hi3_cfg_pause_7_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x46058, "",3,0, "priority pause class 7 tx time""", "" )
   RDW_DEF("hi", 0x48058, "red_hi4_cfg_pause_7_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x48058, "",3,0, "priority pause class 7 tx time""", "" )
   RDW_DEF("hi", 0x4a058, "red_hi5_cfg_pause_7_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x4a058, "",3,0, "priority pause class 7 tx time""", "" )
   RDW_DEF("hi", 0x4c058, "red_hi6_cfg_pause_7_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x4c058, "",3,0, "priority pause class 7 tx time""", "" )
   RDW_DEF("hi", 0x4e058, "red_hi7_cfg_pause_7_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x4e058, "",3,0, "priority pause class 7 tx time""", "" )


   RDW_DEF("hi", 0x40059, "red_hi0_cfg_pause_time_unit","", 0xffff, 0x13, "cfg")
   RDW_DEF_FLD( 0x40059, "",15,0, "pause time unit for 512 bit time\nvalue = INT(51.2/core_clock_cycle_time(ns))""", "" )
   RDW_DEF("hi", 0x42059, "red_hi1_cfg_pause_time_unit","", 0xffff, 0x13, "cfg")
   RDW_DEF_FLD( 0x42059, "",15,0, "pause time unit for 512 bit time\nvalue = INT(51.2/core_clock_cycle_time(ns))""", "" )
   RDW_DEF("hi", 0x44059, "red_hi2_cfg_pause_time_unit","", 0xffff, 0x13, "cfg")
   RDW_DEF_FLD( 0x44059, "",15,0, "pause time unit for 512 bit time\nvalue = INT(51.2/core_clock_cycle_time(ns))""", "" )
   RDW_DEF("hi", 0x46059, "red_hi3_cfg_pause_time_unit","", 0xffff, 0x13, "cfg")
   RDW_DEF_FLD( 0x46059, "",15,0, "pause time unit for 512 bit time\nvalue = INT(51.2/core_clock_cycle_time(ns))""", "" )
   RDW_DEF("hi", 0x48059, "red_hi4_cfg_pause_time_unit","", 0xffff, 0x13, "cfg")
   RDW_DEF_FLD( 0x48059, "",15,0, "pause time unit for 512 bit time\nvalue = INT(51.2/core_clock_cycle_time(ns))""", "" )
   RDW_DEF("hi", 0x4a059, "red_hi5_cfg_pause_time_unit","", 0xffff, 0x13, "cfg")
   RDW_DEF_FLD( 0x4a059, "",15,0, "pause time unit for 512 bit time\nvalue = INT(51.2/core_clock_cycle_time(ns))""", "" )
   RDW_DEF("hi", 0x4c059, "red_hi6_cfg_pause_time_unit","", 0xffff, 0x13, "cfg")
   RDW_DEF_FLD( 0x4c059, "",15,0, "pause time unit for 512 bit time\nvalue = INT(51.2/core_clock_cycle_time(ns))""", "" )
   RDW_DEF("hi", 0x4e059, "red_hi7_cfg_pause_time_unit","", 0xffff, 0x13, "cfg")
   RDW_DEF_FLD( 0x4e059, "",15,0, "pause time unit for 512 bit time\nvalue = INT(51.2/core_clock_cycle_time(ns))""", "" )


   RDW_DEF("hi", 0x4005a, "red_hi0_cfg_pause_frac_time","", 0xff, 0x33, "cfg")
   RDW_DEF_FLD( 0x4005a, "",7,0, "fractional portion of time unit\nvalue = FRAC(51.2/core_clock_cycle_time(ns))*256""", "" )
   RDW_DEF("hi", 0x4205a, "red_hi1_cfg_pause_frac_time","", 0xff, 0x33, "cfg")
   RDW_DEF_FLD( 0x4205a, "",7,0, "fractional portion of time unit\nvalue = FRAC(51.2/core_clock_cycle_time(ns))*256""", "" )
   RDW_DEF("hi", 0x4405a, "red_hi2_cfg_pause_frac_time","", 0xff, 0x33, "cfg")
   RDW_DEF_FLD( 0x4405a, "",7,0, "fractional portion of time unit\nvalue = FRAC(51.2/core_clock_cycle_time(ns))*256""", "" )
   RDW_DEF("hi", 0x4605a, "red_hi3_cfg_pause_frac_time","", 0xff, 0x33, "cfg")
   RDW_DEF_FLD( 0x4605a, "",7,0, "fractional portion of time unit\nvalue = FRAC(51.2/core_clock_cycle_time(ns))*256""", "" )
   RDW_DEF("hi", 0x4805a, "red_hi4_cfg_pause_frac_time","", 0xff, 0x33, "cfg")
   RDW_DEF_FLD( 0x4805a, "",7,0, "fractional portion of time unit\nvalue = FRAC(51.2/core_clock_cycle_time(ns))*256""", "" )
   RDW_DEF("hi", 0x4a05a, "red_hi5_cfg_pause_frac_time","", 0xff, 0x33, "cfg")
   RDW_DEF_FLD( 0x4a05a, "",7,0, "fractional portion of time unit\nvalue = FRAC(51.2/core_clock_cycle_time(ns))*256""", "" )
   RDW_DEF("hi", 0x4c05a, "red_hi6_cfg_pause_frac_time","", 0xff, 0x33, "cfg")
   RDW_DEF_FLD( 0x4c05a, "",7,0, "fractional portion of time unit\nvalue = FRAC(51.2/core_clock_cycle_time(ns))*256""", "" )
   RDW_DEF("hi", 0x4e05a, "red_hi7_cfg_pause_frac_time","", 0xff, 0x33, "cfg")
   RDW_DEF_FLD( 0x4e05a, "",7,0, "fractional portion of time unit\nvalue = FRAC(51.2/core_clock_cycle_time(ns))*256""", "" )


   RDW_DEF("hi", 0x4005b, "red_hi0_cfg_rma_sa_hi","pause sa[47:32]""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4005b, "",15,0, "rx sa[47:32]""", "" )
   RDW_DEF("hi", 0x4205b, "red_hi1_cfg_rma_sa_hi","pause sa[47:32]""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4205b, "",15,0, "rx sa[47:32]""", "" )
   RDW_DEF("hi", 0x4405b, "red_hi2_cfg_rma_sa_hi","pause sa[47:32]""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4405b, "",15,0, "rx sa[47:32]""", "" )
   RDW_DEF("hi", 0x4605b, "red_hi3_cfg_rma_sa_hi","pause sa[47:32]""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4605b, "",15,0, "rx sa[47:32]""", "" )
   RDW_DEF("hi", 0x4805b, "red_hi4_cfg_rma_sa_hi","pause sa[47:32]""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4805b, "",15,0, "rx sa[47:32]""", "" )
   RDW_DEF("hi", 0x4a05b, "red_hi5_cfg_rma_sa_hi","pause sa[47:32]""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a05b, "",15,0, "rx sa[47:32]""", "" )
   RDW_DEF("hi", 0x4c05b, "red_hi6_cfg_rma_sa_hi","pause sa[47:32]""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c05b, "",15,0, "rx sa[47:32]""", "" )
   RDW_DEF("hi", 0x4e05b, "red_hi7_cfg_rma_sa_hi","pause sa[47:32]""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e05b, "",15,0, "rx sa[47:32]""", "" )


   RDW_DEF("hi", 0x4005c, "red_hi0_cfg_rma_sa_lo","pause sa[31:0]""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4005c, "",31,0, "rx sa[31:0]""", "" )
   RDW_DEF("hi", 0x4205c, "red_hi1_cfg_rma_sa_lo","pause sa[31:0]""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4205c, "",31,0, "rx sa[31:0]""", "" )
   RDW_DEF("hi", 0x4405c, "red_hi2_cfg_rma_sa_lo","pause sa[31:0]""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4405c, "",31,0, "rx sa[31:0]""", "" )
   RDW_DEF("hi", 0x4605c, "red_hi3_cfg_rma_sa_lo","pause sa[31:0]""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4605c, "",31,0, "rx sa[31:0]""", "" )
   RDW_DEF("hi", 0x4805c, "red_hi4_cfg_rma_sa_lo","pause sa[31:0]""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4805c, "",31,0, "rx sa[31:0]""", "" )
   RDW_DEF("hi", 0x4a05c, "red_hi5_cfg_rma_sa_lo","pause sa[31:0]""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a05c, "",31,0, "rx sa[31:0]""", "" )
   RDW_DEF("hi", 0x4c05c, "red_hi6_cfg_rma_sa_lo","pause sa[31:0]""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c05c, "",31,0, "rx sa[31:0]""", "" )
   RDW_DEF("hi", 0x4e05c, "red_hi7_cfg_rma_sa_lo","pause sa[31:0]""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e05c, "",31,0, "rx sa[31:0]""", "" )


   RDW_DEF("hi", 0x4005d, "red_hi0_cfg_code_pause","code for wfc pause""", 0xff, 0x9c, "cfg")
   RDW_DEF_FLD( 0x4005d, "",7,0, "pause K character""", "" )
   RDW_DEF("hi", 0x4205d, "red_hi1_cfg_code_pause","code for wfc pause""", 0xff, 0x9c, "cfg")
   RDW_DEF_FLD( 0x4205d, "",7,0, "pause K character""", "" )
   RDW_DEF("hi", 0x4405d, "red_hi2_cfg_code_pause","code for wfc pause""", 0xff, 0x9c, "cfg")
   RDW_DEF_FLD( 0x4405d, "",7,0, "pause K character""", "" )
   RDW_DEF("hi", 0x4605d, "red_hi3_cfg_code_pause","code for wfc pause""", 0xff, 0x9c, "cfg")
   RDW_DEF_FLD( 0x4605d, "",7,0, "pause K character""", "" )
   RDW_DEF("hi", 0x4805d, "red_hi4_cfg_code_pause","code for wfc pause""", 0xff, 0x9c, "cfg")
   RDW_DEF_FLD( 0x4805d, "",7,0, "pause K character""", "" )
   RDW_DEF("hi", 0x4a05d, "red_hi5_cfg_code_pause","code for wfc pause""", 0xff, 0x9c, "cfg")
   RDW_DEF_FLD( 0x4a05d, "",7,0, "pause K character""", "" )
   RDW_DEF("hi", 0x4c05d, "red_hi6_cfg_code_pause","code for wfc pause""", 0xff, 0x9c, "cfg")
   RDW_DEF_FLD( 0x4c05d, "",7,0, "pause K character""", "" )
   RDW_DEF("hi", 0x4e05d, "red_hi7_cfg_code_pause","code for wfc pause""", 0xff, 0x9c, "cfg")
   RDW_DEF_FLD( 0x4e05d, "",7,0, "pause K character""", "" )


   RDW_DEF("hi", 0x4005e, "red_hi0_cfg_code_pause_sub","code for wfc pause""", 0xff, 0xdc, "cfg")
   RDW_DEF_FLD( 0x4005e, "",7,0, "pause code sub field""", "" )
   RDW_DEF("hi", 0x4205e, "red_hi1_cfg_code_pause_sub","code for wfc pause""", 0xff, 0xdc, "cfg")
   RDW_DEF_FLD( 0x4205e, "",7,0, "pause code sub field""", "" )
   RDW_DEF("hi", 0x4405e, "red_hi2_cfg_code_pause_sub","code for wfc pause""", 0xff, 0xdc, "cfg")
   RDW_DEF_FLD( 0x4405e, "",7,0, "pause code sub field""", "" )
   RDW_DEF("hi", 0x4605e, "red_hi3_cfg_code_pause_sub","code for wfc pause""", 0xff, 0xdc, "cfg")
   RDW_DEF_FLD( 0x4605e, "",7,0, "pause code sub field""", "" )
   RDW_DEF("hi", 0x4805e, "red_hi4_cfg_code_pause_sub","code for wfc pause""", 0xff, 0xdc, "cfg")
   RDW_DEF_FLD( 0x4805e, "",7,0, "pause code sub field""", "" )
   RDW_DEF("hi", 0x4a05e, "red_hi5_cfg_code_pause_sub","code for wfc pause""", 0xff, 0xdc, "cfg")
   RDW_DEF_FLD( 0x4a05e, "",7,0, "pause code sub field""", "" )
   RDW_DEF("hi", 0x4c05e, "red_hi6_cfg_code_pause_sub","code for wfc pause""", 0xff, 0xdc, "cfg")
   RDW_DEF_FLD( 0x4c05e, "",7,0, "pause code sub field""", "" )
   RDW_DEF("hi", 0x4e05e, "red_hi7_cfg_code_pause_sub","code for wfc pause""", 0xff, 0xdc, "cfg")
   RDW_DEF_FLD( 0x4e05e, "",7,0, "pause code sub field""", "" )


   RDW_DEF("hi", 0x4005f, "red_hi0_gbe_CFG","config register""", 0xffffffff, 0x20180004, "cfg")
   RDW_DEF_FLD( 0x4005f, "rx_an_en",0,0, "When asserts, enable receive auto negotiation""", "" )
   RDW_DEF_FLD( 0x4005f, "rx_busy_en",1,1, "Reserved, set to zero""", "" )
   RDW_DEF_FLD( 0x4005f, "rx_crc_chk_en",2,2, "When asserts, enable receive crc check""", "" )
   RDW_DEF_FLD( 0x4005f, "tx_force_xmit_data",3,3, "When asserts, force xmit_data to be high to bypass AN""", "" )
   RDW_DEF_FLD( 0x4005f, "rx2tx_xoff_en",4,4, "When asserts, enable rx pause xoff halts the tx transmission""", "" )
   RDW_DEF_FLD( 0x4005f, "rx2tx_xoff_delay_time",14,5, "Specifies the delay time of the rx pause xoff halts the tx\ntransmission, zero means no delay. This allows some packets\nin the pipeline can be transmitted""", "" )
   RDW_DEF_FLD( 0x4005f, "pause_tx_en",15,15, "When asserts, enable transmit pause frame""", "" )
   RDW_DEF_FLD( 0x4005f, "pause_timer_only",16,16, "When asserts, core xoff state is periodically sampled\nto generate pause frame""", "" )
   RDW_DEF_FLD( 0x4005f, "ipg_transmit_time",26,17, "Specifies the inter-frame-gap in bytes""", "" )
   RDW_DEF_FLD( 0x4005f, "rx_link_rst",27,27, "When asserts, reset both link transmit and receive reside in\nlink manager""", "" )
   RDW_DEF_FLD( 0x4005f, "rx_jabber_len_1518",28,28, "When asserts, rx jabber lenth is packet size greater than 1518""", "" )
   RDW_DEF_FLD( 0x4005f, "rx_inrange_chk_en",29,29, "When asserts, rx payload lenth is checked if length field is valid""", "" )
   RDW_DEF_FLD( 0x4005f, "rx_sw_rst",30,30, "When asserts, soft reset the receive path. Software must set\nto zero to deassert the soft reset""", "" )
   RDW_DEF_FLD( 0x4005f, "tx_sw_rst",31,31, "When asserts, soft reset the transmit path. Software must set\nto zero to deassert the soft reset""", "" )
   RDW_DEF("hi", 0x4205f, "red_hi1_gbe_CFG","config register""", 0xffffffff, 0x20180004, "cfg")
   RDW_DEF_FLD( 0x4205f, "rx_an_en",0,0, "When asserts, enable receive auto negotiation""", "" )
   RDW_DEF_FLD( 0x4205f, "rx_busy_en",1,1, "Reserved, set to zero""", "" )
   RDW_DEF_FLD( 0x4205f, "rx_crc_chk_en",2,2, "When asserts, enable receive crc check""", "" )
   RDW_DEF_FLD( 0x4205f, "tx_force_xmit_data",3,3, "When asserts, force xmit_data to be high to bypass AN""", "" )
   RDW_DEF_FLD( 0x4205f, "rx2tx_xoff_en",4,4, "When asserts, enable rx pause xoff halts the tx transmission""", "" )
   RDW_DEF_FLD( 0x4205f, "rx2tx_xoff_delay_time",14,5, "Specifies the delay time of the rx pause xoff halts the tx\ntransmission, zero means no delay. This allows some packets\nin the pipeline can be transmitted""", "" )
   RDW_DEF_FLD( 0x4205f, "pause_tx_en",15,15, "When asserts, enable transmit pause frame""", "" )
   RDW_DEF_FLD( 0x4205f, "pause_timer_only",16,16, "When asserts, core xoff state is periodically sampled\nto generate pause frame""", "" )
   RDW_DEF_FLD( 0x4205f, "ipg_transmit_time",26,17, "Specifies the inter-frame-gap in bytes""", "" )
   RDW_DEF_FLD( 0x4205f, "rx_link_rst",27,27, "When asserts, reset both link transmit and receive reside in\nlink manager""", "" )
   RDW_DEF_FLD( 0x4205f, "rx_jabber_len_1518",28,28, "When asserts, rx jabber lenth is packet size greater than 1518""", "" )
   RDW_DEF_FLD( 0x4205f, "rx_inrange_chk_en",29,29, "When asserts, rx payload lenth is checked if length field is valid""", "" )
   RDW_DEF_FLD( 0x4205f, "rx_sw_rst",30,30, "When asserts, soft reset the receive path. Software must set\nto zero to deassert the soft reset""", "" )
   RDW_DEF_FLD( 0x4205f, "tx_sw_rst",31,31, "When asserts, soft reset the transmit path. Software must set\nto zero to deassert the soft reset""", "" )
   RDW_DEF("hi", 0x4405f, "red_hi2_gbe_CFG","config register""", 0xffffffff, 0x20180004, "cfg")
   RDW_DEF_FLD( 0x4405f, "rx_an_en",0,0, "When asserts, enable receive auto negotiation""", "" )
   RDW_DEF_FLD( 0x4405f, "rx_busy_en",1,1, "Reserved, set to zero""", "" )
   RDW_DEF_FLD( 0x4405f, "rx_crc_chk_en",2,2, "When asserts, enable receive crc check""", "" )
   RDW_DEF_FLD( 0x4405f, "tx_force_xmit_data",3,3, "When asserts, force xmit_data to be high to bypass AN""", "" )
   RDW_DEF_FLD( 0x4405f, "rx2tx_xoff_en",4,4, "When asserts, enable rx pause xoff halts the tx transmission""", "" )
   RDW_DEF_FLD( 0x4405f, "rx2tx_xoff_delay_time",14,5, "Specifies the delay time of the rx pause xoff halts the tx\ntransmission, zero means no delay. This allows some packets\nin the pipeline can be transmitted""", "" )
   RDW_DEF_FLD( 0x4405f, "pause_tx_en",15,15, "When asserts, enable transmit pause frame""", "" )
   RDW_DEF_FLD( 0x4405f, "pause_timer_only",16,16, "When asserts, core xoff state is periodically sampled\nto generate pause frame""", "" )
   RDW_DEF_FLD( 0x4405f, "ipg_transmit_time",26,17, "Specifies the inter-frame-gap in bytes""", "" )
   RDW_DEF_FLD( 0x4405f, "rx_link_rst",27,27, "When asserts, reset both link transmit and receive reside in\nlink manager""", "" )
   RDW_DEF_FLD( 0x4405f, "rx_jabber_len_1518",28,28, "When asserts, rx jabber lenth is packet size greater than 1518""", "" )
   RDW_DEF_FLD( 0x4405f, "rx_inrange_chk_en",29,29, "When asserts, rx payload lenth is checked if length field is valid""", "" )
   RDW_DEF_FLD( 0x4405f, "rx_sw_rst",30,30, "When asserts, soft reset the receive path. Software must set\nto zero to deassert the soft reset""", "" )
   RDW_DEF_FLD( 0x4405f, "tx_sw_rst",31,31, "When asserts, soft reset the transmit path. Software must set\nto zero to deassert the soft reset""", "" )
   RDW_DEF("hi", 0x4605f, "red_hi3_gbe_CFG","config register""", 0xffffffff, 0x20180004, "cfg")
   RDW_DEF_FLD( 0x4605f, "rx_an_en",0,0, "When asserts, enable receive auto negotiation""", "" )
   RDW_DEF_FLD( 0x4605f, "rx_busy_en",1,1, "Reserved, set to zero""", "" )
   RDW_DEF_FLD( 0x4605f, "rx_crc_chk_en",2,2, "When asserts, enable receive crc check""", "" )
   RDW_DEF_FLD( 0x4605f, "tx_force_xmit_data",3,3, "When asserts, force xmit_data to be high to bypass AN""", "" )
   RDW_DEF_FLD( 0x4605f, "rx2tx_xoff_en",4,4, "When asserts, enable rx pause xoff halts the tx transmission""", "" )
   RDW_DEF_FLD( 0x4605f, "rx2tx_xoff_delay_time",14,5, "Specifies the delay time of the rx pause xoff halts the tx\ntransmission, zero means no delay. This allows some packets\nin the pipeline can be transmitted""", "" )
   RDW_DEF_FLD( 0x4605f, "pause_tx_en",15,15, "When asserts, enable transmit pause frame""", "" )
   RDW_DEF_FLD( 0x4605f, "pause_timer_only",16,16, "When asserts, core xoff state is periodically sampled\nto generate pause frame""", "" )
   RDW_DEF_FLD( 0x4605f, "ipg_transmit_time",26,17, "Specifies the inter-frame-gap in bytes""", "" )
   RDW_DEF_FLD( 0x4605f, "rx_link_rst",27,27, "When asserts, reset both link transmit and receive reside in\nlink manager""", "" )
   RDW_DEF_FLD( 0x4605f, "rx_jabber_len_1518",28,28, "When asserts, rx jabber lenth is packet size greater than 1518""", "" )
   RDW_DEF_FLD( 0x4605f, "rx_inrange_chk_en",29,29, "When asserts, rx payload lenth is checked if length field is valid""", "" )
   RDW_DEF_FLD( 0x4605f, "rx_sw_rst",30,30, "When asserts, soft reset the receive path. Software must set\nto zero to deassert the soft reset""", "" )
   RDW_DEF_FLD( 0x4605f, "tx_sw_rst",31,31, "When asserts, soft reset the transmit path. Software must set\nto zero to deassert the soft reset""", "" )
   RDW_DEF("hi", 0x4805f, "red_hi4_gbe_CFG","config register""", 0xffffffff, 0x20180004, "cfg")
   RDW_DEF_FLD( 0x4805f, "rx_an_en",0,0, "When asserts, enable receive auto negotiation""", "" )
   RDW_DEF_FLD( 0x4805f, "rx_busy_en",1,1, "Reserved, set to zero""", "" )
   RDW_DEF_FLD( 0x4805f, "rx_crc_chk_en",2,2, "When asserts, enable receive crc check""", "" )
   RDW_DEF_FLD( 0x4805f, "tx_force_xmit_data",3,3, "When asserts, force xmit_data to be high to bypass AN""", "" )
   RDW_DEF_FLD( 0x4805f, "rx2tx_xoff_en",4,4, "When asserts, enable rx pause xoff halts the tx transmission""", "" )
   RDW_DEF_FLD( 0x4805f, "rx2tx_xoff_delay_time",14,5, "Specifies the delay time of the rx pause xoff halts the tx\ntransmission, zero means no delay. This allows some packets\nin the pipeline can be transmitted""", "" )
   RDW_DEF_FLD( 0x4805f, "pause_tx_en",15,15, "When asserts, enable transmit pause frame""", "" )
   RDW_DEF_FLD( 0x4805f, "pause_timer_only",16,16, "When asserts, core xoff state is periodically sampled\nto generate pause frame""", "" )
   RDW_DEF_FLD( 0x4805f, "ipg_transmit_time",26,17, "Specifies the inter-frame-gap in bytes""", "" )
   RDW_DEF_FLD( 0x4805f, "rx_link_rst",27,27, "When asserts, reset both link transmit and receive reside in\nlink manager""", "" )
   RDW_DEF_FLD( 0x4805f, "rx_jabber_len_1518",28,28, "When asserts, rx jabber lenth is packet size greater than 1518""", "" )
   RDW_DEF_FLD( 0x4805f, "rx_inrange_chk_en",29,29, "When asserts, rx payload lenth is checked if length field is valid""", "" )
   RDW_DEF_FLD( 0x4805f, "rx_sw_rst",30,30, "When asserts, soft reset the receive path. Software must set\nto zero to deassert the soft reset""", "" )
   RDW_DEF_FLD( 0x4805f, "tx_sw_rst",31,31, "When asserts, soft reset the transmit path. Software must set\nto zero to deassert the soft reset""", "" )
   RDW_DEF("hi", 0x4a05f, "red_hi5_gbe_CFG","config register""", 0xffffffff, 0x20180004, "cfg")
   RDW_DEF_FLD( 0x4a05f, "rx_an_en",0,0, "When asserts, enable receive auto negotiation""", "" )
   RDW_DEF_FLD( 0x4a05f, "rx_busy_en",1,1, "Reserved, set to zero""", "" )
   RDW_DEF_FLD( 0x4a05f, "rx_crc_chk_en",2,2, "When asserts, enable receive crc check""", "" )
   RDW_DEF_FLD( 0x4a05f, "tx_force_xmit_data",3,3, "When asserts, force xmit_data to be high to bypass AN""", "" )
   RDW_DEF_FLD( 0x4a05f, "rx2tx_xoff_en",4,4, "When asserts, enable rx pause xoff halts the tx transmission""", "" )
   RDW_DEF_FLD( 0x4a05f, "rx2tx_xoff_delay_time",14,5, "Specifies the delay time of the rx pause xoff halts the tx\ntransmission, zero means no delay. This allows some packets\nin the pipeline can be transmitted""", "" )
   RDW_DEF_FLD( 0x4a05f, "pause_tx_en",15,15, "When asserts, enable transmit pause frame""", "" )
   RDW_DEF_FLD( 0x4a05f, "pause_timer_only",16,16, "When asserts, core xoff state is periodically sampled\nto generate pause frame""", "" )
   RDW_DEF_FLD( 0x4a05f, "ipg_transmit_time",26,17, "Specifies the inter-frame-gap in bytes""", "" )
   RDW_DEF_FLD( 0x4a05f, "rx_link_rst",27,27, "When asserts, reset both link transmit and receive reside in\nlink manager""", "" )
   RDW_DEF_FLD( 0x4a05f, "rx_jabber_len_1518",28,28, "When asserts, rx jabber lenth is packet size greater than 1518""", "" )
   RDW_DEF_FLD( 0x4a05f, "rx_inrange_chk_en",29,29, "When asserts, rx payload lenth is checked if length field is valid""", "" )
   RDW_DEF_FLD( 0x4a05f, "rx_sw_rst",30,30, "When asserts, soft reset the receive path. Software must set\nto zero to deassert the soft reset""", "" )
   RDW_DEF_FLD( 0x4a05f, "tx_sw_rst",31,31, "When asserts, soft reset the transmit path. Software must set\nto zero to deassert the soft reset""", "" )
   RDW_DEF("hi", 0x4c05f, "red_hi6_gbe_CFG","config register""", 0xffffffff, 0x20180004, "cfg")
   RDW_DEF_FLD( 0x4c05f, "rx_an_en",0,0, "When asserts, enable receive auto negotiation""", "" )
   RDW_DEF_FLD( 0x4c05f, "rx_busy_en",1,1, "Reserved, set to zero""", "" )
   RDW_DEF_FLD( 0x4c05f, "rx_crc_chk_en",2,2, "When asserts, enable receive crc check""", "" )
   RDW_DEF_FLD( 0x4c05f, "tx_force_xmit_data",3,3, "When asserts, force xmit_data to be high to bypass AN""", "" )
   RDW_DEF_FLD( 0x4c05f, "rx2tx_xoff_en",4,4, "When asserts, enable rx pause xoff halts the tx transmission""", "" )
   RDW_DEF_FLD( 0x4c05f, "rx2tx_xoff_delay_time",14,5, "Specifies the delay time of the rx pause xoff halts the tx\ntransmission, zero means no delay. This allows some packets\nin the pipeline can be transmitted""", "" )
   RDW_DEF_FLD( 0x4c05f, "pause_tx_en",15,15, "When asserts, enable transmit pause frame""", "" )
   RDW_DEF_FLD( 0x4c05f, "pause_timer_only",16,16, "When asserts, core xoff state is periodically sampled\nto generate pause frame""", "" )
   RDW_DEF_FLD( 0x4c05f, "ipg_transmit_time",26,17, "Specifies the inter-frame-gap in bytes""", "" )
   RDW_DEF_FLD( 0x4c05f, "rx_link_rst",27,27, "When asserts, reset both link transmit and receive reside in\nlink manager""", "" )
   RDW_DEF_FLD( 0x4c05f, "rx_jabber_len_1518",28,28, "When asserts, rx jabber lenth is packet size greater than 1518""", "" )
   RDW_DEF_FLD( 0x4c05f, "rx_inrange_chk_en",29,29, "When asserts, rx payload lenth is checked if length field is valid""", "" )
   RDW_DEF_FLD( 0x4c05f, "rx_sw_rst",30,30, "When asserts, soft reset the receive path. Software must set\nto zero to deassert the soft reset""", "" )
   RDW_DEF_FLD( 0x4c05f, "tx_sw_rst",31,31, "When asserts, soft reset the transmit path. Software must set\nto zero to deassert the soft reset""", "" )
   RDW_DEF("hi", 0x4e05f, "red_hi7_gbe_CFG","config register""", 0xffffffff, 0x20180004, "cfg")
   RDW_DEF_FLD( 0x4e05f, "rx_an_en",0,0, "When asserts, enable receive auto negotiation""", "" )
   RDW_DEF_FLD( 0x4e05f, "rx_busy_en",1,1, "Reserved, set to zero""", "" )
   RDW_DEF_FLD( 0x4e05f, "rx_crc_chk_en",2,2, "When asserts, enable receive crc check""", "" )
   RDW_DEF_FLD( 0x4e05f, "tx_force_xmit_data",3,3, "When asserts, force xmit_data to be high to bypass AN""", "" )
   RDW_DEF_FLD( 0x4e05f, "rx2tx_xoff_en",4,4, "When asserts, enable rx pause xoff halts the tx transmission""", "" )
   RDW_DEF_FLD( 0x4e05f, "rx2tx_xoff_delay_time",14,5, "Specifies the delay time of the rx pause xoff halts the tx\ntransmission, zero means no delay. This allows some packets\nin the pipeline can be transmitted""", "" )
   RDW_DEF_FLD( 0x4e05f, "pause_tx_en",15,15, "When asserts, enable transmit pause frame""", "" )
   RDW_DEF_FLD( 0x4e05f, "pause_timer_only",16,16, "When asserts, core xoff state is periodically sampled\nto generate pause frame""", "" )
   RDW_DEF_FLD( 0x4e05f, "ipg_transmit_time",26,17, "Specifies the inter-frame-gap in bytes""", "" )
   RDW_DEF_FLD( 0x4e05f, "rx_link_rst",27,27, "When asserts, reset both link transmit and receive reside in\nlink manager""", "" )
   RDW_DEF_FLD( 0x4e05f, "rx_jabber_len_1518",28,28, "When asserts, rx jabber lenth is packet size greater than 1518""", "" )
   RDW_DEF_FLD( 0x4e05f, "rx_inrange_chk_en",29,29, "When asserts, rx payload lenth is checked if length field is valid""", "" )
   RDW_DEF_FLD( 0x4e05f, "rx_sw_rst",30,30, "When asserts, soft reset the receive path. Software must set\nto zero to deassert the soft reset""", "" )
   RDW_DEF_FLD( 0x4e05f, "tx_sw_rst",31,31, "When asserts, soft reset the transmit path. Software must set\nto zero to deassert the soft reset""", "" )


   RDW_DEF("hi", 0x40060, "red_hi0_gbe_CFG_tx_an_config_word","config register""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40060, "",15,0, "Specifies the auto negotiation word to be transmited""", "" )
   RDW_DEF("hi", 0x42060, "red_hi1_gbe_CFG_tx_an_config_word","config register""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42060, "",15,0, "Specifies the auto negotiation word to be transmited""", "" )
   RDW_DEF("hi", 0x44060, "red_hi2_gbe_CFG_tx_an_config_word","config register""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44060, "",15,0, "Specifies the auto negotiation word to be transmited""", "" )
   RDW_DEF("hi", 0x46060, "red_hi3_gbe_CFG_tx_an_config_word","config register""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46060, "",15,0, "Specifies the auto negotiation word to be transmited""", "" )
   RDW_DEF("hi", 0x48060, "red_hi4_gbe_CFG_tx_an_config_word","config register""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48060, "",15,0, "Specifies the auto negotiation word to be transmited""", "" )
   RDW_DEF("hi", 0x4a060, "red_hi5_gbe_CFG_tx_an_config_word","config register""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a060, "",15,0, "Specifies the auto negotiation word to be transmited""", "" )
   RDW_DEF("hi", 0x4c060, "red_hi6_gbe_CFG_tx_an_config_word","config register""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c060, "",15,0, "Specifies the auto negotiation word to be transmited""", "" )
   RDW_DEF("hi", 0x4e060, "red_hi7_gbe_CFG_tx_an_config_word","config register""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e060, "",15,0, "Specifies the auto negotiation word to be transmited""", "" )


   RDW_DEF("hi", 0x40061, "red_hi0_gbe_CFG_rx","config register""", 0x3fffff, 0x1005f2, "cfg")
   RDW_DEF_FLD( 0x40061, "max_size",13,0, "Specifies the maximum receve packet size, oversized packets""", "" )
   RDW_DEF_FLD( 0x40061, "min_size",20,14, "Specifies the minimum receve packet size, undersize packets\nare padded""", "" )
   RDW_DEF_FLD( 0x40061, "flush_en",21,21, "When asserts, flush all ingress packets""", "" )
   RDW_DEF("hi", 0x42061, "red_hi1_gbe_CFG_rx","config register""", 0x3fffff, 0x1005f2, "cfg")
   RDW_DEF_FLD( 0x42061, "max_size",13,0, "Specifies the maximum receve packet size, oversized packets""", "" )
   RDW_DEF_FLD( 0x42061, "min_size",20,14, "Specifies the minimum receve packet size, undersize packets\nare padded""", "" )
   RDW_DEF_FLD( 0x42061, "flush_en",21,21, "When asserts, flush all ingress packets""", "" )
   RDW_DEF("hi", 0x44061, "red_hi2_gbe_CFG_rx","config register""", 0x3fffff, 0x1005f2, "cfg")
   RDW_DEF_FLD( 0x44061, "max_size",13,0, "Specifies the maximum receve packet size, oversized packets""", "" )
   RDW_DEF_FLD( 0x44061, "min_size",20,14, "Specifies the minimum receve packet size, undersize packets\nare padded""", "" )
   RDW_DEF_FLD( 0x44061, "flush_en",21,21, "When asserts, flush all ingress packets""", "" )
   RDW_DEF("hi", 0x46061, "red_hi3_gbe_CFG_rx","config register""", 0x3fffff, 0x1005f2, "cfg")
   RDW_DEF_FLD( 0x46061, "max_size",13,0, "Specifies the maximum receve packet size, oversized packets""", "" )
   RDW_DEF_FLD( 0x46061, "min_size",20,14, "Specifies the minimum receve packet size, undersize packets\nare padded""", "" )
   RDW_DEF_FLD( 0x46061, "flush_en",21,21, "When asserts, flush all ingress packets""", "" )
   RDW_DEF("hi", 0x48061, "red_hi4_gbe_CFG_rx","config register""", 0x3fffff, 0x1005f2, "cfg")
   RDW_DEF_FLD( 0x48061, "max_size",13,0, "Specifies the maximum receve packet size, oversized packets""", "" )
   RDW_DEF_FLD( 0x48061, "min_size",20,14, "Specifies the minimum receve packet size, undersize packets\nare padded""", "" )
   RDW_DEF_FLD( 0x48061, "flush_en",21,21, "When asserts, flush all ingress packets""", "" )
   RDW_DEF("hi", 0x4a061, "red_hi5_gbe_CFG_rx","config register""", 0x3fffff, 0x1005f2, "cfg")
   RDW_DEF_FLD( 0x4a061, "max_size",13,0, "Specifies the maximum receve packet size, oversized packets""", "" )
   RDW_DEF_FLD( 0x4a061, "min_size",20,14, "Specifies the minimum receve packet size, undersize packets\nare padded""", "" )
   RDW_DEF_FLD( 0x4a061, "flush_en",21,21, "When asserts, flush all ingress packets""", "" )
   RDW_DEF("hi", 0x4c061, "red_hi6_gbe_CFG_rx","config register""", 0x3fffff, 0x1005f2, "cfg")
   RDW_DEF_FLD( 0x4c061, "max_size",13,0, "Specifies the maximum receve packet size, oversized packets""", "" )
   RDW_DEF_FLD( 0x4c061, "min_size",20,14, "Specifies the minimum receve packet size, undersize packets\nare padded""", "" )
   RDW_DEF_FLD( 0x4c061, "flush_en",21,21, "When asserts, flush all ingress packets""", "" )
   RDW_DEF("hi", 0x4e061, "red_hi7_gbe_CFG_rx","config register""", 0x3fffff, 0x1005f2, "cfg")
   RDW_DEF_FLD( 0x4e061, "max_size",13,0, "Specifies the maximum receve packet size, oversized packets""", "" )
   RDW_DEF_FLD( 0x4e061, "min_size",20,14, "Specifies the minimum receve packet size, undersize packets\nare padded""", "" )
   RDW_DEF_FLD( 0x4e061, "flush_en",21,21, "When asserts, flush all ingress packets""", "" )


   RDW_DEF("hi", 0x40062, "red_hi0_gbe_CFG_pause_time","pause config register""", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x40062, "",15,0, "Specifies the pause quanta to be filled in the pause frame""", "" )
   RDW_DEF("hi", 0x42062, "red_hi1_gbe_CFG_pause_time","pause config register""", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x42062, "",15,0, "Specifies the pause quanta to be filled in the pause frame""", "" )
   RDW_DEF("hi", 0x44062, "red_hi2_gbe_CFG_pause_time","pause config register""", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x44062, "",15,0, "Specifies the pause quanta to be filled in the pause frame""", "" )
   RDW_DEF("hi", 0x46062, "red_hi3_gbe_CFG_pause_time","pause config register""", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x46062, "",15,0, "Specifies the pause quanta to be filled in the pause frame""", "" )
   RDW_DEF("hi", 0x48062, "red_hi4_gbe_CFG_pause_time","pause config register""", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x48062, "",15,0, "Specifies the pause quanta to be filled in the pause frame""", "" )
   RDW_DEF("hi", 0x4a062, "red_hi5_gbe_CFG_pause_time","pause config register""", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x4a062, "",15,0, "Specifies the pause quanta to be filled in the pause frame""", "" )
   RDW_DEF("hi", 0x4c062, "red_hi6_gbe_CFG_pause_time","pause config register""", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x4c062, "",15,0, "Specifies the pause quanta to be filled in the pause frame""", "" )
   RDW_DEF("hi", 0x4e062, "red_hi7_gbe_CFG_pause_time","pause config register""", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x4e062, "",15,0, "Specifies the pause quanta to be filled in the pause frame""", "" )


   RDW_DEF("hi", 0x40063, "red_hi0_gbe_CFG_pause_sample_timer","pause config register""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40063, "",19,0, "Specifies sampling interval for core xoff state to generate\nthe pause frame""", "" )
   RDW_DEF("hi", 0x42063, "red_hi1_gbe_CFG_pause_sample_timer","pause config register""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42063, "",19,0, "Specifies sampling interval for core xoff state to generate\nthe pause frame""", "" )
   RDW_DEF("hi", 0x44063, "red_hi2_gbe_CFG_pause_sample_timer","pause config register""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44063, "",19,0, "Specifies sampling interval for core xoff state to generate\nthe pause frame""", "" )
   RDW_DEF("hi", 0x46063, "red_hi3_gbe_CFG_pause_sample_timer","pause config register""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46063, "",19,0, "Specifies sampling interval for core xoff state to generate\nthe pause frame""", "" )
   RDW_DEF("hi", 0x48063, "red_hi4_gbe_CFG_pause_sample_timer","pause config register""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48063, "",19,0, "Specifies sampling interval for core xoff state to generate\nthe pause frame""", "" )
   RDW_DEF("hi", 0x4a063, "red_hi5_gbe_CFG_pause_sample_timer","pause config register""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a063, "",19,0, "Specifies sampling interval for core xoff state to generate\nthe pause frame""", "" )
   RDW_DEF("hi", 0x4c063, "red_hi6_gbe_CFG_pause_sample_timer","pause config register""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c063, "",19,0, "Specifies sampling interval for core xoff state to generate\nthe pause frame""", "" )
   RDW_DEF("hi", 0x4e063, "red_hi7_gbe_CFG_pause_sample_timer","pause config register""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e063, "",19,0, "Specifies sampling interval for core xoff state to generate\nthe pause frame""", "" )


   RDW_DEF("hi", 0x40064, "red_hi0_gbe_CFG_pause_fc_limit","pause configuration""", 0xfffff, 0x1, "cfg")
   RDW_DEF_FLD( 0x40064, "",19,0, "Specifies the minimum time interval to sample the transition of xoff state,\nthis timer serves as a low pass filter to filter out unnessary transmission\nof pause frame due to coer xoff transition""", "" )
   RDW_DEF("hi", 0x42064, "red_hi1_gbe_CFG_pause_fc_limit","pause configuration""", 0xfffff, 0x1, "cfg")
   RDW_DEF_FLD( 0x42064, "",19,0, "Specifies the minimum time interval to sample the transition of xoff state,\nthis timer serves as a low pass filter to filter out unnessary transmission\nof pause frame due to coer xoff transition""", "" )
   RDW_DEF("hi", 0x44064, "red_hi2_gbe_CFG_pause_fc_limit","pause configuration""", 0xfffff, 0x1, "cfg")
   RDW_DEF_FLD( 0x44064, "",19,0, "Specifies the minimum time interval to sample the transition of xoff state,\nthis timer serves as a low pass filter to filter out unnessary transmission\nof pause frame due to coer xoff transition""", "" )
   RDW_DEF("hi", 0x46064, "red_hi3_gbe_CFG_pause_fc_limit","pause configuration""", 0xfffff, 0x1, "cfg")
   RDW_DEF_FLD( 0x46064, "",19,0, "Specifies the minimum time interval to sample the transition of xoff state,\nthis timer serves as a low pass filter to filter out unnessary transmission\nof pause frame due to coer xoff transition""", "" )
   RDW_DEF("hi", 0x48064, "red_hi4_gbe_CFG_pause_fc_limit","pause configuration""", 0xfffff, 0x1, "cfg")
   RDW_DEF_FLD( 0x48064, "",19,0, "Specifies the minimum time interval to sample the transition of xoff state,\nthis timer serves as a low pass filter to filter out unnessary transmission\nof pause frame due to coer xoff transition""", "" )
   RDW_DEF("hi", 0x4a064, "red_hi5_gbe_CFG_pause_fc_limit","pause configuration""", 0xfffff, 0x1, "cfg")
   RDW_DEF_FLD( 0x4a064, "",19,0, "Specifies the minimum time interval to sample the transition of xoff state,\nthis timer serves as a low pass filter to filter out unnessary transmission\nof pause frame due to coer xoff transition""", "" )
   RDW_DEF("hi", 0x4c064, "red_hi6_gbe_CFG_pause_fc_limit","pause configuration""", 0xfffff, 0x1, "cfg")
   RDW_DEF_FLD( 0x4c064, "",19,0, "Specifies the minimum time interval to sample the transition of xoff state,\nthis timer serves as a low pass filter to filter out unnessary transmission\nof pause frame due to coer xoff transition""", "" )
   RDW_DEF("hi", 0x4e064, "red_hi7_gbe_CFG_pause_fc_limit","pause configuration""", 0xfffff, 0x1, "cfg")
   RDW_DEF_FLD( 0x4e064, "",19,0, "Specifies the minimum time interval to sample the transition of xoff state,\nthis timer serves as a low pass filter to filter out unnessary transmission\nof pause frame due to coer xoff transition""", "" )


   RDW_DEF("hi", 0x40065, "red_hi0_gbe_CFG_mii_mdc_period","mii config register""", 0xff, 0x3c, "cfg")
   RDW_DEF_FLD( 0x40065, "",7,0, "Specifies the MDIO clock period, uint is the core clcok""", "" )
   RDW_DEF("hi", 0x42065, "red_hi1_gbe_CFG_mii_mdc_period","mii config register""", 0xff, 0x3c, "cfg")
   RDW_DEF_FLD( 0x42065, "",7,0, "Specifies the MDIO clock period, uint is the core clcok""", "" )
   RDW_DEF("hi", 0x44065, "red_hi2_gbe_CFG_mii_mdc_period","mii config register""", 0xff, 0x3c, "cfg")
   RDW_DEF_FLD( 0x44065, "",7,0, "Specifies the MDIO clock period, uint is the core clcok""", "" )
   RDW_DEF("hi", 0x46065, "red_hi3_gbe_CFG_mii_mdc_period","mii config register""", 0xff, 0x3c, "cfg")
   RDW_DEF_FLD( 0x46065, "",7,0, "Specifies the MDIO clock period, uint is the core clcok""", "" )
   RDW_DEF("hi", 0x48065, "red_hi4_gbe_CFG_mii_mdc_period","mii config register""", 0xff, 0x3c, "cfg")
   RDW_DEF_FLD( 0x48065, "",7,0, "Specifies the MDIO clock period, uint is the core clcok""", "" )
   RDW_DEF("hi", 0x4a065, "red_hi5_gbe_CFG_mii_mdc_period","mii config register""", 0xff, 0x3c, "cfg")
   RDW_DEF_FLD( 0x4a065, "",7,0, "Specifies the MDIO clock period, uint is the core clcok""", "" )
   RDW_DEF("hi", 0x4c065, "red_hi6_gbe_CFG_mii_mdc_period","mii config register""", 0xff, 0x3c, "cfg")
   RDW_DEF_FLD( 0x4c065, "",7,0, "Specifies the MDIO clock period, uint is the core clcok""", "" )
   RDW_DEF("hi", 0x4e065, "red_hi7_gbe_CFG_mii_mdc_period","mii config register""", 0xff, 0x3c, "cfg")
   RDW_DEF_FLD( 0x4e065, "",7,0, "Specifies the MDIO clock period, uint is the core clcok""", "" )


   RDW_DEF("hi", 0x40066, "red_hi0_gbe_CFG_mii_mdio","mii config register""", 0x1ffff, 0x13205, "cfg")
   RDW_DEF_FLD( 0x40066, "hold",7,0, "Specifies the MDIO output hold period, need to satisfy at least\n10ns, unit is mac clock which is 8ns for 1GbE""", "" )
   RDW_DEF_FLD( 0x40066, "in_rdy",15,8, "Specifies the MDIO input sampling time, unit is mac clock which\nis 8ns for 1GbE""", "" )
   RDW_DEF_FLD( 0x40066, "sw_rst",16,16, "When asserts, reset the MDIO logic""", "" )
   RDW_DEF("hi", 0x42066, "red_hi1_gbe_CFG_mii_mdio","mii config register""", 0x1ffff, 0x13205, "cfg")
   RDW_DEF_FLD( 0x42066, "hold",7,0, "Specifies the MDIO output hold period, need to satisfy at least\n10ns, unit is mac clock which is 8ns for 1GbE""", "" )
   RDW_DEF_FLD( 0x42066, "in_rdy",15,8, "Specifies the MDIO input sampling time, unit is mac clock which\nis 8ns for 1GbE""", "" )
   RDW_DEF_FLD( 0x42066, "sw_rst",16,16, "When asserts, reset the MDIO logic""", "" )
   RDW_DEF("hi", 0x44066, "red_hi2_gbe_CFG_mii_mdio","mii config register""", 0x1ffff, 0x13205, "cfg")
   RDW_DEF_FLD( 0x44066, "hold",7,0, "Specifies the MDIO output hold period, need to satisfy at least\n10ns, unit is mac clock which is 8ns for 1GbE""", "" )
   RDW_DEF_FLD( 0x44066, "in_rdy",15,8, "Specifies the MDIO input sampling time, unit is mac clock which\nis 8ns for 1GbE""", "" )
   RDW_DEF_FLD( 0x44066, "sw_rst",16,16, "When asserts, reset the MDIO logic""", "" )
   RDW_DEF("hi", 0x46066, "red_hi3_gbe_CFG_mii_mdio","mii config register""", 0x1ffff, 0x13205, "cfg")
   RDW_DEF_FLD( 0x46066, "hold",7,0, "Specifies the MDIO output hold period, need to satisfy at least\n10ns, unit is mac clock which is 8ns for 1GbE""", "" )
   RDW_DEF_FLD( 0x46066, "in_rdy",15,8, "Specifies the MDIO input sampling time, unit is mac clock which\nis 8ns for 1GbE""", "" )
   RDW_DEF_FLD( 0x46066, "sw_rst",16,16, "When asserts, reset the MDIO logic""", "" )
   RDW_DEF("hi", 0x48066, "red_hi4_gbe_CFG_mii_mdio","mii config register""", 0x1ffff, 0x13205, "cfg")
   RDW_DEF_FLD( 0x48066, "hold",7,0, "Specifies the MDIO output hold period, need to satisfy at least\n10ns, unit is mac clock which is 8ns for 1GbE""", "" )
   RDW_DEF_FLD( 0x48066, "in_rdy",15,8, "Specifies the MDIO input sampling time, unit is mac clock which\nis 8ns for 1GbE""", "" )
   RDW_DEF_FLD( 0x48066, "sw_rst",16,16, "When asserts, reset the MDIO logic""", "" )
   RDW_DEF("hi", 0x4a066, "red_hi5_gbe_CFG_mii_mdio","mii config register""", 0x1ffff, 0x13205, "cfg")
   RDW_DEF_FLD( 0x4a066, "hold",7,0, "Specifies the MDIO output hold period, need to satisfy at least\n10ns, unit is mac clock which is 8ns for 1GbE""", "" )
   RDW_DEF_FLD( 0x4a066, "in_rdy",15,8, "Specifies the MDIO input sampling time, unit is mac clock which\nis 8ns for 1GbE""", "" )
   RDW_DEF_FLD( 0x4a066, "sw_rst",16,16, "When asserts, reset the MDIO logic""", "" )
   RDW_DEF("hi", 0x4c066, "red_hi6_gbe_CFG_mii_mdio","mii config register""", 0x1ffff, 0x13205, "cfg")
   RDW_DEF_FLD( 0x4c066, "hold",7,0, "Specifies the MDIO output hold period, need to satisfy at least\n10ns, unit is mac clock which is 8ns for 1GbE""", "" )
   RDW_DEF_FLD( 0x4c066, "in_rdy",15,8, "Specifies the MDIO input sampling time, unit is mac clock which\nis 8ns for 1GbE""", "" )
   RDW_DEF_FLD( 0x4c066, "sw_rst",16,16, "When asserts, reset the MDIO logic""", "" )
   RDW_DEF("hi", 0x4e066, "red_hi7_gbe_CFG_mii_mdio","mii config register""", 0x1ffff, 0x13205, "cfg")
   RDW_DEF_FLD( 0x4e066, "hold",7,0, "Specifies the MDIO output hold period, need to satisfy at least\n10ns, unit is mac clock which is 8ns for 1GbE""", "" )
   RDW_DEF_FLD( 0x4e066, "in_rdy",15,8, "Specifies the MDIO input sampling time, unit is mac clock which\nis 8ns for 1GbE""", "" )
   RDW_DEF_FLD( 0x4e066, "sw_rst",16,16, "When asserts, reset the MDIO logic""", "" )


   RDW_DEF("hi", 0x40067, "red_hi0_gbe_CFG_mii","mii config register""", 0x1fffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40067, "din",15,0, "Specifies the MDIO write data""", "" )
   RDW_DEF_FLD( 0x40067, "regaddr",20,16, "Specifies the MDIO reg address""", "" )
   RDW_DEF_FLD( 0x40067, "phyaddr",25,21, "Specifies the MDIO phy address""", "" )
   RDW_DEF_FLD( 0x40067, "read_write",26,26, "Specifies the MDIO read/write op code""", "" )
   RDW_DEF_FLD( 0x40067, "skip_preamble",27,27, "When asserts, MDIO access suppresses preamble""", "" )
   RDW_DEF_FLD( 0x40067, "go",28,28, "When 0->1 transition, triggers the transmisson of MDIO word""", "" )
   RDW_DEF("hi", 0x42067, "red_hi1_gbe_CFG_mii","mii config register""", 0x1fffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42067, "din",15,0, "Specifies the MDIO write data""", "" )
   RDW_DEF_FLD( 0x42067, "regaddr",20,16, "Specifies the MDIO reg address""", "" )
   RDW_DEF_FLD( 0x42067, "phyaddr",25,21, "Specifies the MDIO phy address""", "" )
   RDW_DEF_FLD( 0x42067, "read_write",26,26, "Specifies the MDIO read/write op code""", "" )
   RDW_DEF_FLD( 0x42067, "skip_preamble",27,27, "When asserts, MDIO access suppresses preamble""", "" )
   RDW_DEF_FLD( 0x42067, "go",28,28, "When 0->1 transition, triggers the transmisson of MDIO word""", "" )
   RDW_DEF("hi", 0x44067, "red_hi2_gbe_CFG_mii","mii config register""", 0x1fffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44067, "din",15,0, "Specifies the MDIO write data""", "" )
   RDW_DEF_FLD( 0x44067, "regaddr",20,16, "Specifies the MDIO reg address""", "" )
   RDW_DEF_FLD( 0x44067, "phyaddr",25,21, "Specifies the MDIO phy address""", "" )
   RDW_DEF_FLD( 0x44067, "read_write",26,26, "Specifies the MDIO read/write op code""", "" )
   RDW_DEF_FLD( 0x44067, "skip_preamble",27,27, "When asserts, MDIO access suppresses preamble""", "" )
   RDW_DEF_FLD( 0x44067, "go",28,28, "When 0->1 transition, triggers the transmisson of MDIO word""", "" )
   RDW_DEF("hi", 0x46067, "red_hi3_gbe_CFG_mii","mii config register""", 0x1fffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46067, "din",15,0, "Specifies the MDIO write data""", "" )
   RDW_DEF_FLD( 0x46067, "regaddr",20,16, "Specifies the MDIO reg address""", "" )
   RDW_DEF_FLD( 0x46067, "phyaddr",25,21, "Specifies the MDIO phy address""", "" )
   RDW_DEF_FLD( 0x46067, "read_write",26,26, "Specifies the MDIO read/write op code""", "" )
   RDW_DEF_FLD( 0x46067, "skip_preamble",27,27, "When asserts, MDIO access suppresses preamble""", "" )
   RDW_DEF_FLD( 0x46067, "go",28,28, "When 0->1 transition, triggers the transmisson of MDIO word""", "" )
   RDW_DEF("hi", 0x48067, "red_hi4_gbe_CFG_mii","mii config register""", 0x1fffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48067, "din",15,0, "Specifies the MDIO write data""", "" )
   RDW_DEF_FLD( 0x48067, "regaddr",20,16, "Specifies the MDIO reg address""", "" )
   RDW_DEF_FLD( 0x48067, "phyaddr",25,21, "Specifies the MDIO phy address""", "" )
   RDW_DEF_FLD( 0x48067, "read_write",26,26, "Specifies the MDIO read/write op code""", "" )
   RDW_DEF_FLD( 0x48067, "skip_preamble",27,27, "When asserts, MDIO access suppresses preamble""", "" )
   RDW_DEF_FLD( 0x48067, "go",28,28, "When 0->1 transition, triggers the transmisson of MDIO word""", "" )
   RDW_DEF("hi", 0x4a067, "red_hi5_gbe_CFG_mii","mii config register""", 0x1fffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a067, "din",15,0, "Specifies the MDIO write data""", "" )
   RDW_DEF_FLD( 0x4a067, "regaddr",20,16, "Specifies the MDIO reg address""", "" )
   RDW_DEF_FLD( 0x4a067, "phyaddr",25,21, "Specifies the MDIO phy address""", "" )
   RDW_DEF_FLD( 0x4a067, "read_write",26,26, "Specifies the MDIO read/write op code""", "" )
   RDW_DEF_FLD( 0x4a067, "skip_preamble",27,27, "When asserts, MDIO access suppresses preamble""", "" )
   RDW_DEF_FLD( 0x4a067, "go",28,28, "When 0->1 transition, triggers the transmisson of MDIO word""", "" )
   RDW_DEF("hi", 0x4c067, "red_hi6_gbe_CFG_mii","mii config register""", 0x1fffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c067, "din",15,0, "Specifies the MDIO write data""", "" )
   RDW_DEF_FLD( 0x4c067, "regaddr",20,16, "Specifies the MDIO reg address""", "" )
   RDW_DEF_FLD( 0x4c067, "phyaddr",25,21, "Specifies the MDIO phy address""", "" )
   RDW_DEF_FLD( 0x4c067, "read_write",26,26, "Specifies the MDIO read/write op code""", "" )
   RDW_DEF_FLD( 0x4c067, "skip_preamble",27,27, "When asserts, MDIO access suppresses preamble""", "" )
   RDW_DEF_FLD( 0x4c067, "go",28,28, "When 0->1 transition, triggers the transmisson of MDIO word""", "" )
   RDW_DEF("hi", 0x4e067, "red_hi7_gbe_CFG_mii","mii config register""", 0x1fffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e067, "din",15,0, "Specifies the MDIO write data""", "" )
   RDW_DEF_FLD( 0x4e067, "regaddr",20,16, "Specifies the MDIO reg address""", "" )
   RDW_DEF_FLD( 0x4e067, "phyaddr",25,21, "Specifies the MDIO phy address""", "" )
   RDW_DEF_FLD( 0x4e067, "read_write",26,26, "Specifies the MDIO read/write op code""", "" )
   RDW_DEF_FLD( 0x4e067, "skip_preamble",27,27, "When asserts, MDIO access suppresses preamble""", "" )
   RDW_DEF_FLD( 0x4e067, "go",28,28, "When 0->1 transition, triggers the transmisson of MDIO word""", "" )


   RDW_DEF("hi", 0x40068, "red_hi0_gbe_STA_mii","mii stat register""", 0x1ffff, 0x0, "sta")
   RDW_DEF_FLD( 0x40068, "dout",15,0, "MDIO read data from PHYs""", "" )
   RDW_DEF_FLD( 0x40068, "busy",16,16, "Status indicate if the MDIO access is complete or not\n1: MDIO access is in porgress\n0: MDIO access is complete""", "" )
   RDW_DEF("hi", 0x42068, "red_hi1_gbe_STA_mii","mii stat register""", 0x1ffff, 0x0, "sta")
   RDW_DEF_FLD( 0x42068, "dout",15,0, "MDIO read data from PHYs""", "" )
   RDW_DEF_FLD( 0x42068, "busy",16,16, "Status indicate if the MDIO access is complete or not\n1: MDIO access is in porgress\n0: MDIO access is complete""", "" )
   RDW_DEF("hi", 0x44068, "red_hi2_gbe_STA_mii","mii stat register""", 0x1ffff, 0x0, "sta")
   RDW_DEF_FLD( 0x44068, "dout",15,0, "MDIO read data from PHYs""", "" )
   RDW_DEF_FLD( 0x44068, "busy",16,16, "Status indicate if the MDIO access is complete or not\n1: MDIO access is in porgress\n0: MDIO access is complete""", "" )
   RDW_DEF("hi", 0x46068, "red_hi3_gbe_STA_mii","mii stat register""", 0x1ffff, 0x0, "sta")
   RDW_DEF_FLD( 0x46068, "dout",15,0, "MDIO read data from PHYs""", "" )
   RDW_DEF_FLD( 0x46068, "busy",16,16, "Status indicate if the MDIO access is complete or not\n1: MDIO access is in porgress\n0: MDIO access is complete""", "" )
   RDW_DEF("hi", 0x48068, "red_hi4_gbe_STA_mii","mii stat register""", 0x1ffff, 0x0, "sta")
   RDW_DEF_FLD( 0x48068, "dout",15,0, "MDIO read data from PHYs""", "" )
   RDW_DEF_FLD( 0x48068, "busy",16,16, "Status indicate if the MDIO access is complete or not\n1: MDIO access is in porgress\n0: MDIO access is complete""", "" )
   RDW_DEF("hi", 0x4a068, "red_hi5_gbe_STA_mii","mii stat register""", 0x1ffff, 0x0, "sta")
   RDW_DEF_FLD( 0x4a068, "dout",15,0, "MDIO read data from PHYs""", "" )
   RDW_DEF_FLD( 0x4a068, "busy",16,16, "Status indicate if the MDIO access is complete or not\n1: MDIO access is in porgress\n0: MDIO access is complete""", "" )
   RDW_DEF("hi", 0x4c068, "red_hi6_gbe_STA_mii","mii stat register""", 0x1ffff, 0x0, "sta")
   RDW_DEF_FLD( 0x4c068, "dout",15,0, "MDIO read data from PHYs""", "" )
   RDW_DEF_FLD( 0x4c068, "busy",16,16, "Status indicate if the MDIO access is complete or not\n1: MDIO access is in porgress\n0: MDIO access is complete""", "" )
   RDW_DEF("hi", 0x4e068, "red_hi7_gbe_STA_mii","mii stat register""", 0x1ffff, 0x0, "sta")
   RDW_DEF_FLD( 0x4e068, "dout",15,0, "MDIO read data from PHYs""", "" )
   RDW_DEF_FLD( 0x4e068, "busy",16,16, "Status indicate if the MDIO access is complete or not\n1: MDIO access is in porgress\n0: MDIO access is complete""", "" )


   RDW_DEF("hi", 0x40069, "red_hi0_gbe_CFG_rma","rma config register""", 0x7, 0x4, "cfg")
   RDW_DEF_FLD( 0x40069, "ignore_ctl_da",0,0, "When asserts, MAC control frame qualification does\nnot include MAC DA comparision""", "" )
   RDW_DEF_FLD( 0x40069, "dont_pause",1,1, "When asserts, do not activate pause timer""", "" )
   RDW_DEF_FLD( 0x40069, "rx_ctl_frm_en",2,2, "When asserts, enable MAC control frame receive""", "" )
   RDW_DEF("hi", 0x42069, "red_hi1_gbe_CFG_rma","rma config register""", 0x7, 0x4, "cfg")
   RDW_DEF_FLD( 0x42069, "ignore_ctl_da",0,0, "When asserts, MAC control frame qualification does\nnot include MAC DA comparision""", "" )
   RDW_DEF_FLD( 0x42069, "dont_pause",1,1, "When asserts, do not activate pause timer""", "" )
   RDW_DEF_FLD( 0x42069, "rx_ctl_frm_en",2,2, "When asserts, enable MAC control frame receive""", "" )
   RDW_DEF("hi", 0x44069, "red_hi2_gbe_CFG_rma","rma config register""", 0x7, 0x4, "cfg")
   RDW_DEF_FLD( 0x44069, "ignore_ctl_da",0,0, "When asserts, MAC control frame qualification does\nnot include MAC DA comparision""", "" )
   RDW_DEF_FLD( 0x44069, "dont_pause",1,1, "When asserts, do not activate pause timer""", "" )
   RDW_DEF_FLD( 0x44069, "rx_ctl_frm_en",2,2, "When asserts, enable MAC control frame receive""", "" )
   RDW_DEF("hi", 0x46069, "red_hi3_gbe_CFG_rma","rma config register""", 0x7, 0x4, "cfg")
   RDW_DEF_FLD( 0x46069, "ignore_ctl_da",0,0, "When asserts, MAC control frame qualification does\nnot include MAC DA comparision""", "" )
   RDW_DEF_FLD( 0x46069, "dont_pause",1,1, "When asserts, do not activate pause timer""", "" )
   RDW_DEF_FLD( 0x46069, "rx_ctl_frm_en",2,2, "When asserts, enable MAC control frame receive""", "" )
   RDW_DEF("hi", 0x48069, "red_hi4_gbe_CFG_rma","rma config register""", 0x7, 0x4, "cfg")
   RDW_DEF_FLD( 0x48069, "ignore_ctl_da",0,0, "When asserts, MAC control frame qualification does\nnot include MAC DA comparision""", "" )
   RDW_DEF_FLD( 0x48069, "dont_pause",1,1, "When asserts, do not activate pause timer""", "" )
   RDW_DEF_FLD( 0x48069, "rx_ctl_frm_en",2,2, "When asserts, enable MAC control frame receive""", "" )
   RDW_DEF("hi", 0x4a069, "red_hi5_gbe_CFG_rma","rma config register""", 0x7, 0x4, "cfg")
   RDW_DEF_FLD( 0x4a069, "ignore_ctl_da",0,0, "When asserts, MAC control frame qualification does\nnot include MAC DA comparision""", "" )
   RDW_DEF_FLD( 0x4a069, "dont_pause",1,1, "When asserts, do not activate pause timer""", "" )
   RDW_DEF_FLD( 0x4a069, "rx_ctl_frm_en",2,2, "When asserts, enable MAC control frame receive""", "" )
   RDW_DEF("hi", 0x4c069, "red_hi6_gbe_CFG_rma","rma config register""", 0x7, 0x4, "cfg")
   RDW_DEF_FLD( 0x4c069, "ignore_ctl_da",0,0, "When asserts, MAC control frame qualification does\nnot include MAC DA comparision""", "" )
   RDW_DEF_FLD( 0x4c069, "dont_pause",1,1, "When asserts, do not activate pause timer""", "" )
   RDW_DEF_FLD( 0x4c069, "rx_ctl_frm_en",2,2, "When asserts, enable MAC control frame receive""", "" )
   RDW_DEF("hi", 0x4e069, "red_hi7_gbe_CFG_rma","rma config register""", 0x7, 0x4, "cfg")
   RDW_DEF_FLD( 0x4e069, "ignore_ctl_da",0,0, "When asserts, MAC control frame qualification does\nnot include MAC DA comparision""", "" )
   RDW_DEF_FLD( 0x4e069, "dont_pause",1,1, "When asserts, do not activate pause timer""", "" )
   RDW_DEF_FLD( 0x4e069, "rx_ctl_frm_en",2,2, "When asserts, enable MAC control frame receive""", "" )


   RDW_DEF("hi", 0x4006a, "red_hi0_gbe_CFG_rma_fc","rma config register""", 0xffffffff, 0x18808, "cfg")
   RDW_DEF_FLD( 0x4006a, "type",15,0, "Specifies the EtherType for MAC control frame""", "" )
   RDW_DEF_FLD( 0x4006a, "opcode",31,16, "Specifies the Mac OpCode for MAC control frame""", "" )
   RDW_DEF("hi", 0x4206a, "red_hi1_gbe_CFG_rma_fc","rma config register""", 0xffffffff, 0x18808, "cfg")
   RDW_DEF_FLD( 0x4206a, "type",15,0, "Specifies the EtherType for MAC control frame""", "" )
   RDW_DEF_FLD( 0x4206a, "opcode",31,16, "Specifies the Mac OpCode for MAC control frame""", "" )
   RDW_DEF("hi", 0x4406a, "red_hi2_gbe_CFG_rma_fc","rma config register""", 0xffffffff, 0x18808, "cfg")
   RDW_DEF_FLD( 0x4406a, "type",15,0, "Specifies the EtherType for MAC control frame""", "" )
   RDW_DEF_FLD( 0x4406a, "opcode",31,16, "Specifies the Mac OpCode for MAC control frame""", "" )
   RDW_DEF("hi", 0x4606a, "red_hi3_gbe_CFG_rma_fc","rma config register""", 0xffffffff, 0x18808, "cfg")
   RDW_DEF_FLD( 0x4606a, "type",15,0, "Specifies the EtherType for MAC control frame""", "" )
   RDW_DEF_FLD( 0x4606a, "opcode",31,16, "Specifies the Mac OpCode for MAC control frame""", "" )
   RDW_DEF("hi", 0x4806a, "red_hi4_gbe_CFG_rma_fc","rma config register""", 0xffffffff, 0x18808, "cfg")
   RDW_DEF_FLD( 0x4806a, "type",15,0, "Specifies the EtherType for MAC control frame""", "" )
   RDW_DEF_FLD( 0x4806a, "opcode",31,16, "Specifies the Mac OpCode for MAC control frame""", "" )
   RDW_DEF("hi", 0x4a06a, "red_hi5_gbe_CFG_rma_fc","rma config register""", 0xffffffff, 0x18808, "cfg")
   RDW_DEF_FLD( 0x4a06a, "type",15,0, "Specifies the EtherType for MAC control frame""", "" )
   RDW_DEF_FLD( 0x4a06a, "opcode",31,16, "Specifies the Mac OpCode for MAC control frame""", "" )
   RDW_DEF("hi", 0x4c06a, "red_hi6_gbe_CFG_rma_fc","rma config register""", 0xffffffff, 0x18808, "cfg")
   RDW_DEF_FLD( 0x4c06a, "type",15,0, "Specifies the EtherType for MAC control frame""", "" )
   RDW_DEF_FLD( 0x4c06a, "opcode",31,16, "Specifies the Mac OpCode for MAC control frame""", "" )
   RDW_DEF("hi", 0x4e06a, "red_hi7_gbe_CFG_rma_fc","rma config register""", 0xffffffff, 0x18808, "cfg")
   RDW_DEF_FLD( 0x4e06a, "type",15,0, "Specifies the EtherType for MAC control frame""", "" )
   RDW_DEF_FLD( 0x4e06a, "opcode",31,16, "Specifies the Mac OpCode for MAC control frame""", "" )


   RDW_DEF("hi", 0x4006b, "red_hi0_gbe_CFG_rma_fc_da_hi","rma config register""", 0xffff, 0x180, "cfg")
   RDW_DEF_FLD( 0x4006b, "",15,0, "Specifies the MAC DA bit[47:32] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4206b, "red_hi1_gbe_CFG_rma_fc_da_hi","rma config register""", 0xffff, 0x180, "cfg")
   RDW_DEF_FLD( 0x4206b, "",15,0, "Specifies the MAC DA bit[47:32] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4406b, "red_hi2_gbe_CFG_rma_fc_da_hi","rma config register""", 0xffff, 0x180, "cfg")
   RDW_DEF_FLD( 0x4406b, "",15,0, "Specifies the MAC DA bit[47:32] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4606b, "red_hi3_gbe_CFG_rma_fc_da_hi","rma config register""", 0xffff, 0x180, "cfg")
   RDW_DEF_FLD( 0x4606b, "",15,0, "Specifies the MAC DA bit[47:32] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4806b, "red_hi4_gbe_CFG_rma_fc_da_hi","rma config register""", 0xffff, 0x180, "cfg")
   RDW_DEF_FLD( 0x4806b, "",15,0, "Specifies the MAC DA bit[47:32] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4a06b, "red_hi5_gbe_CFG_rma_fc_da_hi","rma config register""", 0xffff, 0x180, "cfg")
   RDW_DEF_FLD( 0x4a06b, "",15,0, "Specifies the MAC DA bit[47:32] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4c06b, "red_hi6_gbe_CFG_rma_fc_da_hi","rma config register""", 0xffff, 0x180, "cfg")
   RDW_DEF_FLD( 0x4c06b, "",15,0, "Specifies the MAC DA bit[47:32] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4e06b, "red_hi7_gbe_CFG_rma_fc_da_hi","rma config register""", 0xffff, 0x180, "cfg")
   RDW_DEF_FLD( 0x4e06b, "",15,0, "Specifies the MAC DA bit[47:32] for MAC control frame""", "" )


   RDW_DEF("hi", 0x4006c, "red_hi0_gbe_CFG_rma_fc_da_lo","rma config register""", 0xffffffff, 0xc2000001, "cfg")
   RDW_DEF_FLD( 0x4006c, "",31,0, "Specifies the MAC DA bit[31:0] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4206c, "red_hi1_gbe_CFG_rma_fc_da_lo","rma config register""", 0xffffffff, 0xc2000001, "cfg")
   RDW_DEF_FLD( 0x4206c, "",31,0, "Specifies the MAC DA bit[31:0] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4406c, "red_hi2_gbe_CFG_rma_fc_da_lo","rma config register""", 0xffffffff, 0xc2000001, "cfg")
   RDW_DEF_FLD( 0x4406c, "",31,0, "Specifies the MAC DA bit[31:0] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4606c, "red_hi3_gbe_CFG_rma_fc_da_lo","rma config register""", 0xffffffff, 0xc2000001, "cfg")
   RDW_DEF_FLD( 0x4606c, "",31,0, "Specifies the MAC DA bit[31:0] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4806c, "red_hi4_gbe_CFG_rma_fc_da_lo","rma config register""", 0xffffffff, 0xc2000001, "cfg")
   RDW_DEF_FLD( 0x4806c, "",31,0, "Specifies the MAC DA bit[31:0] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4a06c, "red_hi5_gbe_CFG_rma_fc_da_lo","rma config register""", 0xffffffff, 0xc2000001, "cfg")
   RDW_DEF_FLD( 0x4a06c, "",31,0, "Specifies the MAC DA bit[31:0] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4c06c, "red_hi6_gbe_CFG_rma_fc_da_lo","rma config register""", 0xffffffff, 0xc2000001, "cfg")
   RDW_DEF_FLD( 0x4c06c, "",31,0, "Specifies the MAC DA bit[31:0] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4e06c, "red_hi7_gbe_CFG_rma_fc_da_lo","rma config register""", 0xffffffff, 0xc2000001, "cfg")
   RDW_DEF_FLD( 0x4e06c, "",31,0, "Specifies the MAC DA bit[31:0] for MAC control frame""", "" )


   RDW_DEF("hi", 0x4006d, "red_hi0_gbe_CFG_rma_sa_hi","rma config register""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4006d, "",15,0, "Specifies the MAC SA bit[47:32] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4206d, "red_hi1_gbe_CFG_rma_sa_hi","rma config register""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4206d, "",15,0, "Specifies the MAC SA bit[47:32] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4406d, "red_hi2_gbe_CFG_rma_sa_hi","rma config register""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4406d, "",15,0, "Specifies the MAC SA bit[47:32] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4606d, "red_hi3_gbe_CFG_rma_sa_hi","rma config register""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4606d, "",15,0, "Specifies the MAC SA bit[47:32] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4806d, "red_hi4_gbe_CFG_rma_sa_hi","rma config register""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4806d, "",15,0, "Specifies the MAC SA bit[47:32] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4a06d, "red_hi5_gbe_CFG_rma_sa_hi","rma config register""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a06d, "",15,0, "Specifies the MAC SA bit[47:32] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4c06d, "red_hi6_gbe_CFG_rma_sa_hi","rma config register""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c06d, "",15,0, "Specifies the MAC SA bit[47:32] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4e06d, "red_hi7_gbe_CFG_rma_sa_hi","rma config register""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e06d, "",15,0, "Specifies the MAC SA bit[47:32] for MAC control frame""", "" )


   RDW_DEF("hi", 0x4006e, "red_hi0_gbe_CFG_rma_sa_lo","rma config register""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4006e, "",31,0, "Specifies the MAC SA bit[31:0] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4206e, "red_hi1_gbe_CFG_rma_sa_lo","rma config register""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4206e, "",31,0, "Specifies the MAC SA bit[31:0] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4406e, "red_hi2_gbe_CFG_rma_sa_lo","rma config register""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4406e, "",31,0, "Specifies the MAC SA bit[31:0] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4606e, "red_hi3_gbe_CFG_rma_sa_lo","rma config register""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4606e, "",31,0, "Specifies the MAC SA bit[31:0] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4806e, "red_hi4_gbe_CFG_rma_sa_lo","rma config register""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4806e, "",31,0, "Specifies the MAC SA bit[31:0] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4a06e, "red_hi5_gbe_CFG_rma_sa_lo","rma config register""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a06e, "",31,0, "Specifies the MAC SA bit[31:0] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4c06e, "red_hi6_gbe_CFG_rma_sa_lo","rma config register""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c06e, "",31,0, "Specifies the MAC SA bit[31:0] for MAC control frame""", "" )
   RDW_DEF("hi", 0x4e06e, "red_hi7_gbe_CFG_rma_sa_lo","rma config register""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e06e, "",31,0, "Specifies the MAC SA bit[31:0] for MAC control frame""", "" )


   RDW_DEF("hi", 0x4006f, "red_hi0_gbe_CNT_rma0","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4006f, "drop_ctl_pkt",31,0, "Statistics for dropped MAC control frame""", "" )
   RDW_DEF("hi", 0x4206f, "red_hi1_gbe_CNT_rma0","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4206f, "drop_ctl_pkt",31,0, "Statistics for dropped MAC control frame""", "" )
   RDW_DEF("hi", 0x4406f, "red_hi2_gbe_CNT_rma0","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4406f, "drop_ctl_pkt",31,0, "Statistics for dropped MAC control frame""", "" )
   RDW_DEF("hi", 0x4606f, "red_hi3_gbe_CNT_rma0","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4606f, "drop_ctl_pkt",31,0, "Statistics for dropped MAC control frame""", "" )
   RDW_DEF("hi", 0x4806f, "red_hi4_gbe_CNT_rma0","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4806f, "drop_ctl_pkt",31,0, "Statistics for dropped MAC control frame""", "" )
   RDW_DEF("hi", 0x4a06f, "red_hi5_gbe_CNT_rma0","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4a06f, "drop_ctl_pkt",31,0, "Statistics for dropped MAC control frame""", "" )
   RDW_DEF("hi", 0x4c06f, "red_hi6_gbe_CNT_rma0","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4c06f, "drop_ctl_pkt",31,0, "Statistics for dropped MAC control frame""", "" )
   RDW_DEF("hi", 0x4e06f, "red_hi7_gbe_CNT_rma0","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4e06f, "drop_ctl_pkt",31,0, "Statistics for dropped MAC control frame""", "" )


   RDW_DEF("hi", 0x40070, "red_hi0_gbe_CNT_rma1","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x40070, "rx_pause",31,0, "Statistics for received pause frame""", "" )
   RDW_DEF("hi", 0x42070, "red_hi1_gbe_CNT_rma1","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x42070, "rx_pause",31,0, "Statistics for received pause frame""", "" )
   RDW_DEF("hi", 0x44070, "red_hi2_gbe_CNT_rma1","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x44070, "rx_pause",31,0, "Statistics for received pause frame""", "" )
   RDW_DEF("hi", 0x46070, "red_hi3_gbe_CNT_rma1","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x46070, "rx_pause",31,0, "Statistics for received pause frame""", "" )
   RDW_DEF("hi", 0x48070, "red_hi4_gbe_CNT_rma1","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x48070, "rx_pause",31,0, "Statistics for received pause frame""", "" )
   RDW_DEF("hi", 0x4a070, "red_hi5_gbe_CNT_rma1","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4a070, "rx_pause",31,0, "Statistics for received pause frame""", "" )
   RDW_DEF("hi", 0x4c070, "red_hi6_gbe_CNT_rma1","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4c070, "rx_pause",31,0, "Statistics for received pause frame""", "" )
   RDW_DEF("hi", 0x4e070, "red_hi7_gbe_CNT_rma1","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4e070, "rx_pause",31,0, "Statistics for received pause frame""", "" )


   RDW_DEF("hi", 0x40071, "red_hi0_gbe_CNT_rma2","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x40071, "rx_ctl_pkt",31,0, "Statistics for received MAC ctrl frame""", "" )
   RDW_DEF("hi", 0x42071, "red_hi1_gbe_CNT_rma2","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x42071, "rx_ctl_pkt",31,0, "Statistics for received MAC ctrl frame""", "" )
   RDW_DEF("hi", 0x44071, "red_hi2_gbe_CNT_rma2","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x44071, "rx_ctl_pkt",31,0, "Statistics for received MAC ctrl frame""", "" )
   RDW_DEF("hi", 0x46071, "red_hi3_gbe_CNT_rma2","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x46071, "rx_ctl_pkt",31,0, "Statistics for received MAC ctrl frame""", "" )
   RDW_DEF("hi", 0x48071, "red_hi4_gbe_CNT_rma2","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x48071, "rx_ctl_pkt",31,0, "Statistics for received MAC ctrl frame""", "" )
   RDW_DEF("hi", 0x4a071, "red_hi5_gbe_CNT_rma2","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4a071, "rx_ctl_pkt",31,0, "Statistics for received MAC ctrl frame""", "" )
   RDW_DEF("hi", 0x4c071, "red_hi6_gbe_CNT_rma2","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4c071, "rx_ctl_pkt",31,0, "Statistics for received MAC ctrl frame""", "" )
   RDW_DEF("hi", 0x4e071, "red_hi7_gbe_CNT_rma2","rma stats register""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4e071, "rx_ctl_pkt",31,0, "Statistics for received MAC ctrl frame""", "" )


   RDW_DEF("hi", 0x40072, "red_hi0_gbe_INT","interrupt register""", 0xffff, 0x0, "int")
   RDW_DEF_FLD( 0x40072, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x40072, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x40072, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x40072, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x40072, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x40072, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x40072, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x40072, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x40072, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x40072, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x40072, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x40072, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x40072, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x40072, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x40072, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x40072, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )
   RDW_DEF("hi", 0x42072, "red_hi1_gbe_INT","interrupt register""", 0xffff, 0x0, "int")
   RDW_DEF_FLD( 0x42072, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x42072, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x42072, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x42072, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x42072, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x42072, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x42072, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x42072, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x42072, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x42072, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x42072, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x42072, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x42072, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x42072, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x42072, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x42072, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )
   RDW_DEF("hi", 0x44072, "red_hi2_gbe_INT","interrupt register""", 0xffff, 0x0, "int")
   RDW_DEF_FLD( 0x44072, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x44072, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x44072, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x44072, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x44072, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x44072, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x44072, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x44072, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x44072, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x44072, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x44072, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x44072, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x44072, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x44072, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x44072, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x44072, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )
   RDW_DEF("hi", 0x46072, "red_hi3_gbe_INT","interrupt register""", 0xffff, 0x0, "int")
   RDW_DEF_FLD( 0x46072, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x46072, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x46072, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x46072, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x46072, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x46072, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x46072, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x46072, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x46072, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x46072, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x46072, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x46072, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x46072, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x46072, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x46072, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x46072, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )
   RDW_DEF("hi", 0x48072, "red_hi4_gbe_INT","interrupt register""", 0xffff, 0x0, "int")
   RDW_DEF_FLD( 0x48072, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x48072, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x48072, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x48072, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x48072, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x48072, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x48072, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x48072, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x48072, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x48072, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x48072, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x48072, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x48072, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x48072, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x48072, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x48072, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )
   RDW_DEF("hi", 0x4a072, "red_hi5_gbe_INT","interrupt register""", 0xffff, 0x0, "int")
   RDW_DEF_FLD( 0x4a072, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x4a072, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x4a072, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x4a072, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x4a072, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x4a072, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4a072, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x4a072, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x4a072, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x4a072, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x4a072, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x4a072, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x4a072, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x4a072, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x4a072, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x4a072, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )
   RDW_DEF("hi", 0x4c072, "red_hi6_gbe_INT","interrupt register""", 0xffff, 0x0, "int")
   RDW_DEF_FLD( 0x4c072, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x4c072, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x4c072, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x4c072, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x4c072, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x4c072, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4c072, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x4c072, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x4c072, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x4c072, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x4c072, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x4c072, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x4c072, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x4c072, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x4c072, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x4c072, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )
   RDW_DEF("hi", 0x4e072, "red_hi7_gbe_INT","interrupt register""", 0xffff, 0x0, "int")
   RDW_DEF_FLD( 0x4e072, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x4e072, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x4e072, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x4e072, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x4e072, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x4e072, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4e072, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x4e072, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x4e072, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x4e072, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x4e072, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x4e072, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x4e072, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x4e072, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x4e072, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x4e072, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )


   RDW_DEF("hi", 0x40073, "red_hi0_gbe_INT_msk","interrupt register""", 0xffff, 0x1800, "int_msk")
   RDW_DEF_FLD( 0x40073, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x40073, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x40073, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x40073, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x40073, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x40073, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x40073, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x40073, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x40073, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x40073, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x40073, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x40073, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x40073, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x40073, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x40073, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x40073, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )
   RDW_DEF("hi", 0x42073, "red_hi1_gbe_INT_msk","interrupt register""", 0xffff, 0x1800, "int_msk")
   RDW_DEF_FLD( 0x42073, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x42073, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x42073, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x42073, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x42073, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x42073, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x42073, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x42073, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x42073, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x42073, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x42073, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x42073, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x42073, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x42073, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x42073, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x42073, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )
   RDW_DEF("hi", 0x44073, "red_hi2_gbe_INT_msk","interrupt register""", 0xffff, 0x1800, "int_msk")
   RDW_DEF_FLD( 0x44073, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x44073, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x44073, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x44073, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x44073, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x44073, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x44073, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x44073, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x44073, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x44073, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x44073, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x44073, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x44073, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x44073, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x44073, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x44073, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )
   RDW_DEF("hi", 0x46073, "red_hi3_gbe_INT_msk","interrupt register""", 0xffff, 0x1800, "int_msk")
   RDW_DEF_FLD( 0x46073, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x46073, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x46073, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x46073, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x46073, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x46073, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x46073, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x46073, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x46073, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x46073, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x46073, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x46073, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x46073, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x46073, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x46073, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x46073, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )
   RDW_DEF("hi", 0x48073, "red_hi4_gbe_INT_msk","interrupt register""", 0xffff, 0x1800, "int_msk")
   RDW_DEF_FLD( 0x48073, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x48073, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x48073, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x48073, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x48073, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x48073, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x48073, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x48073, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x48073, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x48073, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x48073, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x48073, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x48073, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x48073, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x48073, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x48073, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )
   RDW_DEF("hi", 0x4a073, "red_hi5_gbe_INT_msk","interrupt register""", 0xffff, 0x1800, "int_msk")
   RDW_DEF_FLD( 0x4a073, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x4a073, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x4a073, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x4a073, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x4a073, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x4a073, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4a073, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x4a073, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x4a073, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x4a073, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x4a073, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x4a073, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x4a073, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x4a073, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x4a073, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x4a073, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )
   RDW_DEF("hi", 0x4c073, "red_hi6_gbe_INT_msk","interrupt register""", 0xffff, 0x1800, "int_msk")
   RDW_DEF_FLD( 0x4c073, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x4c073, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x4c073, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x4c073, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x4c073, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x4c073, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4c073, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x4c073, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x4c073, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x4c073, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x4c073, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x4c073, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x4c073, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x4c073, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x4c073, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x4c073, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )
   RDW_DEF("hi", 0x4e073, "red_hi7_gbe_INT_msk","interrupt register""", 0xffff, 0x1800, "int_msk")
   RDW_DEF_FLD( 0x4e073, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x4e073, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x4e073, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x4e073, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x4e073, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x4e073, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4e073, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x4e073, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x4e073, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x4e073, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x4e073, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x4e073, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x4e073, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x4e073, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x4e073, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x4e073, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )


   RDW_DEF("hi", 0x40074, "red_hi0_gbe_INT_tst","interrupt register""", 0xffff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x40074, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x40074, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x40074, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x40074, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x40074, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x40074, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x40074, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x40074, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x40074, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x40074, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x40074, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x40074, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x40074, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x40074, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x40074, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x40074, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )
   RDW_DEF("hi", 0x42074, "red_hi1_gbe_INT_tst","interrupt register""", 0xffff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x42074, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x42074, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x42074, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x42074, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x42074, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x42074, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x42074, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x42074, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x42074, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x42074, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x42074, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x42074, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x42074, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x42074, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x42074, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x42074, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )
   RDW_DEF("hi", 0x44074, "red_hi2_gbe_INT_tst","interrupt register""", 0xffff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x44074, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x44074, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x44074, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x44074, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x44074, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x44074, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x44074, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x44074, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x44074, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x44074, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x44074, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x44074, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x44074, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x44074, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x44074, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x44074, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )
   RDW_DEF("hi", 0x46074, "red_hi3_gbe_INT_tst","interrupt register""", 0xffff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x46074, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x46074, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x46074, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x46074, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x46074, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x46074, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x46074, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x46074, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x46074, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x46074, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x46074, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x46074, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x46074, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x46074, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x46074, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x46074, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )
   RDW_DEF("hi", 0x48074, "red_hi4_gbe_INT_tst","interrupt register""", 0xffff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x48074, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x48074, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x48074, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x48074, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x48074, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x48074, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x48074, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x48074, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x48074, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x48074, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x48074, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x48074, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x48074, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x48074, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x48074, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x48074, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )
   RDW_DEF("hi", 0x4a074, "red_hi5_gbe_INT_tst","interrupt register""", 0xffff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x4a074, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x4a074, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x4a074, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x4a074, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x4a074, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x4a074, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4a074, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x4a074, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x4a074, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x4a074, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x4a074, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x4a074, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x4a074, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x4a074, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x4a074, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x4a074, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )
   RDW_DEF("hi", 0x4c074, "red_hi6_gbe_INT_tst","interrupt register""", 0xffff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x4c074, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x4c074, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x4c074, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x4c074, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x4c074, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x4c074, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4c074, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x4c074, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x4c074, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x4c074, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x4c074, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x4c074, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x4c074, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x4c074, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x4c074, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x4c074, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )
   RDW_DEF("hi", 0x4e074, "red_hi7_gbe_INT_tst","interrupt register""", 0xffff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x4e074, "rx_pkt_crc_err",0,0, "When asserts, indicate crc error packet is received""", "" )
   RDW_DEF_FLD( 0x4e074, "rx_symbol_err",1,1, "When asserts, indicate error 8B/10B symbol is received""", "" )
   RDW_DEF_FLD( 0x4e074, "rx_sequence_err",2,2, "When asserts, indicate error sequence received""", "" )
   RDW_DEF_FLD( 0x4e074, "rx_invalid_code_err",3,3, "When asserts, indicate invalid 8B/10B code is received""", "" )
   RDW_DEF_FLD( 0x4e074, "rma_fc_err",4,4, "When asserts, indicate error flow control frame is received""", "" )
   RDW_DEF_FLD( 0x4e074, "rx_fifo_ovfl",5,5, "When asserts, indicate receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4e074, "rx_fifo_udfl",6,6, "When asserts, indicate receive fifo underflow""", "" )
   RDW_DEF_FLD( 0x4e074, "rx_an_complete",7,7, "When asserts, indicate auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x4e074, "rx_oversize",8,8, "When asserts, indicate oversize packet is received""", "" )
   RDW_DEF_FLD( 0x4e074, "rx_undersize",9,9, "When asserts, indicate undersize packet is received""", "" )
   RDW_DEF_FLD( 0x4e074, "rx_pkt_err",10,10, "When asserts, indicate error packet is received""", "" )
   RDW_DEF_FLD( 0x4e074, "rx_in_sync",11,11, "When asserts, indicate the rx link is synchronized""", "" )
   RDW_DEF_FLD( 0x4e074, "rx_out_of_sync",12,12, "When asserts, indicate the rx link os out of synchronization""", "" )
   RDW_DEF_FLD( 0x4e074, "an_fsm_to_an_enable_st",13,13, "When asserts, indicate the AN fsm transition from\nother state to AN_ENABLE state, useful for xsgmii\ninterface to switch to XAUI mode""", "" )
   RDW_DEF_FLD( 0x4e074, "tx_mie_hdr_parity_err",14,14, "mie header parity error detected on transmit interface""", "" )
   RDW_DEF_FLD( 0x4e074, "tx_mie_pkt_crc_err",15,15, "packet crc error detection on transmit interface""", "" )


   RDW_DEF("hi", 0x40075, "red_hi0_gbe_STA","parser fifo ecc error address""", 0xffffff, 0x0, "sta")
   RDW_DEF_FLD( 0x40075, "an_rx_flow_ctrl_en",0,0, "Status shows the negotiated receive pause enabled""", "" )
   RDW_DEF_FLD( 0x40075, "an_tx_flow_ctrl_en",1,1, "Status shows the negotiated transmit pause enabled""", "" )
   RDW_DEF_FLD( 0x40075, "an_full_duplex",2,2, "Status shows the negotiated full duplex mode""", "" )
   RDW_DEF_FLD( 0x40075, "rx_an_complete",3,3, "Status shows the auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x40075, "rx_config_word",19,4, "Status shows the received auto-negotiation word from\nremote link partner""", "" )
   RDW_DEF_FLD( 0x40075, "an_fsm_state",22,20, "Status shows the current N fsm state""", "" )
   RDW_DEF_FLD( 0x40075, "rx_synchronized",23,23, "Status shows the rx synchronous status""", "" )
   RDW_DEF("hi", 0x42075, "red_hi1_gbe_STA","parser fifo ecc error address""", 0xffffff, 0x0, "sta")
   RDW_DEF_FLD( 0x42075, "an_rx_flow_ctrl_en",0,0, "Status shows the negotiated receive pause enabled""", "" )
   RDW_DEF_FLD( 0x42075, "an_tx_flow_ctrl_en",1,1, "Status shows the negotiated transmit pause enabled""", "" )
   RDW_DEF_FLD( 0x42075, "an_full_duplex",2,2, "Status shows the negotiated full duplex mode""", "" )
   RDW_DEF_FLD( 0x42075, "rx_an_complete",3,3, "Status shows the auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x42075, "rx_config_word",19,4, "Status shows the received auto-negotiation word from\nremote link partner""", "" )
   RDW_DEF_FLD( 0x42075, "an_fsm_state",22,20, "Status shows the current N fsm state""", "" )
   RDW_DEF_FLD( 0x42075, "rx_synchronized",23,23, "Status shows the rx synchronous status""", "" )
   RDW_DEF("hi", 0x44075, "red_hi2_gbe_STA","parser fifo ecc error address""", 0xffffff, 0x0, "sta")
   RDW_DEF_FLD( 0x44075, "an_rx_flow_ctrl_en",0,0, "Status shows the negotiated receive pause enabled""", "" )
   RDW_DEF_FLD( 0x44075, "an_tx_flow_ctrl_en",1,1, "Status shows the negotiated transmit pause enabled""", "" )
   RDW_DEF_FLD( 0x44075, "an_full_duplex",2,2, "Status shows the negotiated full duplex mode""", "" )
   RDW_DEF_FLD( 0x44075, "rx_an_complete",3,3, "Status shows the auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x44075, "rx_config_word",19,4, "Status shows the received auto-negotiation word from\nremote link partner""", "" )
   RDW_DEF_FLD( 0x44075, "an_fsm_state",22,20, "Status shows the current N fsm state""", "" )
   RDW_DEF_FLD( 0x44075, "rx_synchronized",23,23, "Status shows the rx synchronous status""", "" )
   RDW_DEF("hi", 0x46075, "red_hi3_gbe_STA","parser fifo ecc error address""", 0xffffff, 0x0, "sta")
   RDW_DEF_FLD( 0x46075, "an_rx_flow_ctrl_en",0,0, "Status shows the negotiated receive pause enabled""", "" )
   RDW_DEF_FLD( 0x46075, "an_tx_flow_ctrl_en",1,1, "Status shows the negotiated transmit pause enabled""", "" )
   RDW_DEF_FLD( 0x46075, "an_full_duplex",2,2, "Status shows the negotiated full duplex mode""", "" )
   RDW_DEF_FLD( 0x46075, "rx_an_complete",3,3, "Status shows the auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x46075, "rx_config_word",19,4, "Status shows the received auto-negotiation word from\nremote link partner""", "" )
   RDW_DEF_FLD( 0x46075, "an_fsm_state",22,20, "Status shows the current N fsm state""", "" )
   RDW_DEF_FLD( 0x46075, "rx_synchronized",23,23, "Status shows the rx synchronous status""", "" )
   RDW_DEF("hi", 0x48075, "red_hi4_gbe_STA","parser fifo ecc error address""", 0xffffff, 0x0, "sta")
   RDW_DEF_FLD( 0x48075, "an_rx_flow_ctrl_en",0,0, "Status shows the negotiated receive pause enabled""", "" )
   RDW_DEF_FLD( 0x48075, "an_tx_flow_ctrl_en",1,1, "Status shows the negotiated transmit pause enabled""", "" )
   RDW_DEF_FLD( 0x48075, "an_full_duplex",2,2, "Status shows the negotiated full duplex mode""", "" )
   RDW_DEF_FLD( 0x48075, "rx_an_complete",3,3, "Status shows the auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x48075, "rx_config_word",19,4, "Status shows the received auto-negotiation word from\nremote link partner""", "" )
   RDW_DEF_FLD( 0x48075, "an_fsm_state",22,20, "Status shows the current N fsm state""", "" )
   RDW_DEF_FLD( 0x48075, "rx_synchronized",23,23, "Status shows the rx synchronous status""", "" )
   RDW_DEF("hi", 0x4a075, "red_hi5_gbe_STA","parser fifo ecc error address""", 0xffffff, 0x0, "sta")
   RDW_DEF_FLD( 0x4a075, "an_rx_flow_ctrl_en",0,0, "Status shows the negotiated receive pause enabled""", "" )
   RDW_DEF_FLD( 0x4a075, "an_tx_flow_ctrl_en",1,1, "Status shows the negotiated transmit pause enabled""", "" )
   RDW_DEF_FLD( 0x4a075, "an_full_duplex",2,2, "Status shows the negotiated full duplex mode""", "" )
   RDW_DEF_FLD( 0x4a075, "rx_an_complete",3,3, "Status shows the auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x4a075, "rx_config_word",19,4, "Status shows the received auto-negotiation word from\nremote link partner""", "" )
   RDW_DEF_FLD( 0x4a075, "an_fsm_state",22,20, "Status shows the current N fsm state""", "" )
   RDW_DEF_FLD( 0x4a075, "rx_synchronized",23,23, "Status shows the rx synchronous status""", "" )
   RDW_DEF("hi", 0x4c075, "red_hi6_gbe_STA","parser fifo ecc error address""", 0xffffff, 0x0, "sta")
   RDW_DEF_FLD( 0x4c075, "an_rx_flow_ctrl_en",0,0, "Status shows the negotiated receive pause enabled""", "" )
   RDW_DEF_FLD( 0x4c075, "an_tx_flow_ctrl_en",1,1, "Status shows the negotiated transmit pause enabled""", "" )
   RDW_DEF_FLD( 0x4c075, "an_full_duplex",2,2, "Status shows the negotiated full duplex mode""", "" )
   RDW_DEF_FLD( 0x4c075, "rx_an_complete",3,3, "Status shows the auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x4c075, "rx_config_word",19,4, "Status shows the received auto-negotiation word from\nremote link partner""", "" )
   RDW_DEF_FLD( 0x4c075, "an_fsm_state",22,20, "Status shows the current N fsm state""", "" )
   RDW_DEF_FLD( 0x4c075, "rx_synchronized",23,23, "Status shows the rx synchronous status""", "" )
   RDW_DEF("hi", 0x4e075, "red_hi7_gbe_STA","parser fifo ecc error address""", 0xffffff, 0x0, "sta")
   RDW_DEF_FLD( 0x4e075, "an_rx_flow_ctrl_en",0,0, "Status shows the negotiated receive pause enabled""", "" )
   RDW_DEF_FLD( 0x4e075, "an_tx_flow_ctrl_en",1,1, "Status shows the negotiated transmit pause enabled""", "" )
   RDW_DEF_FLD( 0x4e075, "an_full_duplex",2,2, "Status shows the negotiated full duplex mode""", "" )
   RDW_DEF_FLD( 0x4e075, "rx_an_complete",3,3, "Status shows the auto-negotiation is complete""", "" )
   RDW_DEF_FLD( 0x4e075, "rx_config_word",19,4, "Status shows the received auto-negotiation word from\nremote link partner""", "" )
   RDW_DEF_FLD( 0x4e075, "an_fsm_state",22,20, "Status shows the current N fsm state""", "" )
   RDW_DEF_FLD( 0x4e075, "rx_synchronized",23,23, "Status shows the rx synchronous status""", "" )


   RDW_DEF("hi", 0x40076, "red_hi0_CFG_spare","spare config register""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40076, "",7,0, "Spare gate config bus""", "" )
   RDW_DEF("hi", 0x42076, "red_hi1_CFG_spare","spare config register""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42076, "",7,0, "Spare gate config bus""", "" )
   RDW_DEF("hi", 0x44076, "red_hi2_CFG_spare","spare config register""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44076, "",7,0, "Spare gate config bus""", "" )
   RDW_DEF("hi", 0x46076, "red_hi3_CFG_spare","spare config register""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46076, "",7,0, "Spare gate config bus""", "" )
   RDW_DEF("hi", 0x48076, "red_hi4_CFG_spare","spare config register""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48076, "",7,0, "Spare gate config bus""", "" )
   RDW_DEF("hi", 0x4a076, "red_hi5_CFG_spare","spare config register""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a076, "",7,0, "Spare gate config bus""", "" )
   RDW_DEF("hi", 0x4c076, "red_hi6_CFG_spare","spare config register""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c076, "",7,0, "Spare gate config bus""", "" )
   RDW_DEF("hi", 0x4e076, "red_hi7_CFG_spare","spare config register""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e076, "",7,0, "Spare gate config bus""", "" )


   RDW_DEF("hi", 0x40077, "red_hi0_STA_spare","spare status""", 0xff, 0x0, "sta")
   RDW_DEF_FLD( 0x40077, "",7,0, "Spare status bus""", "" )
   RDW_DEF("hi", 0x42077, "red_hi1_STA_spare","spare status""", 0xff, 0x0, "sta")
   RDW_DEF_FLD( 0x42077, "",7,0, "Spare status bus""", "" )
   RDW_DEF("hi", 0x44077, "red_hi2_STA_spare","spare status""", 0xff, 0x0, "sta")
   RDW_DEF_FLD( 0x44077, "",7,0, "Spare status bus""", "" )
   RDW_DEF("hi", 0x46077, "red_hi3_STA_spare","spare status""", 0xff, 0x0, "sta")
   RDW_DEF_FLD( 0x46077, "",7,0, "Spare status bus""", "" )
   RDW_DEF("hi", 0x48077, "red_hi4_STA_spare","spare status""", 0xff, 0x0, "sta")
   RDW_DEF_FLD( 0x48077, "",7,0, "Spare status bus""", "" )
   RDW_DEF("hi", 0x4a077, "red_hi5_STA_spare","spare status""", 0xff, 0x0, "sta")
   RDW_DEF_FLD( 0x4a077, "",7,0, "Spare status bus""", "" )
   RDW_DEF("hi", 0x4c077, "red_hi6_STA_spare","spare status""", 0xff, 0x0, "sta")
   RDW_DEF_FLD( 0x4c077, "",7,0, "Spare status bus""", "" )
   RDW_DEF("hi", 0x4e077, "red_hi7_STA_spare","spare status""", 0xff, 0x0, "sta")
   RDW_DEF_FLD( 0x4e077, "",7,0, "Spare status bus""", "" )


   RDW_DEF("hi", 0x40078, "red_hi0_gbe_CFG_pause","pause configuration""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40078, "tx_pfc_en",0,0, "When asserts, enable 802.3x pause transmission""", "" )
   RDW_DEF_FLD( 0x40078, "tx_cfc_en",8,1, "When asserts, enable per-priority pause transmission""", "" )
   RDW_DEF_FLD( 0x40078, "rx_pfc_en",9,9, "When asserts, enable 802.3x pause receiving""", "" )
   RDW_DEF_FLD( 0x40078, "rx_cfc_en",17,10, "When asserts, enable per-priority pause receiving""", "" )
   RDW_DEF_FLD( 0x40078, "fc_timer_only",18,18, "When asserts, timer timeout triggers the transmission of\npause frame. When deasserts, both timer timeout and core xoff state \ntransition can triggers the transmission of pause frame""", "" )
   RDW_DEF_FLD( 0x40078, "rx_ucast_en",19,19, "When asserts, enable unicast pause receiving, otherwise only multicast\npause frame is recognized""", "" )
   RDW_DEF("hi", 0x42078, "red_hi1_gbe_CFG_pause","pause configuration""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42078, "tx_pfc_en",0,0, "When asserts, enable 802.3x pause transmission""", "" )
   RDW_DEF_FLD( 0x42078, "tx_cfc_en",8,1, "When asserts, enable per-priority pause transmission""", "" )
   RDW_DEF_FLD( 0x42078, "rx_pfc_en",9,9, "When asserts, enable 802.3x pause receiving""", "" )
   RDW_DEF_FLD( 0x42078, "rx_cfc_en",17,10, "When asserts, enable per-priority pause receiving""", "" )
   RDW_DEF_FLD( 0x42078, "fc_timer_only",18,18, "When asserts, timer timeout triggers the transmission of\npause frame. When deasserts, both timer timeout and core xoff state \ntransition can triggers the transmission of pause frame""", "" )
   RDW_DEF_FLD( 0x42078, "rx_ucast_en",19,19, "When asserts, enable unicast pause receiving, otherwise only multicast\npause frame is recognized""", "" )
   RDW_DEF("hi", 0x44078, "red_hi2_gbe_CFG_pause","pause configuration""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44078, "tx_pfc_en",0,0, "When asserts, enable 802.3x pause transmission""", "" )
   RDW_DEF_FLD( 0x44078, "tx_cfc_en",8,1, "When asserts, enable per-priority pause transmission""", "" )
   RDW_DEF_FLD( 0x44078, "rx_pfc_en",9,9, "When asserts, enable 802.3x pause receiving""", "" )
   RDW_DEF_FLD( 0x44078, "rx_cfc_en",17,10, "When asserts, enable per-priority pause receiving""", "" )
   RDW_DEF_FLD( 0x44078, "fc_timer_only",18,18, "When asserts, timer timeout triggers the transmission of\npause frame. When deasserts, both timer timeout and core xoff state \ntransition can triggers the transmission of pause frame""", "" )
   RDW_DEF_FLD( 0x44078, "rx_ucast_en",19,19, "When asserts, enable unicast pause receiving, otherwise only multicast\npause frame is recognized""", "" )
   RDW_DEF("hi", 0x46078, "red_hi3_gbe_CFG_pause","pause configuration""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46078, "tx_pfc_en",0,0, "When asserts, enable 802.3x pause transmission""", "" )
   RDW_DEF_FLD( 0x46078, "tx_cfc_en",8,1, "When asserts, enable per-priority pause transmission""", "" )
   RDW_DEF_FLD( 0x46078, "rx_pfc_en",9,9, "When asserts, enable 802.3x pause receiving""", "" )
   RDW_DEF_FLD( 0x46078, "rx_cfc_en",17,10, "When asserts, enable per-priority pause receiving""", "" )
   RDW_DEF_FLD( 0x46078, "fc_timer_only",18,18, "When asserts, timer timeout triggers the transmission of\npause frame. When deasserts, both timer timeout and core xoff state \ntransition can triggers the transmission of pause frame""", "" )
   RDW_DEF_FLD( 0x46078, "rx_ucast_en",19,19, "When asserts, enable unicast pause receiving, otherwise only multicast\npause frame is recognized""", "" )
   RDW_DEF("hi", 0x48078, "red_hi4_gbe_CFG_pause","pause configuration""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48078, "tx_pfc_en",0,0, "When asserts, enable 802.3x pause transmission""", "" )
   RDW_DEF_FLD( 0x48078, "tx_cfc_en",8,1, "When asserts, enable per-priority pause transmission""", "" )
   RDW_DEF_FLD( 0x48078, "rx_pfc_en",9,9, "When asserts, enable 802.3x pause receiving""", "" )
   RDW_DEF_FLD( 0x48078, "rx_cfc_en",17,10, "When asserts, enable per-priority pause receiving""", "" )
   RDW_DEF_FLD( 0x48078, "fc_timer_only",18,18, "When asserts, timer timeout triggers the transmission of\npause frame. When deasserts, both timer timeout and core xoff state \ntransition can triggers the transmission of pause frame""", "" )
   RDW_DEF_FLD( 0x48078, "rx_ucast_en",19,19, "When asserts, enable unicast pause receiving, otherwise only multicast\npause frame is recognized""", "" )
   RDW_DEF("hi", 0x4a078, "red_hi5_gbe_CFG_pause","pause configuration""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a078, "tx_pfc_en",0,0, "When asserts, enable 802.3x pause transmission""", "" )
   RDW_DEF_FLD( 0x4a078, "tx_cfc_en",8,1, "When asserts, enable per-priority pause transmission""", "" )
   RDW_DEF_FLD( 0x4a078, "rx_pfc_en",9,9, "When asserts, enable 802.3x pause receiving""", "" )
   RDW_DEF_FLD( 0x4a078, "rx_cfc_en",17,10, "When asserts, enable per-priority pause receiving""", "" )
   RDW_DEF_FLD( 0x4a078, "fc_timer_only",18,18, "When asserts, timer timeout triggers the transmission of\npause frame. When deasserts, both timer timeout and core xoff state \ntransition can triggers the transmission of pause frame""", "" )
   RDW_DEF_FLD( 0x4a078, "rx_ucast_en",19,19, "When asserts, enable unicast pause receiving, otherwise only multicast\npause frame is recognized""", "" )
   RDW_DEF("hi", 0x4c078, "red_hi6_gbe_CFG_pause","pause configuration""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c078, "tx_pfc_en",0,0, "When asserts, enable 802.3x pause transmission""", "" )
   RDW_DEF_FLD( 0x4c078, "tx_cfc_en",8,1, "When asserts, enable per-priority pause transmission""", "" )
   RDW_DEF_FLD( 0x4c078, "rx_pfc_en",9,9, "When asserts, enable 802.3x pause receiving""", "" )
   RDW_DEF_FLD( 0x4c078, "rx_cfc_en",17,10, "When asserts, enable per-priority pause receiving""", "" )
   RDW_DEF_FLD( 0x4c078, "fc_timer_only",18,18, "When asserts, timer timeout triggers the transmission of\npause frame. When deasserts, both timer timeout and core xoff state \ntransition can triggers the transmission of pause frame""", "" )
   RDW_DEF_FLD( 0x4c078, "rx_ucast_en",19,19, "When asserts, enable unicast pause receiving, otherwise only multicast\npause frame is recognized""", "" )
   RDW_DEF("hi", 0x4e078, "red_hi7_gbe_CFG_pause","pause configuration""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e078, "tx_pfc_en",0,0, "When asserts, enable 802.3x pause transmission""", "" )
   RDW_DEF_FLD( 0x4e078, "tx_cfc_en",8,1, "When asserts, enable per-priority pause transmission""", "" )
   RDW_DEF_FLD( 0x4e078, "rx_pfc_en",9,9, "When asserts, enable 802.3x pause receiving""", "" )
   RDW_DEF_FLD( 0x4e078, "rx_cfc_en",17,10, "When asserts, enable per-priority pause receiving""", "" )
   RDW_DEF_FLD( 0x4e078, "fc_timer_only",18,18, "When asserts, timer timeout triggers the transmission of\npause frame. When deasserts, both timer timeout and core xoff state \ntransition can triggers the transmission of pause frame""", "" )
   RDW_DEF_FLD( 0x4e078, "rx_ucast_en",19,19, "When asserts, enable unicast pause receiving, otherwise only multicast\npause frame is recognized""", "" )


   RDW_DEF("hi", 0x40079, "red_hi0_gbe_CFG_pause_cfc_opcode","pause configuration""", 0xffff, 0x101, "cfg")
   RDW_DEF_FLD( 0x40079, "",15,0, "Specifies the Mac ControlCode for per-priority pause""", "" )
   RDW_DEF("hi", 0x42079, "red_hi1_gbe_CFG_pause_cfc_opcode","pause configuration""", 0xffff, 0x101, "cfg")
   RDW_DEF_FLD( 0x42079, "",15,0, "Specifies the Mac ControlCode for per-priority pause""", "" )
   RDW_DEF("hi", 0x44079, "red_hi2_gbe_CFG_pause_cfc_opcode","pause configuration""", 0xffff, 0x101, "cfg")
   RDW_DEF_FLD( 0x44079, "",15,0, "Specifies the Mac ControlCode for per-priority pause""", "" )
   RDW_DEF("hi", 0x46079, "red_hi3_gbe_CFG_pause_cfc_opcode","pause configuration""", 0xffff, 0x101, "cfg")
   RDW_DEF_FLD( 0x46079, "",15,0, "Specifies the Mac ControlCode for per-priority pause""", "" )
   RDW_DEF("hi", 0x48079, "red_hi4_gbe_CFG_pause_cfc_opcode","pause configuration""", 0xffff, 0x101, "cfg")
   RDW_DEF_FLD( 0x48079, "",15,0, "Specifies the Mac ControlCode for per-priority pause""", "" )
   RDW_DEF("hi", 0x4a079, "red_hi5_gbe_CFG_pause_cfc_opcode","pause configuration""", 0xffff, 0x101, "cfg")
   RDW_DEF_FLD( 0x4a079, "",15,0, "Specifies the Mac ControlCode for per-priority pause""", "" )
   RDW_DEF("hi", 0x4c079, "red_hi6_gbe_CFG_pause_cfc_opcode","pause configuration""", 0xffff, 0x101, "cfg")
   RDW_DEF_FLD( 0x4c079, "",15,0, "Specifies the Mac ControlCode for per-priority pause""", "" )
   RDW_DEF("hi", 0x4e079, "red_hi7_gbe_CFG_pause_cfc_opcode","pause configuration""", 0xffff, 0x101, "cfg")
   RDW_DEF_FLD( 0x4e079, "",15,0, "Specifies the Mac ControlCode for per-priority pause""", "" )


   RDW_DEF("hi", 0x4007a, "red_hi0_gbe_CFG_tx_flush_en","tx flush enable""", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x4007a, "",0,0, "when set, mac will flush all egress packets""", "" )
   RDW_DEF("hi", 0x4207a, "red_hi1_gbe_CFG_tx_flush_en","tx flush enable""", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x4207a, "",0,0, "when set, mac will flush all egress packets""", "" )
   RDW_DEF("hi", 0x4407a, "red_hi2_gbe_CFG_tx_flush_en","tx flush enable""", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x4407a, "",0,0, "when set, mac will flush all egress packets""", "" )
   RDW_DEF("hi", 0x4607a, "red_hi3_gbe_CFG_tx_flush_en","tx flush enable""", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x4607a, "",0,0, "when set, mac will flush all egress packets""", "" )
   RDW_DEF("hi", 0x4807a, "red_hi4_gbe_CFG_tx_flush_en","tx flush enable""", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x4807a, "",0,0, "when set, mac will flush all egress packets""", "" )
   RDW_DEF("hi", 0x4a07a, "red_hi5_gbe_CFG_tx_flush_en","tx flush enable""", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a07a, "",0,0, "when set, mac will flush all egress packets""", "" )
   RDW_DEF("hi", 0x4c07a, "red_hi6_gbe_CFG_tx_flush_en","tx flush enable""", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c07a, "",0,0, "when set, mac will flush all egress packets""", "" )
   RDW_DEF("hi", 0x4e07a, "red_hi7_gbe_CFG_tx_flush_en","tx flush enable""", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e07a, "",0,0, "when set, mac will flush all egress packets""", "" )


   RDW_DEF("hi", 0x4007b, "red_hi0_fwd_vector0","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4007b, "entry0",2,0, "forwarding vector for entry 0""", "" )
   RDW_DEF_FLD( 0x4007b, "entry1",6,4, "forwarding vector for entry 1""", "" )
   RDW_DEF_FLD( 0x4007b, "entry2",10,8, "forwarding vector for entry 2""", "" )
   RDW_DEF_FLD( 0x4007b, "entry3",14,12, "forwarding vector for entry 3""", "" )
   RDW_DEF_FLD( 0x4007b, "entry4",18,16, "forwarding vector for entry 4""", "" )
   RDW_DEF_FLD( 0x4007b, "entry5",22,20, "forwarding vector for entry 5""", "" )
   RDW_DEF_FLD( 0x4007b, "entry6",26,24, "forwarding vector for entry 6""", "" )
   RDW_DEF_FLD( 0x4007b, "entry7",30,28, "forwarding vector for entry 7""", "" )
   RDW_DEF("hi", 0x4207b, "red_hi1_fwd_vector0","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4207b, "entry0",2,0, "forwarding vector for entry 0""", "" )
   RDW_DEF_FLD( 0x4207b, "entry1",6,4, "forwarding vector for entry 1""", "" )
   RDW_DEF_FLD( 0x4207b, "entry2",10,8, "forwarding vector for entry 2""", "" )
   RDW_DEF_FLD( 0x4207b, "entry3",14,12, "forwarding vector for entry 3""", "" )
   RDW_DEF_FLD( 0x4207b, "entry4",18,16, "forwarding vector for entry 4""", "" )
   RDW_DEF_FLD( 0x4207b, "entry5",22,20, "forwarding vector for entry 5""", "" )
   RDW_DEF_FLD( 0x4207b, "entry6",26,24, "forwarding vector for entry 6""", "" )
   RDW_DEF_FLD( 0x4207b, "entry7",30,28, "forwarding vector for entry 7""", "" )
   RDW_DEF("hi", 0x4407b, "red_hi2_fwd_vector0","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4407b, "entry0",2,0, "forwarding vector for entry 0""", "" )
   RDW_DEF_FLD( 0x4407b, "entry1",6,4, "forwarding vector for entry 1""", "" )
   RDW_DEF_FLD( 0x4407b, "entry2",10,8, "forwarding vector for entry 2""", "" )
   RDW_DEF_FLD( 0x4407b, "entry3",14,12, "forwarding vector for entry 3""", "" )
   RDW_DEF_FLD( 0x4407b, "entry4",18,16, "forwarding vector for entry 4""", "" )
   RDW_DEF_FLD( 0x4407b, "entry5",22,20, "forwarding vector for entry 5""", "" )
   RDW_DEF_FLD( 0x4407b, "entry6",26,24, "forwarding vector for entry 6""", "" )
   RDW_DEF_FLD( 0x4407b, "entry7",30,28, "forwarding vector for entry 7""", "" )
   RDW_DEF("hi", 0x4607b, "red_hi3_fwd_vector0","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4607b, "entry0",2,0, "forwarding vector for entry 0""", "" )
   RDW_DEF_FLD( 0x4607b, "entry1",6,4, "forwarding vector for entry 1""", "" )
   RDW_DEF_FLD( 0x4607b, "entry2",10,8, "forwarding vector for entry 2""", "" )
   RDW_DEF_FLD( 0x4607b, "entry3",14,12, "forwarding vector for entry 3""", "" )
   RDW_DEF_FLD( 0x4607b, "entry4",18,16, "forwarding vector for entry 4""", "" )
   RDW_DEF_FLD( 0x4607b, "entry5",22,20, "forwarding vector for entry 5""", "" )
   RDW_DEF_FLD( 0x4607b, "entry6",26,24, "forwarding vector for entry 6""", "" )
   RDW_DEF_FLD( 0x4607b, "entry7",30,28, "forwarding vector for entry 7""", "" )
   RDW_DEF("hi", 0x4807b, "red_hi4_fwd_vector0","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4807b, "entry0",2,0, "forwarding vector for entry 0""", "" )
   RDW_DEF_FLD( 0x4807b, "entry1",6,4, "forwarding vector for entry 1""", "" )
   RDW_DEF_FLD( 0x4807b, "entry2",10,8, "forwarding vector for entry 2""", "" )
   RDW_DEF_FLD( 0x4807b, "entry3",14,12, "forwarding vector for entry 3""", "" )
   RDW_DEF_FLD( 0x4807b, "entry4",18,16, "forwarding vector for entry 4""", "" )
   RDW_DEF_FLD( 0x4807b, "entry5",22,20, "forwarding vector for entry 5""", "" )
   RDW_DEF_FLD( 0x4807b, "entry6",26,24, "forwarding vector for entry 6""", "" )
   RDW_DEF_FLD( 0x4807b, "entry7",30,28, "forwarding vector for entry 7""", "" )
   RDW_DEF("hi", 0x4a07b, "red_hi5_fwd_vector0","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a07b, "entry0",2,0, "forwarding vector for entry 0""", "" )
   RDW_DEF_FLD( 0x4a07b, "entry1",6,4, "forwarding vector for entry 1""", "" )
   RDW_DEF_FLD( 0x4a07b, "entry2",10,8, "forwarding vector for entry 2""", "" )
   RDW_DEF_FLD( 0x4a07b, "entry3",14,12, "forwarding vector for entry 3""", "" )
   RDW_DEF_FLD( 0x4a07b, "entry4",18,16, "forwarding vector for entry 4""", "" )
   RDW_DEF_FLD( 0x4a07b, "entry5",22,20, "forwarding vector for entry 5""", "" )
   RDW_DEF_FLD( 0x4a07b, "entry6",26,24, "forwarding vector for entry 6""", "" )
   RDW_DEF_FLD( 0x4a07b, "entry7",30,28, "forwarding vector for entry 7""", "" )
   RDW_DEF("hi", 0x4c07b, "red_hi6_fwd_vector0","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c07b, "entry0",2,0, "forwarding vector for entry 0""", "" )
   RDW_DEF_FLD( 0x4c07b, "entry1",6,4, "forwarding vector for entry 1""", "" )
   RDW_DEF_FLD( 0x4c07b, "entry2",10,8, "forwarding vector for entry 2""", "" )
   RDW_DEF_FLD( 0x4c07b, "entry3",14,12, "forwarding vector for entry 3""", "" )
   RDW_DEF_FLD( 0x4c07b, "entry4",18,16, "forwarding vector for entry 4""", "" )
   RDW_DEF_FLD( 0x4c07b, "entry5",22,20, "forwarding vector for entry 5""", "" )
   RDW_DEF_FLD( 0x4c07b, "entry6",26,24, "forwarding vector for entry 6""", "" )
   RDW_DEF_FLD( 0x4c07b, "entry7",30,28, "forwarding vector for entry 7""", "" )
   RDW_DEF("hi", 0x4e07b, "red_hi7_fwd_vector0","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e07b, "entry0",2,0, "forwarding vector for entry 0""", "" )
   RDW_DEF_FLD( 0x4e07b, "entry1",6,4, "forwarding vector for entry 1""", "" )
   RDW_DEF_FLD( 0x4e07b, "entry2",10,8, "forwarding vector for entry 2""", "" )
   RDW_DEF_FLD( 0x4e07b, "entry3",14,12, "forwarding vector for entry 3""", "" )
   RDW_DEF_FLD( 0x4e07b, "entry4",18,16, "forwarding vector for entry 4""", "" )
   RDW_DEF_FLD( 0x4e07b, "entry5",22,20, "forwarding vector for entry 5""", "" )
   RDW_DEF_FLD( 0x4e07b, "entry6",26,24, "forwarding vector for entry 6""", "" )
   RDW_DEF_FLD( 0x4e07b, "entry7",30,28, "forwarding vector for entry 7""", "" )


   RDW_DEF("hi", 0x4007c, "red_hi0_fwd_vector1","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4007c, "entry0",2,0, "forwarding vector for entry 8""", "" )
   RDW_DEF_FLD( 0x4007c, "entry1",6,4, "forwarding vector for entry 9""", "" )
   RDW_DEF_FLD( 0x4007c, "entry2",10,8, "forwarding vector for entry 10""", "" )
   RDW_DEF_FLD( 0x4007c, "entry3",14,12, "forwarding vector for entry 11""", "" )
   RDW_DEF_FLD( 0x4007c, "entry4",18,16, "forwarding vector for entry 12""", "" )
   RDW_DEF_FLD( 0x4007c, "entry5",22,20, "forwarding vector for entry 13""", "" )
   RDW_DEF_FLD( 0x4007c, "entry6",26,24, "forwarding vector for entry 14""", "" )
   RDW_DEF_FLD( 0x4007c, "entry7",30,28, "forwarding vector for entry 15""", "" )
   RDW_DEF("hi", 0x4207c, "red_hi1_fwd_vector1","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4207c, "entry0",2,0, "forwarding vector for entry 8""", "" )
   RDW_DEF_FLD( 0x4207c, "entry1",6,4, "forwarding vector for entry 9""", "" )
   RDW_DEF_FLD( 0x4207c, "entry2",10,8, "forwarding vector for entry 10""", "" )
   RDW_DEF_FLD( 0x4207c, "entry3",14,12, "forwarding vector for entry 11""", "" )
   RDW_DEF_FLD( 0x4207c, "entry4",18,16, "forwarding vector for entry 12""", "" )
   RDW_DEF_FLD( 0x4207c, "entry5",22,20, "forwarding vector for entry 13""", "" )
   RDW_DEF_FLD( 0x4207c, "entry6",26,24, "forwarding vector for entry 14""", "" )
   RDW_DEF_FLD( 0x4207c, "entry7",30,28, "forwarding vector for entry 15""", "" )
   RDW_DEF("hi", 0x4407c, "red_hi2_fwd_vector1","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4407c, "entry0",2,0, "forwarding vector for entry 8""", "" )
   RDW_DEF_FLD( 0x4407c, "entry1",6,4, "forwarding vector for entry 9""", "" )
   RDW_DEF_FLD( 0x4407c, "entry2",10,8, "forwarding vector for entry 10""", "" )
   RDW_DEF_FLD( 0x4407c, "entry3",14,12, "forwarding vector for entry 11""", "" )
   RDW_DEF_FLD( 0x4407c, "entry4",18,16, "forwarding vector for entry 12""", "" )
   RDW_DEF_FLD( 0x4407c, "entry5",22,20, "forwarding vector for entry 13""", "" )
   RDW_DEF_FLD( 0x4407c, "entry6",26,24, "forwarding vector for entry 14""", "" )
   RDW_DEF_FLD( 0x4407c, "entry7",30,28, "forwarding vector for entry 15""", "" )
   RDW_DEF("hi", 0x4607c, "red_hi3_fwd_vector1","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4607c, "entry0",2,0, "forwarding vector for entry 8""", "" )
   RDW_DEF_FLD( 0x4607c, "entry1",6,4, "forwarding vector for entry 9""", "" )
   RDW_DEF_FLD( 0x4607c, "entry2",10,8, "forwarding vector for entry 10""", "" )
   RDW_DEF_FLD( 0x4607c, "entry3",14,12, "forwarding vector for entry 11""", "" )
   RDW_DEF_FLD( 0x4607c, "entry4",18,16, "forwarding vector for entry 12""", "" )
   RDW_DEF_FLD( 0x4607c, "entry5",22,20, "forwarding vector for entry 13""", "" )
   RDW_DEF_FLD( 0x4607c, "entry6",26,24, "forwarding vector for entry 14""", "" )
   RDW_DEF_FLD( 0x4607c, "entry7",30,28, "forwarding vector for entry 15""", "" )
   RDW_DEF("hi", 0x4807c, "red_hi4_fwd_vector1","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4807c, "entry0",2,0, "forwarding vector for entry 8""", "" )
   RDW_DEF_FLD( 0x4807c, "entry1",6,4, "forwarding vector for entry 9""", "" )
   RDW_DEF_FLD( 0x4807c, "entry2",10,8, "forwarding vector for entry 10""", "" )
   RDW_DEF_FLD( 0x4807c, "entry3",14,12, "forwarding vector for entry 11""", "" )
   RDW_DEF_FLD( 0x4807c, "entry4",18,16, "forwarding vector for entry 12""", "" )
   RDW_DEF_FLD( 0x4807c, "entry5",22,20, "forwarding vector for entry 13""", "" )
   RDW_DEF_FLD( 0x4807c, "entry6",26,24, "forwarding vector for entry 14""", "" )
   RDW_DEF_FLD( 0x4807c, "entry7",30,28, "forwarding vector for entry 15""", "" )
   RDW_DEF("hi", 0x4a07c, "red_hi5_fwd_vector1","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a07c, "entry0",2,0, "forwarding vector for entry 8""", "" )
   RDW_DEF_FLD( 0x4a07c, "entry1",6,4, "forwarding vector for entry 9""", "" )
   RDW_DEF_FLD( 0x4a07c, "entry2",10,8, "forwarding vector for entry 10""", "" )
   RDW_DEF_FLD( 0x4a07c, "entry3",14,12, "forwarding vector for entry 11""", "" )
   RDW_DEF_FLD( 0x4a07c, "entry4",18,16, "forwarding vector for entry 12""", "" )
   RDW_DEF_FLD( 0x4a07c, "entry5",22,20, "forwarding vector for entry 13""", "" )
   RDW_DEF_FLD( 0x4a07c, "entry6",26,24, "forwarding vector for entry 14""", "" )
   RDW_DEF_FLD( 0x4a07c, "entry7",30,28, "forwarding vector for entry 15""", "" )
   RDW_DEF("hi", 0x4c07c, "red_hi6_fwd_vector1","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c07c, "entry0",2,0, "forwarding vector for entry 8""", "" )
   RDW_DEF_FLD( 0x4c07c, "entry1",6,4, "forwarding vector for entry 9""", "" )
   RDW_DEF_FLD( 0x4c07c, "entry2",10,8, "forwarding vector for entry 10""", "" )
   RDW_DEF_FLD( 0x4c07c, "entry3",14,12, "forwarding vector for entry 11""", "" )
   RDW_DEF_FLD( 0x4c07c, "entry4",18,16, "forwarding vector for entry 12""", "" )
   RDW_DEF_FLD( 0x4c07c, "entry5",22,20, "forwarding vector for entry 13""", "" )
   RDW_DEF_FLD( 0x4c07c, "entry6",26,24, "forwarding vector for entry 14""", "" )
   RDW_DEF_FLD( 0x4c07c, "entry7",30,28, "forwarding vector for entry 15""", "" )
   RDW_DEF("hi", 0x4e07c, "red_hi7_fwd_vector1","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e07c, "entry0",2,0, "forwarding vector for entry 8""", "" )
   RDW_DEF_FLD( 0x4e07c, "entry1",6,4, "forwarding vector for entry 9""", "" )
   RDW_DEF_FLD( 0x4e07c, "entry2",10,8, "forwarding vector for entry 10""", "" )
   RDW_DEF_FLD( 0x4e07c, "entry3",14,12, "forwarding vector for entry 11""", "" )
   RDW_DEF_FLD( 0x4e07c, "entry4",18,16, "forwarding vector for entry 12""", "" )
   RDW_DEF_FLD( 0x4e07c, "entry5",22,20, "forwarding vector for entry 13""", "" )
   RDW_DEF_FLD( 0x4e07c, "entry6",26,24, "forwarding vector for entry 14""", "" )
   RDW_DEF_FLD( 0x4e07c, "entry7",30,28, "forwarding vector for entry 15""", "" )


   RDW_DEF("hi", 0x4007d, "red_hi0_fwd_vector2","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4007d, "entry0",2,0, "forwarding vector for entry 16""", "" )
   RDW_DEF_FLD( 0x4007d, "entry1",6,4, "forwarding vector for entry 17""", "" )
   RDW_DEF_FLD( 0x4007d, "entry2",10,8, "forwarding vector for entry 18""", "" )
   RDW_DEF_FLD( 0x4007d, "entry3",14,12, "forwarding vector for entry 19""", "" )
   RDW_DEF_FLD( 0x4007d, "entry4",18,16, "forwarding vector for entry 20""", "" )
   RDW_DEF_FLD( 0x4007d, "entry5",22,20, "forwarding vector for entry 21""", "" )
   RDW_DEF_FLD( 0x4007d, "entry6",26,24, "forwarding vector for entry 22""", "" )
   RDW_DEF_FLD( 0x4007d, "entry7",30,28, "forwarding vector for entry 23""", "" )
   RDW_DEF("hi", 0x4207d, "red_hi1_fwd_vector2","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4207d, "entry0",2,0, "forwarding vector for entry 16""", "" )
   RDW_DEF_FLD( 0x4207d, "entry1",6,4, "forwarding vector for entry 17""", "" )
   RDW_DEF_FLD( 0x4207d, "entry2",10,8, "forwarding vector for entry 18""", "" )
   RDW_DEF_FLD( 0x4207d, "entry3",14,12, "forwarding vector for entry 19""", "" )
   RDW_DEF_FLD( 0x4207d, "entry4",18,16, "forwarding vector for entry 20""", "" )
   RDW_DEF_FLD( 0x4207d, "entry5",22,20, "forwarding vector for entry 21""", "" )
   RDW_DEF_FLD( 0x4207d, "entry6",26,24, "forwarding vector for entry 22""", "" )
   RDW_DEF_FLD( 0x4207d, "entry7",30,28, "forwarding vector for entry 23""", "" )
   RDW_DEF("hi", 0x4407d, "red_hi2_fwd_vector2","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4407d, "entry0",2,0, "forwarding vector for entry 16""", "" )
   RDW_DEF_FLD( 0x4407d, "entry1",6,4, "forwarding vector for entry 17""", "" )
   RDW_DEF_FLD( 0x4407d, "entry2",10,8, "forwarding vector for entry 18""", "" )
   RDW_DEF_FLD( 0x4407d, "entry3",14,12, "forwarding vector for entry 19""", "" )
   RDW_DEF_FLD( 0x4407d, "entry4",18,16, "forwarding vector for entry 20""", "" )
   RDW_DEF_FLD( 0x4407d, "entry5",22,20, "forwarding vector for entry 21""", "" )
   RDW_DEF_FLD( 0x4407d, "entry6",26,24, "forwarding vector for entry 22""", "" )
   RDW_DEF_FLD( 0x4407d, "entry7",30,28, "forwarding vector for entry 23""", "" )
   RDW_DEF("hi", 0x4607d, "red_hi3_fwd_vector2","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4607d, "entry0",2,0, "forwarding vector for entry 16""", "" )
   RDW_DEF_FLD( 0x4607d, "entry1",6,4, "forwarding vector for entry 17""", "" )
   RDW_DEF_FLD( 0x4607d, "entry2",10,8, "forwarding vector for entry 18""", "" )
   RDW_DEF_FLD( 0x4607d, "entry3",14,12, "forwarding vector for entry 19""", "" )
   RDW_DEF_FLD( 0x4607d, "entry4",18,16, "forwarding vector for entry 20""", "" )
   RDW_DEF_FLD( 0x4607d, "entry5",22,20, "forwarding vector for entry 21""", "" )
   RDW_DEF_FLD( 0x4607d, "entry6",26,24, "forwarding vector for entry 22""", "" )
   RDW_DEF_FLD( 0x4607d, "entry7",30,28, "forwarding vector for entry 23""", "" )
   RDW_DEF("hi", 0x4807d, "red_hi4_fwd_vector2","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4807d, "entry0",2,0, "forwarding vector for entry 16""", "" )
   RDW_DEF_FLD( 0x4807d, "entry1",6,4, "forwarding vector for entry 17""", "" )
   RDW_DEF_FLD( 0x4807d, "entry2",10,8, "forwarding vector for entry 18""", "" )
   RDW_DEF_FLD( 0x4807d, "entry3",14,12, "forwarding vector for entry 19""", "" )
   RDW_DEF_FLD( 0x4807d, "entry4",18,16, "forwarding vector for entry 20""", "" )
   RDW_DEF_FLD( 0x4807d, "entry5",22,20, "forwarding vector for entry 21""", "" )
   RDW_DEF_FLD( 0x4807d, "entry6",26,24, "forwarding vector for entry 22""", "" )
   RDW_DEF_FLD( 0x4807d, "entry7",30,28, "forwarding vector for entry 23""", "" )
   RDW_DEF("hi", 0x4a07d, "red_hi5_fwd_vector2","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a07d, "entry0",2,0, "forwarding vector for entry 16""", "" )
   RDW_DEF_FLD( 0x4a07d, "entry1",6,4, "forwarding vector for entry 17""", "" )
   RDW_DEF_FLD( 0x4a07d, "entry2",10,8, "forwarding vector for entry 18""", "" )
   RDW_DEF_FLD( 0x4a07d, "entry3",14,12, "forwarding vector for entry 19""", "" )
   RDW_DEF_FLD( 0x4a07d, "entry4",18,16, "forwarding vector for entry 20""", "" )
   RDW_DEF_FLD( 0x4a07d, "entry5",22,20, "forwarding vector for entry 21""", "" )
   RDW_DEF_FLD( 0x4a07d, "entry6",26,24, "forwarding vector for entry 22""", "" )
   RDW_DEF_FLD( 0x4a07d, "entry7",30,28, "forwarding vector for entry 23""", "" )
   RDW_DEF("hi", 0x4c07d, "red_hi6_fwd_vector2","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c07d, "entry0",2,0, "forwarding vector for entry 16""", "" )
   RDW_DEF_FLD( 0x4c07d, "entry1",6,4, "forwarding vector for entry 17""", "" )
   RDW_DEF_FLD( 0x4c07d, "entry2",10,8, "forwarding vector for entry 18""", "" )
   RDW_DEF_FLD( 0x4c07d, "entry3",14,12, "forwarding vector for entry 19""", "" )
   RDW_DEF_FLD( 0x4c07d, "entry4",18,16, "forwarding vector for entry 20""", "" )
   RDW_DEF_FLD( 0x4c07d, "entry5",22,20, "forwarding vector for entry 21""", "" )
   RDW_DEF_FLD( 0x4c07d, "entry6",26,24, "forwarding vector for entry 22""", "" )
   RDW_DEF_FLD( 0x4c07d, "entry7",30,28, "forwarding vector for entry 23""", "" )
   RDW_DEF("hi", 0x4e07d, "red_hi7_fwd_vector2","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e07d, "entry0",2,0, "forwarding vector for entry 16""", "" )
   RDW_DEF_FLD( 0x4e07d, "entry1",6,4, "forwarding vector for entry 17""", "" )
   RDW_DEF_FLD( 0x4e07d, "entry2",10,8, "forwarding vector for entry 18""", "" )
   RDW_DEF_FLD( 0x4e07d, "entry3",14,12, "forwarding vector for entry 19""", "" )
   RDW_DEF_FLD( 0x4e07d, "entry4",18,16, "forwarding vector for entry 20""", "" )
   RDW_DEF_FLD( 0x4e07d, "entry5",22,20, "forwarding vector for entry 21""", "" )
   RDW_DEF_FLD( 0x4e07d, "entry6",26,24, "forwarding vector for entry 22""", "" )
   RDW_DEF_FLD( 0x4e07d, "entry7",30,28, "forwarding vector for entry 23""", "" )


   RDW_DEF("hi", 0x4007e, "red_hi0_fwd_vector3","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4007e, "entry0",2,0, "forwarding vector for entry 24""", "" )
   RDW_DEF_FLD( 0x4007e, "entry1",6,4, "forwarding vector for entry 25""", "" )
   RDW_DEF_FLD( 0x4007e, "entry2",10,8, "forwarding vector for entry 26""", "" )
   RDW_DEF_FLD( 0x4007e, "entry3",14,12, "forwarding vector for entry 27""", "" )
   RDW_DEF_FLD( 0x4007e, "entry4",18,16, "forwarding vector for entry 28""", "" )
   RDW_DEF_FLD( 0x4007e, "entry5",22,20, "forwarding vector for entry 29""", "" )
   RDW_DEF_FLD( 0x4007e, "entry6",26,24, "forwarding vector for entry 30""", "" )
   RDW_DEF_FLD( 0x4007e, "entry7",30,28, "forwarding vector for entry 31""", "" )
   RDW_DEF("hi", 0x4207e, "red_hi1_fwd_vector3","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4207e, "entry0",2,0, "forwarding vector for entry 24""", "" )
   RDW_DEF_FLD( 0x4207e, "entry1",6,4, "forwarding vector for entry 25""", "" )
   RDW_DEF_FLD( 0x4207e, "entry2",10,8, "forwarding vector for entry 26""", "" )
   RDW_DEF_FLD( 0x4207e, "entry3",14,12, "forwarding vector for entry 27""", "" )
   RDW_DEF_FLD( 0x4207e, "entry4",18,16, "forwarding vector for entry 28""", "" )
   RDW_DEF_FLD( 0x4207e, "entry5",22,20, "forwarding vector for entry 29""", "" )
   RDW_DEF_FLD( 0x4207e, "entry6",26,24, "forwarding vector for entry 30""", "" )
   RDW_DEF_FLD( 0x4207e, "entry7",30,28, "forwarding vector for entry 31""", "" )
   RDW_DEF("hi", 0x4407e, "red_hi2_fwd_vector3","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4407e, "entry0",2,0, "forwarding vector for entry 24""", "" )
   RDW_DEF_FLD( 0x4407e, "entry1",6,4, "forwarding vector for entry 25""", "" )
   RDW_DEF_FLD( 0x4407e, "entry2",10,8, "forwarding vector for entry 26""", "" )
   RDW_DEF_FLD( 0x4407e, "entry3",14,12, "forwarding vector for entry 27""", "" )
   RDW_DEF_FLD( 0x4407e, "entry4",18,16, "forwarding vector for entry 28""", "" )
   RDW_DEF_FLD( 0x4407e, "entry5",22,20, "forwarding vector for entry 29""", "" )
   RDW_DEF_FLD( 0x4407e, "entry6",26,24, "forwarding vector for entry 30""", "" )
   RDW_DEF_FLD( 0x4407e, "entry7",30,28, "forwarding vector for entry 31""", "" )
   RDW_DEF("hi", 0x4607e, "red_hi3_fwd_vector3","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4607e, "entry0",2,0, "forwarding vector for entry 24""", "" )
   RDW_DEF_FLD( 0x4607e, "entry1",6,4, "forwarding vector for entry 25""", "" )
   RDW_DEF_FLD( 0x4607e, "entry2",10,8, "forwarding vector for entry 26""", "" )
   RDW_DEF_FLD( 0x4607e, "entry3",14,12, "forwarding vector for entry 27""", "" )
   RDW_DEF_FLD( 0x4607e, "entry4",18,16, "forwarding vector for entry 28""", "" )
   RDW_DEF_FLD( 0x4607e, "entry5",22,20, "forwarding vector for entry 29""", "" )
   RDW_DEF_FLD( 0x4607e, "entry6",26,24, "forwarding vector for entry 30""", "" )
   RDW_DEF_FLD( 0x4607e, "entry7",30,28, "forwarding vector for entry 31""", "" )
   RDW_DEF("hi", 0x4807e, "red_hi4_fwd_vector3","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4807e, "entry0",2,0, "forwarding vector for entry 24""", "" )
   RDW_DEF_FLD( 0x4807e, "entry1",6,4, "forwarding vector for entry 25""", "" )
   RDW_DEF_FLD( 0x4807e, "entry2",10,8, "forwarding vector for entry 26""", "" )
   RDW_DEF_FLD( 0x4807e, "entry3",14,12, "forwarding vector for entry 27""", "" )
   RDW_DEF_FLD( 0x4807e, "entry4",18,16, "forwarding vector for entry 28""", "" )
   RDW_DEF_FLD( 0x4807e, "entry5",22,20, "forwarding vector for entry 29""", "" )
   RDW_DEF_FLD( 0x4807e, "entry6",26,24, "forwarding vector for entry 30""", "" )
   RDW_DEF_FLD( 0x4807e, "entry7",30,28, "forwarding vector for entry 31""", "" )
   RDW_DEF("hi", 0x4a07e, "red_hi5_fwd_vector3","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a07e, "entry0",2,0, "forwarding vector for entry 24""", "" )
   RDW_DEF_FLD( 0x4a07e, "entry1",6,4, "forwarding vector for entry 25""", "" )
   RDW_DEF_FLD( 0x4a07e, "entry2",10,8, "forwarding vector for entry 26""", "" )
   RDW_DEF_FLD( 0x4a07e, "entry3",14,12, "forwarding vector for entry 27""", "" )
   RDW_DEF_FLD( 0x4a07e, "entry4",18,16, "forwarding vector for entry 28""", "" )
   RDW_DEF_FLD( 0x4a07e, "entry5",22,20, "forwarding vector for entry 29""", "" )
   RDW_DEF_FLD( 0x4a07e, "entry6",26,24, "forwarding vector for entry 30""", "" )
   RDW_DEF_FLD( 0x4a07e, "entry7",30,28, "forwarding vector for entry 31""", "" )
   RDW_DEF("hi", 0x4c07e, "red_hi6_fwd_vector3","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c07e, "entry0",2,0, "forwarding vector for entry 24""", "" )
   RDW_DEF_FLD( 0x4c07e, "entry1",6,4, "forwarding vector for entry 25""", "" )
   RDW_DEF_FLD( 0x4c07e, "entry2",10,8, "forwarding vector for entry 26""", "" )
   RDW_DEF_FLD( 0x4c07e, "entry3",14,12, "forwarding vector for entry 27""", "" )
   RDW_DEF_FLD( 0x4c07e, "entry4",18,16, "forwarding vector for entry 28""", "" )
   RDW_DEF_FLD( 0x4c07e, "entry5",22,20, "forwarding vector for entry 29""", "" )
   RDW_DEF_FLD( 0x4c07e, "entry6",26,24, "forwarding vector for entry 30""", "" )
   RDW_DEF_FLD( 0x4c07e, "entry7",30,28, "forwarding vector for entry 31""", "" )
   RDW_DEF("hi", 0x4e07e, "red_hi7_fwd_vector3","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e07e, "entry0",2,0, "forwarding vector for entry 24""", "" )
   RDW_DEF_FLD( 0x4e07e, "entry1",6,4, "forwarding vector for entry 25""", "" )
   RDW_DEF_FLD( 0x4e07e, "entry2",10,8, "forwarding vector for entry 26""", "" )
   RDW_DEF_FLD( 0x4e07e, "entry3",14,12, "forwarding vector for entry 27""", "" )
   RDW_DEF_FLD( 0x4e07e, "entry4",18,16, "forwarding vector for entry 28""", "" )
   RDW_DEF_FLD( 0x4e07e, "entry5",22,20, "forwarding vector for entry 29""", "" )
   RDW_DEF_FLD( 0x4e07e, "entry6",26,24, "forwarding vector for entry 30""", "" )
   RDW_DEF_FLD( 0x4e07e, "entry7",30,28, "forwarding vector for entry 31""", "" )


   RDW_DEF("hi", 0x4007f, "red_hi0_fwd_vector4","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4007f, "entry0",2,0, "forwarding vector for entry 32""", "" )
   RDW_DEF_FLD( 0x4007f, "entry1",6,4, "forwarding vector for entry 33""", "" )
   RDW_DEF_FLD( 0x4007f, "entry2",10,8, "forwarding vector for entry 34""", "" )
   RDW_DEF_FLD( 0x4007f, "entry3",14,12, "forwarding vector for entry 35""", "" )
   RDW_DEF_FLD( 0x4007f, "entry4",18,16, "forwarding vector for entry 36""", "" )
   RDW_DEF_FLD( 0x4007f, "entry5",22,20, "forwarding vector for entry 37""", "" )
   RDW_DEF_FLD( 0x4007f, "entry6",26,24, "forwarding vector for entry 38""", "" )
   RDW_DEF_FLD( 0x4007f, "entry7",30,28, "forwarding vector for entry 39""", "" )
   RDW_DEF("hi", 0x4207f, "red_hi1_fwd_vector4","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4207f, "entry0",2,0, "forwarding vector for entry 32""", "" )
   RDW_DEF_FLD( 0x4207f, "entry1",6,4, "forwarding vector for entry 33""", "" )
   RDW_DEF_FLD( 0x4207f, "entry2",10,8, "forwarding vector for entry 34""", "" )
   RDW_DEF_FLD( 0x4207f, "entry3",14,12, "forwarding vector for entry 35""", "" )
   RDW_DEF_FLD( 0x4207f, "entry4",18,16, "forwarding vector for entry 36""", "" )
   RDW_DEF_FLD( 0x4207f, "entry5",22,20, "forwarding vector for entry 37""", "" )
   RDW_DEF_FLD( 0x4207f, "entry6",26,24, "forwarding vector for entry 38""", "" )
   RDW_DEF_FLD( 0x4207f, "entry7",30,28, "forwarding vector for entry 39""", "" )
   RDW_DEF("hi", 0x4407f, "red_hi2_fwd_vector4","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4407f, "entry0",2,0, "forwarding vector for entry 32""", "" )
   RDW_DEF_FLD( 0x4407f, "entry1",6,4, "forwarding vector for entry 33""", "" )
   RDW_DEF_FLD( 0x4407f, "entry2",10,8, "forwarding vector for entry 34""", "" )
   RDW_DEF_FLD( 0x4407f, "entry3",14,12, "forwarding vector for entry 35""", "" )
   RDW_DEF_FLD( 0x4407f, "entry4",18,16, "forwarding vector for entry 36""", "" )
   RDW_DEF_FLD( 0x4407f, "entry5",22,20, "forwarding vector for entry 37""", "" )
   RDW_DEF_FLD( 0x4407f, "entry6",26,24, "forwarding vector for entry 38""", "" )
   RDW_DEF_FLD( 0x4407f, "entry7",30,28, "forwarding vector for entry 39""", "" )
   RDW_DEF("hi", 0x4607f, "red_hi3_fwd_vector4","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4607f, "entry0",2,0, "forwarding vector for entry 32""", "" )
   RDW_DEF_FLD( 0x4607f, "entry1",6,4, "forwarding vector for entry 33""", "" )
   RDW_DEF_FLD( 0x4607f, "entry2",10,8, "forwarding vector for entry 34""", "" )
   RDW_DEF_FLD( 0x4607f, "entry3",14,12, "forwarding vector for entry 35""", "" )
   RDW_DEF_FLD( 0x4607f, "entry4",18,16, "forwarding vector for entry 36""", "" )
   RDW_DEF_FLD( 0x4607f, "entry5",22,20, "forwarding vector for entry 37""", "" )
   RDW_DEF_FLD( 0x4607f, "entry6",26,24, "forwarding vector for entry 38""", "" )
   RDW_DEF_FLD( 0x4607f, "entry7",30,28, "forwarding vector for entry 39""", "" )
   RDW_DEF("hi", 0x4807f, "red_hi4_fwd_vector4","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4807f, "entry0",2,0, "forwarding vector for entry 32""", "" )
   RDW_DEF_FLD( 0x4807f, "entry1",6,4, "forwarding vector for entry 33""", "" )
   RDW_DEF_FLD( 0x4807f, "entry2",10,8, "forwarding vector for entry 34""", "" )
   RDW_DEF_FLD( 0x4807f, "entry3",14,12, "forwarding vector for entry 35""", "" )
   RDW_DEF_FLD( 0x4807f, "entry4",18,16, "forwarding vector for entry 36""", "" )
   RDW_DEF_FLD( 0x4807f, "entry5",22,20, "forwarding vector for entry 37""", "" )
   RDW_DEF_FLD( 0x4807f, "entry6",26,24, "forwarding vector for entry 38""", "" )
   RDW_DEF_FLD( 0x4807f, "entry7",30,28, "forwarding vector for entry 39""", "" )
   RDW_DEF("hi", 0x4a07f, "red_hi5_fwd_vector4","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a07f, "entry0",2,0, "forwarding vector for entry 32""", "" )
   RDW_DEF_FLD( 0x4a07f, "entry1",6,4, "forwarding vector for entry 33""", "" )
   RDW_DEF_FLD( 0x4a07f, "entry2",10,8, "forwarding vector for entry 34""", "" )
   RDW_DEF_FLD( 0x4a07f, "entry3",14,12, "forwarding vector for entry 35""", "" )
   RDW_DEF_FLD( 0x4a07f, "entry4",18,16, "forwarding vector for entry 36""", "" )
   RDW_DEF_FLD( 0x4a07f, "entry5",22,20, "forwarding vector for entry 37""", "" )
   RDW_DEF_FLD( 0x4a07f, "entry6",26,24, "forwarding vector for entry 38""", "" )
   RDW_DEF_FLD( 0x4a07f, "entry7",30,28, "forwarding vector for entry 39""", "" )
   RDW_DEF("hi", 0x4c07f, "red_hi6_fwd_vector4","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c07f, "entry0",2,0, "forwarding vector for entry 32""", "" )
   RDW_DEF_FLD( 0x4c07f, "entry1",6,4, "forwarding vector for entry 33""", "" )
   RDW_DEF_FLD( 0x4c07f, "entry2",10,8, "forwarding vector for entry 34""", "" )
   RDW_DEF_FLD( 0x4c07f, "entry3",14,12, "forwarding vector for entry 35""", "" )
   RDW_DEF_FLD( 0x4c07f, "entry4",18,16, "forwarding vector for entry 36""", "" )
   RDW_DEF_FLD( 0x4c07f, "entry5",22,20, "forwarding vector for entry 37""", "" )
   RDW_DEF_FLD( 0x4c07f, "entry6",26,24, "forwarding vector for entry 38""", "" )
   RDW_DEF_FLD( 0x4c07f, "entry7",30,28, "forwarding vector for entry 39""", "" )
   RDW_DEF("hi", 0x4e07f, "red_hi7_fwd_vector4","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e07f, "entry0",2,0, "forwarding vector for entry 32""", "" )
   RDW_DEF_FLD( 0x4e07f, "entry1",6,4, "forwarding vector for entry 33""", "" )
   RDW_DEF_FLD( 0x4e07f, "entry2",10,8, "forwarding vector for entry 34""", "" )
   RDW_DEF_FLD( 0x4e07f, "entry3",14,12, "forwarding vector for entry 35""", "" )
   RDW_DEF_FLD( 0x4e07f, "entry4",18,16, "forwarding vector for entry 36""", "" )
   RDW_DEF_FLD( 0x4e07f, "entry5",22,20, "forwarding vector for entry 37""", "" )
   RDW_DEF_FLD( 0x4e07f, "entry6",26,24, "forwarding vector for entry 38""", "" )
   RDW_DEF_FLD( 0x4e07f, "entry7",30,28, "forwarding vector for entry 39""", "" )


   RDW_DEF("hi", 0x40080, "red_hi0_fwd_vector5","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x40080, "entry0",2,0, "forwarding vector for entry 40""", "" )
   RDW_DEF_FLD( 0x40080, "entry1",6,4, "forwarding vector for entry 41""", "" )
   RDW_DEF_FLD( 0x40080, "entry2",10,8, "forwarding vector for entry 42""", "" )
   RDW_DEF_FLD( 0x40080, "entry3",14,12, "forwarding vector for entry 43""", "" )
   RDW_DEF_FLD( 0x40080, "entry4",18,16, "forwarding vector for entry 44""", "" )
   RDW_DEF_FLD( 0x40080, "entry5",22,20, "forwarding vector for entry 45""", "" )
   RDW_DEF_FLD( 0x40080, "entry6",26,24, "forwarding vector for entry 46""", "" )
   RDW_DEF_FLD( 0x40080, "entry7",30,28, "forwarding vector for entry 47""", "" )
   RDW_DEF("hi", 0x42080, "red_hi1_fwd_vector5","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x42080, "entry0",2,0, "forwarding vector for entry 40""", "" )
   RDW_DEF_FLD( 0x42080, "entry1",6,4, "forwarding vector for entry 41""", "" )
   RDW_DEF_FLD( 0x42080, "entry2",10,8, "forwarding vector for entry 42""", "" )
   RDW_DEF_FLD( 0x42080, "entry3",14,12, "forwarding vector for entry 43""", "" )
   RDW_DEF_FLD( 0x42080, "entry4",18,16, "forwarding vector for entry 44""", "" )
   RDW_DEF_FLD( 0x42080, "entry5",22,20, "forwarding vector for entry 45""", "" )
   RDW_DEF_FLD( 0x42080, "entry6",26,24, "forwarding vector for entry 46""", "" )
   RDW_DEF_FLD( 0x42080, "entry7",30,28, "forwarding vector for entry 47""", "" )
   RDW_DEF("hi", 0x44080, "red_hi2_fwd_vector5","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x44080, "entry0",2,0, "forwarding vector for entry 40""", "" )
   RDW_DEF_FLD( 0x44080, "entry1",6,4, "forwarding vector for entry 41""", "" )
   RDW_DEF_FLD( 0x44080, "entry2",10,8, "forwarding vector for entry 42""", "" )
   RDW_DEF_FLD( 0x44080, "entry3",14,12, "forwarding vector for entry 43""", "" )
   RDW_DEF_FLD( 0x44080, "entry4",18,16, "forwarding vector for entry 44""", "" )
   RDW_DEF_FLD( 0x44080, "entry5",22,20, "forwarding vector for entry 45""", "" )
   RDW_DEF_FLD( 0x44080, "entry6",26,24, "forwarding vector for entry 46""", "" )
   RDW_DEF_FLD( 0x44080, "entry7",30,28, "forwarding vector for entry 47""", "" )
   RDW_DEF("hi", 0x46080, "red_hi3_fwd_vector5","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x46080, "entry0",2,0, "forwarding vector for entry 40""", "" )
   RDW_DEF_FLD( 0x46080, "entry1",6,4, "forwarding vector for entry 41""", "" )
   RDW_DEF_FLD( 0x46080, "entry2",10,8, "forwarding vector for entry 42""", "" )
   RDW_DEF_FLD( 0x46080, "entry3",14,12, "forwarding vector for entry 43""", "" )
   RDW_DEF_FLD( 0x46080, "entry4",18,16, "forwarding vector for entry 44""", "" )
   RDW_DEF_FLD( 0x46080, "entry5",22,20, "forwarding vector for entry 45""", "" )
   RDW_DEF_FLD( 0x46080, "entry6",26,24, "forwarding vector for entry 46""", "" )
   RDW_DEF_FLD( 0x46080, "entry7",30,28, "forwarding vector for entry 47""", "" )
   RDW_DEF("hi", 0x48080, "red_hi4_fwd_vector5","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x48080, "entry0",2,0, "forwarding vector for entry 40""", "" )
   RDW_DEF_FLD( 0x48080, "entry1",6,4, "forwarding vector for entry 41""", "" )
   RDW_DEF_FLD( 0x48080, "entry2",10,8, "forwarding vector for entry 42""", "" )
   RDW_DEF_FLD( 0x48080, "entry3",14,12, "forwarding vector for entry 43""", "" )
   RDW_DEF_FLD( 0x48080, "entry4",18,16, "forwarding vector for entry 44""", "" )
   RDW_DEF_FLD( 0x48080, "entry5",22,20, "forwarding vector for entry 45""", "" )
   RDW_DEF_FLD( 0x48080, "entry6",26,24, "forwarding vector for entry 46""", "" )
   RDW_DEF_FLD( 0x48080, "entry7",30,28, "forwarding vector for entry 47""", "" )
   RDW_DEF("hi", 0x4a080, "red_hi5_fwd_vector5","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a080, "entry0",2,0, "forwarding vector for entry 40""", "" )
   RDW_DEF_FLD( 0x4a080, "entry1",6,4, "forwarding vector for entry 41""", "" )
   RDW_DEF_FLD( 0x4a080, "entry2",10,8, "forwarding vector for entry 42""", "" )
   RDW_DEF_FLD( 0x4a080, "entry3",14,12, "forwarding vector for entry 43""", "" )
   RDW_DEF_FLD( 0x4a080, "entry4",18,16, "forwarding vector for entry 44""", "" )
   RDW_DEF_FLD( 0x4a080, "entry5",22,20, "forwarding vector for entry 45""", "" )
   RDW_DEF_FLD( 0x4a080, "entry6",26,24, "forwarding vector for entry 46""", "" )
   RDW_DEF_FLD( 0x4a080, "entry7",30,28, "forwarding vector for entry 47""", "" )
   RDW_DEF("hi", 0x4c080, "red_hi6_fwd_vector5","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c080, "entry0",2,0, "forwarding vector for entry 40""", "" )
   RDW_DEF_FLD( 0x4c080, "entry1",6,4, "forwarding vector for entry 41""", "" )
   RDW_DEF_FLD( 0x4c080, "entry2",10,8, "forwarding vector for entry 42""", "" )
   RDW_DEF_FLD( 0x4c080, "entry3",14,12, "forwarding vector for entry 43""", "" )
   RDW_DEF_FLD( 0x4c080, "entry4",18,16, "forwarding vector for entry 44""", "" )
   RDW_DEF_FLD( 0x4c080, "entry5",22,20, "forwarding vector for entry 45""", "" )
   RDW_DEF_FLD( 0x4c080, "entry6",26,24, "forwarding vector for entry 46""", "" )
   RDW_DEF_FLD( 0x4c080, "entry7",30,28, "forwarding vector for entry 47""", "" )
   RDW_DEF("hi", 0x4e080, "red_hi7_fwd_vector5","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e080, "entry0",2,0, "forwarding vector for entry 40""", "" )
   RDW_DEF_FLD( 0x4e080, "entry1",6,4, "forwarding vector for entry 41""", "" )
   RDW_DEF_FLD( 0x4e080, "entry2",10,8, "forwarding vector for entry 42""", "" )
   RDW_DEF_FLD( 0x4e080, "entry3",14,12, "forwarding vector for entry 43""", "" )
   RDW_DEF_FLD( 0x4e080, "entry4",18,16, "forwarding vector for entry 44""", "" )
   RDW_DEF_FLD( 0x4e080, "entry5",22,20, "forwarding vector for entry 45""", "" )
   RDW_DEF_FLD( 0x4e080, "entry6",26,24, "forwarding vector for entry 46""", "" )
   RDW_DEF_FLD( 0x4e080, "entry7",30,28, "forwarding vector for entry 47""", "" )


   RDW_DEF("hi", 0x40081, "red_hi0_fwd_vector6","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x40081, "entry0",2,0, "forwarding vector for entry 48""", "" )
   RDW_DEF_FLD( 0x40081, "entry1",6,4, "forwarding vector for entry 49""", "" )
   RDW_DEF_FLD( 0x40081, "entry2",10,8, "forwarding vector for entry 50""", "" )
   RDW_DEF_FLD( 0x40081, "entry3",14,12, "forwarding vector for entry 51""", "" )
   RDW_DEF_FLD( 0x40081, "entry4",18,16, "forwarding vector for entry 52""", "" )
   RDW_DEF_FLD( 0x40081, "entry5",22,20, "forwarding vector for entry 53""", "" )
   RDW_DEF_FLD( 0x40081, "entry6",26,24, "forwarding vector for entry 54""", "" )
   RDW_DEF_FLD( 0x40081, "entry7",30,28, "forwarding vector for entry 55""", "" )
   RDW_DEF("hi", 0x42081, "red_hi1_fwd_vector6","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x42081, "entry0",2,0, "forwarding vector for entry 48""", "" )
   RDW_DEF_FLD( 0x42081, "entry1",6,4, "forwarding vector for entry 49""", "" )
   RDW_DEF_FLD( 0x42081, "entry2",10,8, "forwarding vector for entry 50""", "" )
   RDW_DEF_FLD( 0x42081, "entry3",14,12, "forwarding vector for entry 51""", "" )
   RDW_DEF_FLD( 0x42081, "entry4",18,16, "forwarding vector for entry 52""", "" )
   RDW_DEF_FLD( 0x42081, "entry5",22,20, "forwarding vector for entry 53""", "" )
   RDW_DEF_FLD( 0x42081, "entry6",26,24, "forwarding vector for entry 54""", "" )
   RDW_DEF_FLD( 0x42081, "entry7",30,28, "forwarding vector for entry 55""", "" )
   RDW_DEF("hi", 0x44081, "red_hi2_fwd_vector6","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x44081, "entry0",2,0, "forwarding vector for entry 48""", "" )
   RDW_DEF_FLD( 0x44081, "entry1",6,4, "forwarding vector for entry 49""", "" )
   RDW_DEF_FLD( 0x44081, "entry2",10,8, "forwarding vector for entry 50""", "" )
   RDW_DEF_FLD( 0x44081, "entry3",14,12, "forwarding vector for entry 51""", "" )
   RDW_DEF_FLD( 0x44081, "entry4",18,16, "forwarding vector for entry 52""", "" )
   RDW_DEF_FLD( 0x44081, "entry5",22,20, "forwarding vector for entry 53""", "" )
   RDW_DEF_FLD( 0x44081, "entry6",26,24, "forwarding vector for entry 54""", "" )
   RDW_DEF_FLD( 0x44081, "entry7",30,28, "forwarding vector for entry 55""", "" )
   RDW_DEF("hi", 0x46081, "red_hi3_fwd_vector6","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x46081, "entry0",2,0, "forwarding vector for entry 48""", "" )
   RDW_DEF_FLD( 0x46081, "entry1",6,4, "forwarding vector for entry 49""", "" )
   RDW_DEF_FLD( 0x46081, "entry2",10,8, "forwarding vector for entry 50""", "" )
   RDW_DEF_FLD( 0x46081, "entry3",14,12, "forwarding vector for entry 51""", "" )
   RDW_DEF_FLD( 0x46081, "entry4",18,16, "forwarding vector for entry 52""", "" )
   RDW_DEF_FLD( 0x46081, "entry5",22,20, "forwarding vector for entry 53""", "" )
   RDW_DEF_FLD( 0x46081, "entry6",26,24, "forwarding vector for entry 54""", "" )
   RDW_DEF_FLD( 0x46081, "entry7",30,28, "forwarding vector for entry 55""", "" )
   RDW_DEF("hi", 0x48081, "red_hi4_fwd_vector6","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x48081, "entry0",2,0, "forwarding vector for entry 48""", "" )
   RDW_DEF_FLD( 0x48081, "entry1",6,4, "forwarding vector for entry 49""", "" )
   RDW_DEF_FLD( 0x48081, "entry2",10,8, "forwarding vector for entry 50""", "" )
   RDW_DEF_FLD( 0x48081, "entry3",14,12, "forwarding vector for entry 51""", "" )
   RDW_DEF_FLD( 0x48081, "entry4",18,16, "forwarding vector for entry 52""", "" )
   RDW_DEF_FLD( 0x48081, "entry5",22,20, "forwarding vector for entry 53""", "" )
   RDW_DEF_FLD( 0x48081, "entry6",26,24, "forwarding vector for entry 54""", "" )
   RDW_DEF_FLD( 0x48081, "entry7",30,28, "forwarding vector for entry 55""", "" )
   RDW_DEF("hi", 0x4a081, "red_hi5_fwd_vector6","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a081, "entry0",2,0, "forwarding vector for entry 48""", "" )
   RDW_DEF_FLD( 0x4a081, "entry1",6,4, "forwarding vector for entry 49""", "" )
   RDW_DEF_FLD( 0x4a081, "entry2",10,8, "forwarding vector for entry 50""", "" )
   RDW_DEF_FLD( 0x4a081, "entry3",14,12, "forwarding vector for entry 51""", "" )
   RDW_DEF_FLD( 0x4a081, "entry4",18,16, "forwarding vector for entry 52""", "" )
   RDW_DEF_FLD( 0x4a081, "entry5",22,20, "forwarding vector for entry 53""", "" )
   RDW_DEF_FLD( 0x4a081, "entry6",26,24, "forwarding vector for entry 54""", "" )
   RDW_DEF_FLD( 0x4a081, "entry7",30,28, "forwarding vector for entry 55""", "" )
   RDW_DEF("hi", 0x4c081, "red_hi6_fwd_vector6","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c081, "entry0",2,0, "forwarding vector for entry 48""", "" )
   RDW_DEF_FLD( 0x4c081, "entry1",6,4, "forwarding vector for entry 49""", "" )
   RDW_DEF_FLD( 0x4c081, "entry2",10,8, "forwarding vector for entry 50""", "" )
   RDW_DEF_FLD( 0x4c081, "entry3",14,12, "forwarding vector for entry 51""", "" )
   RDW_DEF_FLD( 0x4c081, "entry4",18,16, "forwarding vector for entry 52""", "" )
   RDW_DEF_FLD( 0x4c081, "entry5",22,20, "forwarding vector for entry 53""", "" )
   RDW_DEF_FLD( 0x4c081, "entry6",26,24, "forwarding vector for entry 54""", "" )
   RDW_DEF_FLD( 0x4c081, "entry7",30,28, "forwarding vector for entry 55""", "" )
   RDW_DEF("hi", 0x4e081, "red_hi7_fwd_vector6","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e081, "entry0",2,0, "forwarding vector for entry 48""", "" )
   RDW_DEF_FLD( 0x4e081, "entry1",6,4, "forwarding vector for entry 49""", "" )
   RDW_DEF_FLD( 0x4e081, "entry2",10,8, "forwarding vector for entry 50""", "" )
   RDW_DEF_FLD( 0x4e081, "entry3",14,12, "forwarding vector for entry 51""", "" )
   RDW_DEF_FLD( 0x4e081, "entry4",18,16, "forwarding vector for entry 52""", "" )
   RDW_DEF_FLD( 0x4e081, "entry5",22,20, "forwarding vector for entry 53""", "" )
   RDW_DEF_FLD( 0x4e081, "entry6",26,24, "forwarding vector for entry 54""", "" )
   RDW_DEF_FLD( 0x4e081, "entry7",30,28, "forwarding vector for entry 55""", "" )


   RDW_DEF("hi", 0x40082, "red_hi0_fwd_vector7","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x40082, "entry0",2,0, "forwarding vector for entry 56""", "" )
   RDW_DEF_FLD( 0x40082, "entry1",6,4, "forwarding vector for entry 57""", "" )
   RDW_DEF_FLD( 0x40082, "entry2",10,8, "forwarding vector for entry 58""", "" )
   RDW_DEF_FLD( 0x40082, "entry3",14,12, "forwarding vector for entry 59""", "" )
   RDW_DEF_FLD( 0x40082, "entry4",18,16, "forwarding vector for entry 60""", "" )
   RDW_DEF_FLD( 0x40082, "entry5",22,20, "forwarding vector for entry 61""", "" )
   RDW_DEF_FLD( 0x40082, "entry6",26,24, "forwarding vector for entry 62""", "" )
   RDW_DEF_FLD( 0x40082, "entry7",30,28, "forwarding vector for entry 63""", "" )
   RDW_DEF("hi", 0x42082, "red_hi1_fwd_vector7","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x42082, "entry0",2,0, "forwarding vector for entry 56""", "" )
   RDW_DEF_FLD( 0x42082, "entry1",6,4, "forwarding vector for entry 57""", "" )
   RDW_DEF_FLD( 0x42082, "entry2",10,8, "forwarding vector for entry 58""", "" )
   RDW_DEF_FLD( 0x42082, "entry3",14,12, "forwarding vector for entry 59""", "" )
   RDW_DEF_FLD( 0x42082, "entry4",18,16, "forwarding vector for entry 60""", "" )
   RDW_DEF_FLD( 0x42082, "entry5",22,20, "forwarding vector for entry 61""", "" )
   RDW_DEF_FLD( 0x42082, "entry6",26,24, "forwarding vector for entry 62""", "" )
   RDW_DEF_FLD( 0x42082, "entry7",30,28, "forwarding vector for entry 63""", "" )
   RDW_DEF("hi", 0x44082, "red_hi2_fwd_vector7","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x44082, "entry0",2,0, "forwarding vector for entry 56""", "" )
   RDW_DEF_FLD( 0x44082, "entry1",6,4, "forwarding vector for entry 57""", "" )
   RDW_DEF_FLD( 0x44082, "entry2",10,8, "forwarding vector for entry 58""", "" )
   RDW_DEF_FLD( 0x44082, "entry3",14,12, "forwarding vector for entry 59""", "" )
   RDW_DEF_FLD( 0x44082, "entry4",18,16, "forwarding vector for entry 60""", "" )
   RDW_DEF_FLD( 0x44082, "entry5",22,20, "forwarding vector for entry 61""", "" )
   RDW_DEF_FLD( 0x44082, "entry6",26,24, "forwarding vector for entry 62""", "" )
   RDW_DEF_FLD( 0x44082, "entry7",30,28, "forwarding vector for entry 63""", "" )
   RDW_DEF("hi", 0x46082, "red_hi3_fwd_vector7","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x46082, "entry0",2,0, "forwarding vector for entry 56""", "" )
   RDW_DEF_FLD( 0x46082, "entry1",6,4, "forwarding vector for entry 57""", "" )
   RDW_DEF_FLD( 0x46082, "entry2",10,8, "forwarding vector for entry 58""", "" )
   RDW_DEF_FLD( 0x46082, "entry3",14,12, "forwarding vector for entry 59""", "" )
   RDW_DEF_FLD( 0x46082, "entry4",18,16, "forwarding vector for entry 60""", "" )
   RDW_DEF_FLD( 0x46082, "entry5",22,20, "forwarding vector for entry 61""", "" )
   RDW_DEF_FLD( 0x46082, "entry6",26,24, "forwarding vector for entry 62""", "" )
   RDW_DEF_FLD( 0x46082, "entry7",30,28, "forwarding vector for entry 63""", "" )
   RDW_DEF("hi", 0x48082, "red_hi4_fwd_vector7","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x48082, "entry0",2,0, "forwarding vector for entry 56""", "" )
   RDW_DEF_FLD( 0x48082, "entry1",6,4, "forwarding vector for entry 57""", "" )
   RDW_DEF_FLD( 0x48082, "entry2",10,8, "forwarding vector for entry 58""", "" )
   RDW_DEF_FLD( 0x48082, "entry3",14,12, "forwarding vector for entry 59""", "" )
   RDW_DEF_FLD( 0x48082, "entry4",18,16, "forwarding vector for entry 60""", "" )
   RDW_DEF_FLD( 0x48082, "entry5",22,20, "forwarding vector for entry 61""", "" )
   RDW_DEF_FLD( 0x48082, "entry6",26,24, "forwarding vector for entry 62""", "" )
   RDW_DEF_FLD( 0x48082, "entry7",30,28, "forwarding vector for entry 63""", "" )
   RDW_DEF("hi", 0x4a082, "red_hi5_fwd_vector7","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a082, "entry0",2,0, "forwarding vector for entry 56""", "" )
   RDW_DEF_FLD( 0x4a082, "entry1",6,4, "forwarding vector for entry 57""", "" )
   RDW_DEF_FLD( 0x4a082, "entry2",10,8, "forwarding vector for entry 58""", "" )
   RDW_DEF_FLD( 0x4a082, "entry3",14,12, "forwarding vector for entry 59""", "" )
   RDW_DEF_FLD( 0x4a082, "entry4",18,16, "forwarding vector for entry 60""", "" )
   RDW_DEF_FLD( 0x4a082, "entry5",22,20, "forwarding vector for entry 61""", "" )
   RDW_DEF_FLD( 0x4a082, "entry6",26,24, "forwarding vector for entry 62""", "" )
   RDW_DEF_FLD( 0x4a082, "entry7",30,28, "forwarding vector for entry 63""", "" )
   RDW_DEF("hi", 0x4c082, "red_hi6_fwd_vector7","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c082, "entry0",2,0, "forwarding vector for entry 56""", "" )
   RDW_DEF_FLD( 0x4c082, "entry1",6,4, "forwarding vector for entry 57""", "" )
   RDW_DEF_FLD( 0x4c082, "entry2",10,8, "forwarding vector for entry 58""", "" )
   RDW_DEF_FLD( 0x4c082, "entry3",14,12, "forwarding vector for entry 59""", "" )
   RDW_DEF_FLD( 0x4c082, "entry4",18,16, "forwarding vector for entry 60""", "" )
   RDW_DEF_FLD( 0x4c082, "entry5",22,20, "forwarding vector for entry 61""", "" )
   RDW_DEF_FLD( 0x4c082, "entry6",26,24, "forwarding vector for entry 62""", "" )
   RDW_DEF_FLD( 0x4c082, "entry7",30,28, "forwarding vector for entry 63""", "" )
   RDW_DEF("hi", 0x4e082, "red_hi7_fwd_vector7","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e082, "entry0",2,0, "forwarding vector for entry 56""", "" )
   RDW_DEF_FLD( 0x4e082, "entry1",6,4, "forwarding vector for entry 57""", "" )
   RDW_DEF_FLD( 0x4e082, "entry2",10,8, "forwarding vector for entry 58""", "" )
   RDW_DEF_FLD( 0x4e082, "entry3",14,12, "forwarding vector for entry 59""", "" )
   RDW_DEF_FLD( 0x4e082, "entry4",18,16, "forwarding vector for entry 60""", "" )
   RDW_DEF_FLD( 0x4e082, "entry5",22,20, "forwarding vector for entry 61""", "" )
   RDW_DEF_FLD( 0x4e082, "entry6",26,24, "forwarding vector for entry 62""", "" )
   RDW_DEF_FLD( 0x4e082, "entry7",30,28, "forwarding vector for entry 63""", "" )


   RDW_DEF("hi", 0x40083, "red_hi0_fwd_vector8","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x40083, "entry0",2,0, "forwarding vector for entry 64""", "" )
   RDW_DEF_FLD( 0x40083, "entry1",6,4, "forwarding vector for entry 65""", "" )
   RDW_DEF_FLD( 0x40083, "entry2",10,8, "forwarding vector for entry 66""", "" )
   RDW_DEF_FLD( 0x40083, "entry3",14,12, "forwarding vector for entry 67""", "" )
   RDW_DEF_FLD( 0x40083, "entry4",18,16, "forwarding vector for entry 68""", "" )
   RDW_DEF_FLD( 0x40083, "entry5",22,20, "forwarding vector for entry 69""", "" )
   RDW_DEF_FLD( 0x40083, "entry6",26,24, "forwarding vector for entry 70""", "" )
   RDW_DEF_FLD( 0x40083, "entry7",30,28, "forwarding vector for entry 71""", "" )
   RDW_DEF("hi", 0x42083, "red_hi1_fwd_vector8","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x42083, "entry0",2,0, "forwarding vector for entry 64""", "" )
   RDW_DEF_FLD( 0x42083, "entry1",6,4, "forwarding vector for entry 65""", "" )
   RDW_DEF_FLD( 0x42083, "entry2",10,8, "forwarding vector for entry 66""", "" )
   RDW_DEF_FLD( 0x42083, "entry3",14,12, "forwarding vector for entry 67""", "" )
   RDW_DEF_FLD( 0x42083, "entry4",18,16, "forwarding vector for entry 68""", "" )
   RDW_DEF_FLD( 0x42083, "entry5",22,20, "forwarding vector for entry 69""", "" )
   RDW_DEF_FLD( 0x42083, "entry6",26,24, "forwarding vector for entry 70""", "" )
   RDW_DEF_FLD( 0x42083, "entry7",30,28, "forwarding vector for entry 71""", "" )
   RDW_DEF("hi", 0x44083, "red_hi2_fwd_vector8","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x44083, "entry0",2,0, "forwarding vector for entry 64""", "" )
   RDW_DEF_FLD( 0x44083, "entry1",6,4, "forwarding vector for entry 65""", "" )
   RDW_DEF_FLD( 0x44083, "entry2",10,8, "forwarding vector for entry 66""", "" )
   RDW_DEF_FLD( 0x44083, "entry3",14,12, "forwarding vector for entry 67""", "" )
   RDW_DEF_FLD( 0x44083, "entry4",18,16, "forwarding vector for entry 68""", "" )
   RDW_DEF_FLD( 0x44083, "entry5",22,20, "forwarding vector for entry 69""", "" )
   RDW_DEF_FLD( 0x44083, "entry6",26,24, "forwarding vector for entry 70""", "" )
   RDW_DEF_FLD( 0x44083, "entry7",30,28, "forwarding vector for entry 71""", "" )
   RDW_DEF("hi", 0x46083, "red_hi3_fwd_vector8","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x46083, "entry0",2,0, "forwarding vector for entry 64""", "" )
   RDW_DEF_FLD( 0x46083, "entry1",6,4, "forwarding vector for entry 65""", "" )
   RDW_DEF_FLD( 0x46083, "entry2",10,8, "forwarding vector for entry 66""", "" )
   RDW_DEF_FLD( 0x46083, "entry3",14,12, "forwarding vector for entry 67""", "" )
   RDW_DEF_FLD( 0x46083, "entry4",18,16, "forwarding vector for entry 68""", "" )
   RDW_DEF_FLD( 0x46083, "entry5",22,20, "forwarding vector for entry 69""", "" )
   RDW_DEF_FLD( 0x46083, "entry6",26,24, "forwarding vector for entry 70""", "" )
   RDW_DEF_FLD( 0x46083, "entry7",30,28, "forwarding vector for entry 71""", "" )
   RDW_DEF("hi", 0x48083, "red_hi4_fwd_vector8","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x48083, "entry0",2,0, "forwarding vector for entry 64""", "" )
   RDW_DEF_FLD( 0x48083, "entry1",6,4, "forwarding vector for entry 65""", "" )
   RDW_DEF_FLD( 0x48083, "entry2",10,8, "forwarding vector for entry 66""", "" )
   RDW_DEF_FLD( 0x48083, "entry3",14,12, "forwarding vector for entry 67""", "" )
   RDW_DEF_FLD( 0x48083, "entry4",18,16, "forwarding vector for entry 68""", "" )
   RDW_DEF_FLD( 0x48083, "entry5",22,20, "forwarding vector for entry 69""", "" )
   RDW_DEF_FLD( 0x48083, "entry6",26,24, "forwarding vector for entry 70""", "" )
   RDW_DEF_FLD( 0x48083, "entry7",30,28, "forwarding vector for entry 71""", "" )
   RDW_DEF("hi", 0x4a083, "red_hi5_fwd_vector8","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a083, "entry0",2,0, "forwarding vector for entry 64""", "" )
   RDW_DEF_FLD( 0x4a083, "entry1",6,4, "forwarding vector for entry 65""", "" )
   RDW_DEF_FLD( 0x4a083, "entry2",10,8, "forwarding vector for entry 66""", "" )
   RDW_DEF_FLD( 0x4a083, "entry3",14,12, "forwarding vector for entry 67""", "" )
   RDW_DEF_FLD( 0x4a083, "entry4",18,16, "forwarding vector for entry 68""", "" )
   RDW_DEF_FLD( 0x4a083, "entry5",22,20, "forwarding vector for entry 69""", "" )
   RDW_DEF_FLD( 0x4a083, "entry6",26,24, "forwarding vector for entry 70""", "" )
   RDW_DEF_FLD( 0x4a083, "entry7",30,28, "forwarding vector for entry 71""", "" )
   RDW_DEF("hi", 0x4c083, "red_hi6_fwd_vector8","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c083, "entry0",2,0, "forwarding vector for entry 64""", "" )
   RDW_DEF_FLD( 0x4c083, "entry1",6,4, "forwarding vector for entry 65""", "" )
   RDW_DEF_FLD( 0x4c083, "entry2",10,8, "forwarding vector for entry 66""", "" )
   RDW_DEF_FLD( 0x4c083, "entry3",14,12, "forwarding vector for entry 67""", "" )
   RDW_DEF_FLD( 0x4c083, "entry4",18,16, "forwarding vector for entry 68""", "" )
   RDW_DEF_FLD( 0x4c083, "entry5",22,20, "forwarding vector for entry 69""", "" )
   RDW_DEF_FLD( 0x4c083, "entry6",26,24, "forwarding vector for entry 70""", "" )
   RDW_DEF_FLD( 0x4c083, "entry7",30,28, "forwarding vector for entry 71""", "" )
   RDW_DEF("hi", 0x4e083, "red_hi7_fwd_vector8","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e083, "entry0",2,0, "forwarding vector for entry 64""", "" )
   RDW_DEF_FLD( 0x4e083, "entry1",6,4, "forwarding vector for entry 65""", "" )
   RDW_DEF_FLD( 0x4e083, "entry2",10,8, "forwarding vector for entry 66""", "" )
   RDW_DEF_FLD( 0x4e083, "entry3",14,12, "forwarding vector for entry 67""", "" )
   RDW_DEF_FLD( 0x4e083, "entry4",18,16, "forwarding vector for entry 68""", "" )
   RDW_DEF_FLD( 0x4e083, "entry5",22,20, "forwarding vector for entry 69""", "" )
   RDW_DEF_FLD( 0x4e083, "entry6",26,24, "forwarding vector for entry 70""", "" )
   RDW_DEF_FLD( 0x4e083, "entry7",30,28, "forwarding vector for entry 71""", "" )


   RDW_DEF("hi", 0x40084, "red_hi0_fwd_vector9","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x40084, "entry0",2,0, "forwarding vector for entry 72""", "" )
   RDW_DEF_FLD( 0x40084, "entry1",6,4, "forwarding vector for entry 73""", "" )
   RDW_DEF_FLD( 0x40084, "entry2",10,8, "forwarding vector for entry 74""", "" )
   RDW_DEF_FLD( 0x40084, "entry3",14,12, "forwarding vector for entry 75""", "" )
   RDW_DEF_FLD( 0x40084, "entry4",18,16, "forwarding vector for entry 76""", "" )
   RDW_DEF_FLD( 0x40084, "entry5",22,20, "forwarding vector for entry 77""", "" )
   RDW_DEF_FLD( 0x40084, "entry6",26,24, "forwarding vector for entry 78""", "" )
   RDW_DEF_FLD( 0x40084, "entry7",30,28, "forwarding vector for entry 79""", "" )
   RDW_DEF("hi", 0x42084, "red_hi1_fwd_vector9","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x42084, "entry0",2,0, "forwarding vector for entry 72""", "" )
   RDW_DEF_FLD( 0x42084, "entry1",6,4, "forwarding vector for entry 73""", "" )
   RDW_DEF_FLD( 0x42084, "entry2",10,8, "forwarding vector for entry 74""", "" )
   RDW_DEF_FLD( 0x42084, "entry3",14,12, "forwarding vector for entry 75""", "" )
   RDW_DEF_FLD( 0x42084, "entry4",18,16, "forwarding vector for entry 76""", "" )
   RDW_DEF_FLD( 0x42084, "entry5",22,20, "forwarding vector for entry 77""", "" )
   RDW_DEF_FLD( 0x42084, "entry6",26,24, "forwarding vector for entry 78""", "" )
   RDW_DEF_FLD( 0x42084, "entry7",30,28, "forwarding vector for entry 79""", "" )
   RDW_DEF("hi", 0x44084, "red_hi2_fwd_vector9","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x44084, "entry0",2,0, "forwarding vector for entry 72""", "" )
   RDW_DEF_FLD( 0x44084, "entry1",6,4, "forwarding vector for entry 73""", "" )
   RDW_DEF_FLD( 0x44084, "entry2",10,8, "forwarding vector for entry 74""", "" )
   RDW_DEF_FLD( 0x44084, "entry3",14,12, "forwarding vector for entry 75""", "" )
   RDW_DEF_FLD( 0x44084, "entry4",18,16, "forwarding vector for entry 76""", "" )
   RDW_DEF_FLD( 0x44084, "entry5",22,20, "forwarding vector for entry 77""", "" )
   RDW_DEF_FLD( 0x44084, "entry6",26,24, "forwarding vector for entry 78""", "" )
   RDW_DEF_FLD( 0x44084, "entry7",30,28, "forwarding vector for entry 79""", "" )
   RDW_DEF("hi", 0x46084, "red_hi3_fwd_vector9","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x46084, "entry0",2,0, "forwarding vector for entry 72""", "" )
   RDW_DEF_FLD( 0x46084, "entry1",6,4, "forwarding vector for entry 73""", "" )
   RDW_DEF_FLD( 0x46084, "entry2",10,8, "forwarding vector for entry 74""", "" )
   RDW_DEF_FLD( 0x46084, "entry3",14,12, "forwarding vector for entry 75""", "" )
   RDW_DEF_FLD( 0x46084, "entry4",18,16, "forwarding vector for entry 76""", "" )
   RDW_DEF_FLD( 0x46084, "entry5",22,20, "forwarding vector for entry 77""", "" )
   RDW_DEF_FLD( 0x46084, "entry6",26,24, "forwarding vector for entry 78""", "" )
   RDW_DEF_FLD( 0x46084, "entry7",30,28, "forwarding vector for entry 79""", "" )
   RDW_DEF("hi", 0x48084, "red_hi4_fwd_vector9","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x48084, "entry0",2,0, "forwarding vector for entry 72""", "" )
   RDW_DEF_FLD( 0x48084, "entry1",6,4, "forwarding vector for entry 73""", "" )
   RDW_DEF_FLD( 0x48084, "entry2",10,8, "forwarding vector for entry 74""", "" )
   RDW_DEF_FLD( 0x48084, "entry3",14,12, "forwarding vector for entry 75""", "" )
   RDW_DEF_FLD( 0x48084, "entry4",18,16, "forwarding vector for entry 76""", "" )
   RDW_DEF_FLD( 0x48084, "entry5",22,20, "forwarding vector for entry 77""", "" )
   RDW_DEF_FLD( 0x48084, "entry6",26,24, "forwarding vector for entry 78""", "" )
   RDW_DEF_FLD( 0x48084, "entry7",30,28, "forwarding vector for entry 79""", "" )
   RDW_DEF("hi", 0x4a084, "red_hi5_fwd_vector9","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a084, "entry0",2,0, "forwarding vector for entry 72""", "" )
   RDW_DEF_FLD( 0x4a084, "entry1",6,4, "forwarding vector for entry 73""", "" )
   RDW_DEF_FLD( 0x4a084, "entry2",10,8, "forwarding vector for entry 74""", "" )
   RDW_DEF_FLD( 0x4a084, "entry3",14,12, "forwarding vector for entry 75""", "" )
   RDW_DEF_FLD( 0x4a084, "entry4",18,16, "forwarding vector for entry 76""", "" )
   RDW_DEF_FLD( 0x4a084, "entry5",22,20, "forwarding vector for entry 77""", "" )
   RDW_DEF_FLD( 0x4a084, "entry6",26,24, "forwarding vector for entry 78""", "" )
   RDW_DEF_FLD( 0x4a084, "entry7",30,28, "forwarding vector for entry 79""", "" )
   RDW_DEF("hi", 0x4c084, "red_hi6_fwd_vector9","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c084, "entry0",2,0, "forwarding vector for entry 72""", "" )
   RDW_DEF_FLD( 0x4c084, "entry1",6,4, "forwarding vector for entry 73""", "" )
   RDW_DEF_FLD( 0x4c084, "entry2",10,8, "forwarding vector for entry 74""", "" )
   RDW_DEF_FLD( 0x4c084, "entry3",14,12, "forwarding vector for entry 75""", "" )
   RDW_DEF_FLD( 0x4c084, "entry4",18,16, "forwarding vector for entry 76""", "" )
   RDW_DEF_FLD( 0x4c084, "entry5",22,20, "forwarding vector for entry 77""", "" )
   RDW_DEF_FLD( 0x4c084, "entry6",26,24, "forwarding vector for entry 78""", "" )
   RDW_DEF_FLD( 0x4c084, "entry7",30,28, "forwarding vector for entry 79""", "" )
   RDW_DEF("hi", 0x4e084, "red_hi7_fwd_vector9","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e084, "entry0",2,0, "forwarding vector for entry 72""", "" )
   RDW_DEF_FLD( 0x4e084, "entry1",6,4, "forwarding vector for entry 73""", "" )
   RDW_DEF_FLD( 0x4e084, "entry2",10,8, "forwarding vector for entry 74""", "" )
   RDW_DEF_FLD( 0x4e084, "entry3",14,12, "forwarding vector for entry 75""", "" )
   RDW_DEF_FLD( 0x4e084, "entry4",18,16, "forwarding vector for entry 76""", "" )
   RDW_DEF_FLD( 0x4e084, "entry5",22,20, "forwarding vector for entry 77""", "" )
   RDW_DEF_FLD( 0x4e084, "entry6",26,24, "forwarding vector for entry 78""", "" )
   RDW_DEF_FLD( 0x4e084, "entry7",30,28, "forwarding vector for entry 79""", "" )


   RDW_DEF("hi", 0x40085, "red_hi0_fwd_vector10","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x40085, "entry0",2,0, "forwarding vector for entry 80""", "" )
   RDW_DEF_FLD( 0x40085, "entry1",6,4, "forwarding vector for entry 81""", "" )
   RDW_DEF_FLD( 0x40085, "entry2",10,8, "forwarding vector for entry 82""", "" )
   RDW_DEF_FLD( 0x40085, "entry3",14,12, "forwarding vector for entry 83""", "" )
   RDW_DEF_FLD( 0x40085, "entry4",18,16, "forwarding vector for entry 84""", "" )
   RDW_DEF_FLD( 0x40085, "entry5",22,20, "forwarding vector for entry 85""", "" )
   RDW_DEF_FLD( 0x40085, "entry6",26,24, "forwarding vector for entry 86""", "" )
   RDW_DEF_FLD( 0x40085, "entry7",30,28, "forwarding vector for entry 87""", "" )
   RDW_DEF("hi", 0x42085, "red_hi1_fwd_vector10","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x42085, "entry0",2,0, "forwarding vector for entry 80""", "" )
   RDW_DEF_FLD( 0x42085, "entry1",6,4, "forwarding vector for entry 81""", "" )
   RDW_DEF_FLD( 0x42085, "entry2",10,8, "forwarding vector for entry 82""", "" )
   RDW_DEF_FLD( 0x42085, "entry3",14,12, "forwarding vector for entry 83""", "" )
   RDW_DEF_FLD( 0x42085, "entry4",18,16, "forwarding vector for entry 84""", "" )
   RDW_DEF_FLD( 0x42085, "entry5",22,20, "forwarding vector for entry 85""", "" )
   RDW_DEF_FLD( 0x42085, "entry6",26,24, "forwarding vector for entry 86""", "" )
   RDW_DEF_FLD( 0x42085, "entry7",30,28, "forwarding vector for entry 87""", "" )
   RDW_DEF("hi", 0x44085, "red_hi2_fwd_vector10","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x44085, "entry0",2,0, "forwarding vector for entry 80""", "" )
   RDW_DEF_FLD( 0x44085, "entry1",6,4, "forwarding vector for entry 81""", "" )
   RDW_DEF_FLD( 0x44085, "entry2",10,8, "forwarding vector for entry 82""", "" )
   RDW_DEF_FLD( 0x44085, "entry3",14,12, "forwarding vector for entry 83""", "" )
   RDW_DEF_FLD( 0x44085, "entry4",18,16, "forwarding vector for entry 84""", "" )
   RDW_DEF_FLD( 0x44085, "entry5",22,20, "forwarding vector for entry 85""", "" )
   RDW_DEF_FLD( 0x44085, "entry6",26,24, "forwarding vector for entry 86""", "" )
   RDW_DEF_FLD( 0x44085, "entry7",30,28, "forwarding vector for entry 87""", "" )
   RDW_DEF("hi", 0x46085, "red_hi3_fwd_vector10","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x46085, "entry0",2,0, "forwarding vector for entry 80""", "" )
   RDW_DEF_FLD( 0x46085, "entry1",6,4, "forwarding vector for entry 81""", "" )
   RDW_DEF_FLD( 0x46085, "entry2",10,8, "forwarding vector for entry 82""", "" )
   RDW_DEF_FLD( 0x46085, "entry3",14,12, "forwarding vector for entry 83""", "" )
   RDW_DEF_FLD( 0x46085, "entry4",18,16, "forwarding vector for entry 84""", "" )
   RDW_DEF_FLD( 0x46085, "entry5",22,20, "forwarding vector for entry 85""", "" )
   RDW_DEF_FLD( 0x46085, "entry6",26,24, "forwarding vector for entry 86""", "" )
   RDW_DEF_FLD( 0x46085, "entry7",30,28, "forwarding vector for entry 87""", "" )
   RDW_DEF("hi", 0x48085, "red_hi4_fwd_vector10","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x48085, "entry0",2,0, "forwarding vector for entry 80""", "" )
   RDW_DEF_FLD( 0x48085, "entry1",6,4, "forwarding vector for entry 81""", "" )
   RDW_DEF_FLD( 0x48085, "entry2",10,8, "forwarding vector for entry 82""", "" )
   RDW_DEF_FLD( 0x48085, "entry3",14,12, "forwarding vector for entry 83""", "" )
   RDW_DEF_FLD( 0x48085, "entry4",18,16, "forwarding vector for entry 84""", "" )
   RDW_DEF_FLD( 0x48085, "entry5",22,20, "forwarding vector for entry 85""", "" )
   RDW_DEF_FLD( 0x48085, "entry6",26,24, "forwarding vector for entry 86""", "" )
   RDW_DEF_FLD( 0x48085, "entry7",30,28, "forwarding vector for entry 87""", "" )
   RDW_DEF("hi", 0x4a085, "red_hi5_fwd_vector10","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a085, "entry0",2,0, "forwarding vector for entry 80""", "" )
   RDW_DEF_FLD( 0x4a085, "entry1",6,4, "forwarding vector for entry 81""", "" )
   RDW_DEF_FLD( 0x4a085, "entry2",10,8, "forwarding vector for entry 82""", "" )
   RDW_DEF_FLD( 0x4a085, "entry3",14,12, "forwarding vector for entry 83""", "" )
   RDW_DEF_FLD( 0x4a085, "entry4",18,16, "forwarding vector for entry 84""", "" )
   RDW_DEF_FLD( 0x4a085, "entry5",22,20, "forwarding vector for entry 85""", "" )
   RDW_DEF_FLD( 0x4a085, "entry6",26,24, "forwarding vector for entry 86""", "" )
   RDW_DEF_FLD( 0x4a085, "entry7",30,28, "forwarding vector for entry 87""", "" )
   RDW_DEF("hi", 0x4c085, "red_hi6_fwd_vector10","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c085, "entry0",2,0, "forwarding vector for entry 80""", "" )
   RDW_DEF_FLD( 0x4c085, "entry1",6,4, "forwarding vector for entry 81""", "" )
   RDW_DEF_FLD( 0x4c085, "entry2",10,8, "forwarding vector for entry 82""", "" )
   RDW_DEF_FLD( 0x4c085, "entry3",14,12, "forwarding vector for entry 83""", "" )
   RDW_DEF_FLD( 0x4c085, "entry4",18,16, "forwarding vector for entry 84""", "" )
   RDW_DEF_FLD( 0x4c085, "entry5",22,20, "forwarding vector for entry 85""", "" )
   RDW_DEF_FLD( 0x4c085, "entry6",26,24, "forwarding vector for entry 86""", "" )
   RDW_DEF_FLD( 0x4c085, "entry7",30,28, "forwarding vector for entry 87""", "" )
   RDW_DEF("hi", 0x4e085, "red_hi7_fwd_vector10","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e085, "entry0",2,0, "forwarding vector for entry 80""", "" )
   RDW_DEF_FLD( 0x4e085, "entry1",6,4, "forwarding vector for entry 81""", "" )
   RDW_DEF_FLD( 0x4e085, "entry2",10,8, "forwarding vector for entry 82""", "" )
   RDW_DEF_FLD( 0x4e085, "entry3",14,12, "forwarding vector for entry 83""", "" )
   RDW_DEF_FLD( 0x4e085, "entry4",18,16, "forwarding vector for entry 84""", "" )
   RDW_DEF_FLD( 0x4e085, "entry5",22,20, "forwarding vector for entry 85""", "" )
   RDW_DEF_FLD( 0x4e085, "entry6",26,24, "forwarding vector for entry 86""", "" )
   RDW_DEF_FLD( 0x4e085, "entry7",30,28, "forwarding vector for entry 87""", "" )


   RDW_DEF("hi", 0x40086, "red_hi0_fwd_vector11","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x40086, "entry0",2,0, "forwarding vector for entry 88""", "" )
   RDW_DEF_FLD( 0x40086, "entry1",6,4, "forwarding vector for entry 89""", "" )
   RDW_DEF_FLD( 0x40086, "entry2",10,8, "forwarding vector for entry 90""", "" )
   RDW_DEF_FLD( 0x40086, "entry3",14,12, "forwarding vector for entry 91""", "" )
   RDW_DEF_FLD( 0x40086, "entry4",18,16, "forwarding vector for entry 92""", "" )
   RDW_DEF_FLD( 0x40086, "entry5",22,20, "forwarding vector for entry 93""", "" )
   RDW_DEF_FLD( 0x40086, "entry6",26,24, "forwarding vector for entry 94""", "" )
   RDW_DEF_FLD( 0x40086, "entry7",30,28, "forwarding vector for entry 95""", "" )
   RDW_DEF("hi", 0x42086, "red_hi1_fwd_vector11","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x42086, "entry0",2,0, "forwarding vector for entry 88""", "" )
   RDW_DEF_FLD( 0x42086, "entry1",6,4, "forwarding vector for entry 89""", "" )
   RDW_DEF_FLD( 0x42086, "entry2",10,8, "forwarding vector for entry 90""", "" )
   RDW_DEF_FLD( 0x42086, "entry3",14,12, "forwarding vector for entry 91""", "" )
   RDW_DEF_FLD( 0x42086, "entry4",18,16, "forwarding vector for entry 92""", "" )
   RDW_DEF_FLD( 0x42086, "entry5",22,20, "forwarding vector for entry 93""", "" )
   RDW_DEF_FLD( 0x42086, "entry6",26,24, "forwarding vector for entry 94""", "" )
   RDW_DEF_FLD( 0x42086, "entry7",30,28, "forwarding vector for entry 95""", "" )
   RDW_DEF("hi", 0x44086, "red_hi2_fwd_vector11","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x44086, "entry0",2,0, "forwarding vector for entry 88""", "" )
   RDW_DEF_FLD( 0x44086, "entry1",6,4, "forwarding vector for entry 89""", "" )
   RDW_DEF_FLD( 0x44086, "entry2",10,8, "forwarding vector for entry 90""", "" )
   RDW_DEF_FLD( 0x44086, "entry3",14,12, "forwarding vector for entry 91""", "" )
   RDW_DEF_FLD( 0x44086, "entry4",18,16, "forwarding vector for entry 92""", "" )
   RDW_DEF_FLD( 0x44086, "entry5",22,20, "forwarding vector for entry 93""", "" )
   RDW_DEF_FLD( 0x44086, "entry6",26,24, "forwarding vector for entry 94""", "" )
   RDW_DEF_FLD( 0x44086, "entry7",30,28, "forwarding vector for entry 95""", "" )
   RDW_DEF("hi", 0x46086, "red_hi3_fwd_vector11","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x46086, "entry0",2,0, "forwarding vector for entry 88""", "" )
   RDW_DEF_FLD( 0x46086, "entry1",6,4, "forwarding vector for entry 89""", "" )
   RDW_DEF_FLD( 0x46086, "entry2",10,8, "forwarding vector for entry 90""", "" )
   RDW_DEF_FLD( 0x46086, "entry3",14,12, "forwarding vector for entry 91""", "" )
   RDW_DEF_FLD( 0x46086, "entry4",18,16, "forwarding vector for entry 92""", "" )
   RDW_DEF_FLD( 0x46086, "entry5",22,20, "forwarding vector for entry 93""", "" )
   RDW_DEF_FLD( 0x46086, "entry6",26,24, "forwarding vector for entry 94""", "" )
   RDW_DEF_FLD( 0x46086, "entry7",30,28, "forwarding vector for entry 95""", "" )
   RDW_DEF("hi", 0x48086, "red_hi4_fwd_vector11","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x48086, "entry0",2,0, "forwarding vector for entry 88""", "" )
   RDW_DEF_FLD( 0x48086, "entry1",6,4, "forwarding vector for entry 89""", "" )
   RDW_DEF_FLD( 0x48086, "entry2",10,8, "forwarding vector for entry 90""", "" )
   RDW_DEF_FLD( 0x48086, "entry3",14,12, "forwarding vector for entry 91""", "" )
   RDW_DEF_FLD( 0x48086, "entry4",18,16, "forwarding vector for entry 92""", "" )
   RDW_DEF_FLD( 0x48086, "entry5",22,20, "forwarding vector for entry 93""", "" )
   RDW_DEF_FLD( 0x48086, "entry6",26,24, "forwarding vector for entry 94""", "" )
   RDW_DEF_FLD( 0x48086, "entry7",30,28, "forwarding vector for entry 95""", "" )
   RDW_DEF("hi", 0x4a086, "red_hi5_fwd_vector11","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a086, "entry0",2,0, "forwarding vector for entry 88""", "" )
   RDW_DEF_FLD( 0x4a086, "entry1",6,4, "forwarding vector for entry 89""", "" )
   RDW_DEF_FLD( 0x4a086, "entry2",10,8, "forwarding vector for entry 90""", "" )
   RDW_DEF_FLD( 0x4a086, "entry3",14,12, "forwarding vector for entry 91""", "" )
   RDW_DEF_FLD( 0x4a086, "entry4",18,16, "forwarding vector for entry 92""", "" )
   RDW_DEF_FLD( 0x4a086, "entry5",22,20, "forwarding vector for entry 93""", "" )
   RDW_DEF_FLD( 0x4a086, "entry6",26,24, "forwarding vector for entry 94""", "" )
   RDW_DEF_FLD( 0x4a086, "entry7",30,28, "forwarding vector for entry 95""", "" )
   RDW_DEF("hi", 0x4c086, "red_hi6_fwd_vector11","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c086, "entry0",2,0, "forwarding vector for entry 88""", "" )
   RDW_DEF_FLD( 0x4c086, "entry1",6,4, "forwarding vector for entry 89""", "" )
   RDW_DEF_FLD( 0x4c086, "entry2",10,8, "forwarding vector for entry 90""", "" )
   RDW_DEF_FLD( 0x4c086, "entry3",14,12, "forwarding vector for entry 91""", "" )
   RDW_DEF_FLD( 0x4c086, "entry4",18,16, "forwarding vector for entry 92""", "" )
   RDW_DEF_FLD( 0x4c086, "entry5",22,20, "forwarding vector for entry 93""", "" )
   RDW_DEF_FLD( 0x4c086, "entry6",26,24, "forwarding vector for entry 94""", "" )
   RDW_DEF_FLD( 0x4c086, "entry7",30,28, "forwarding vector for entry 95""", "" )
   RDW_DEF("hi", 0x4e086, "red_hi7_fwd_vector11","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e086, "entry0",2,0, "forwarding vector for entry 88""", "" )
   RDW_DEF_FLD( 0x4e086, "entry1",6,4, "forwarding vector for entry 89""", "" )
   RDW_DEF_FLD( 0x4e086, "entry2",10,8, "forwarding vector for entry 90""", "" )
   RDW_DEF_FLD( 0x4e086, "entry3",14,12, "forwarding vector for entry 91""", "" )
   RDW_DEF_FLD( 0x4e086, "entry4",18,16, "forwarding vector for entry 92""", "" )
   RDW_DEF_FLD( 0x4e086, "entry5",22,20, "forwarding vector for entry 93""", "" )
   RDW_DEF_FLD( 0x4e086, "entry6",26,24, "forwarding vector for entry 94""", "" )
   RDW_DEF_FLD( 0x4e086, "entry7",30,28, "forwarding vector for entry 95""", "" )


   RDW_DEF("hi", 0x40087, "red_hi0_fwd_vector12","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x40087, "entry0",2,0, "forwarding vector for entry 96""", "" )
   RDW_DEF_FLD( 0x40087, "entry1",6,4, "forwarding vector for entry 97""", "" )
   RDW_DEF_FLD( 0x40087, "entry2",10,8, "forwarding vector for entry 98""", "" )
   RDW_DEF_FLD( 0x40087, "entry3",14,12, "forwarding vector for entry 99""", "" )
   RDW_DEF_FLD( 0x40087, "entry4",18,16, "forwarding vector for entry 100""", "" )
   RDW_DEF_FLD( 0x40087, "entry5",22,20, "forwarding vector for entry 101""", "" )
   RDW_DEF_FLD( 0x40087, "entry6",26,24, "forwarding vector for entry 102""", "" )
   RDW_DEF_FLD( 0x40087, "entry7",30,28, "forwarding vector for entry 103""", "" )
   RDW_DEF("hi", 0x42087, "red_hi1_fwd_vector12","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x42087, "entry0",2,0, "forwarding vector for entry 96""", "" )
   RDW_DEF_FLD( 0x42087, "entry1",6,4, "forwarding vector for entry 97""", "" )
   RDW_DEF_FLD( 0x42087, "entry2",10,8, "forwarding vector for entry 98""", "" )
   RDW_DEF_FLD( 0x42087, "entry3",14,12, "forwarding vector for entry 99""", "" )
   RDW_DEF_FLD( 0x42087, "entry4",18,16, "forwarding vector for entry 100""", "" )
   RDW_DEF_FLD( 0x42087, "entry5",22,20, "forwarding vector for entry 101""", "" )
   RDW_DEF_FLD( 0x42087, "entry6",26,24, "forwarding vector for entry 102""", "" )
   RDW_DEF_FLD( 0x42087, "entry7",30,28, "forwarding vector for entry 103""", "" )
   RDW_DEF("hi", 0x44087, "red_hi2_fwd_vector12","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x44087, "entry0",2,0, "forwarding vector for entry 96""", "" )
   RDW_DEF_FLD( 0x44087, "entry1",6,4, "forwarding vector for entry 97""", "" )
   RDW_DEF_FLD( 0x44087, "entry2",10,8, "forwarding vector for entry 98""", "" )
   RDW_DEF_FLD( 0x44087, "entry3",14,12, "forwarding vector for entry 99""", "" )
   RDW_DEF_FLD( 0x44087, "entry4",18,16, "forwarding vector for entry 100""", "" )
   RDW_DEF_FLD( 0x44087, "entry5",22,20, "forwarding vector for entry 101""", "" )
   RDW_DEF_FLD( 0x44087, "entry6",26,24, "forwarding vector for entry 102""", "" )
   RDW_DEF_FLD( 0x44087, "entry7",30,28, "forwarding vector for entry 103""", "" )
   RDW_DEF("hi", 0x46087, "red_hi3_fwd_vector12","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x46087, "entry0",2,0, "forwarding vector for entry 96""", "" )
   RDW_DEF_FLD( 0x46087, "entry1",6,4, "forwarding vector for entry 97""", "" )
   RDW_DEF_FLD( 0x46087, "entry2",10,8, "forwarding vector for entry 98""", "" )
   RDW_DEF_FLD( 0x46087, "entry3",14,12, "forwarding vector for entry 99""", "" )
   RDW_DEF_FLD( 0x46087, "entry4",18,16, "forwarding vector for entry 100""", "" )
   RDW_DEF_FLD( 0x46087, "entry5",22,20, "forwarding vector for entry 101""", "" )
   RDW_DEF_FLD( 0x46087, "entry6",26,24, "forwarding vector for entry 102""", "" )
   RDW_DEF_FLD( 0x46087, "entry7",30,28, "forwarding vector for entry 103""", "" )
   RDW_DEF("hi", 0x48087, "red_hi4_fwd_vector12","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x48087, "entry0",2,0, "forwarding vector for entry 96""", "" )
   RDW_DEF_FLD( 0x48087, "entry1",6,4, "forwarding vector for entry 97""", "" )
   RDW_DEF_FLD( 0x48087, "entry2",10,8, "forwarding vector for entry 98""", "" )
   RDW_DEF_FLD( 0x48087, "entry3",14,12, "forwarding vector for entry 99""", "" )
   RDW_DEF_FLD( 0x48087, "entry4",18,16, "forwarding vector for entry 100""", "" )
   RDW_DEF_FLD( 0x48087, "entry5",22,20, "forwarding vector for entry 101""", "" )
   RDW_DEF_FLD( 0x48087, "entry6",26,24, "forwarding vector for entry 102""", "" )
   RDW_DEF_FLD( 0x48087, "entry7",30,28, "forwarding vector for entry 103""", "" )
   RDW_DEF("hi", 0x4a087, "red_hi5_fwd_vector12","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a087, "entry0",2,0, "forwarding vector for entry 96""", "" )
   RDW_DEF_FLD( 0x4a087, "entry1",6,4, "forwarding vector for entry 97""", "" )
   RDW_DEF_FLD( 0x4a087, "entry2",10,8, "forwarding vector for entry 98""", "" )
   RDW_DEF_FLD( 0x4a087, "entry3",14,12, "forwarding vector for entry 99""", "" )
   RDW_DEF_FLD( 0x4a087, "entry4",18,16, "forwarding vector for entry 100""", "" )
   RDW_DEF_FLD( 0x4a087, "entry5",22,20, "forwarding vector for entry 101""", "" )
   RDW_DEF_FLD( 0x4a087, "entry6",26,24, "forwarding vector for entry 102""", "" )
   RDW_DEF_FLD( 0x4a087, "entry7",30,28, "forwarding vector for entry 103""", "" )
   RDW_DEF("hi", 0x4c087, "red_hi6_fwd_vector12","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c087, "entry0",2,0, "forwarding vector for entry 96""", "" )
   RDW_DEF_FLD( 0x4c087, "entry1",6,4, "forwarding vector for entry 97""", "" )
   RDW_DEF_FLD( 0x4c087, "entry2",10,8, "forwarding vector for entry 98""", "" )
   RDW_DEF_FLD( 0x4c087, "entry3",14,12, "forwarding vector for entry 99""", "" )
   RDW_DEF_FLD( 0x4c087, "entry4",18,16, "forwarding vector for entry 100""", "" )
   RDW_DEF_FLD( 0x4c087, "entry5",22,20, "forwarding vector for entry 101""", "" )
   RDW_DEF_FLD( 0x4c087, "entry6",26,24, "forwarding vector for entry 102""", "" )
   RDW_DEF_FLD( 0x4c087, "entry7",30,28, "forwarding vector for entry 103""", "" )
   RDW_DEF("hi", 0x4e087, "red_hi7_fwd_vector12","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e087, "entry0",2,0, "forwarding vector for entry 96""", "" )
   RDW_DEF_FLD( 0x4e087, "entry1",6,4, "forwarding vector for entry 97""", "" )
   RDW_DEF_FLD( 0x4e087, "entry2",10,8, "forwarding vector for entry 98""", "" )
   RDW_DEF_FLD( 0x4e087, "entry3",14,12, "forwarding vector for entry 99""", "" )
   RDW_DEF_FLD( 0x4e087, "entry4",18,16, "forwarding vector for entry 100""", "" )
   RDW_DEF_FLD( 0x4e087, "entry5",22,20, "forwarding vector for entry 101""", "" )
   RDW_DEF_FLD( 0x4e087, "entry6",26,24, "forwarding vector for entry 102""", "" )
   RDW_DEF_FLD( 0x4e087, "entry7",30,28, "forwarding vector for entry 103""", "" )


   RDW_DEF("hi", 0x40088, "red_hi0_fwd_vector13","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x40088, "entry0",2,0, "forwarding vector for entry 104""", "" )
   RDW_DEF_FLD( 0x40088, "entry1",6,4, "forwarding vector for entry 105""", "" )
   RDW_DEF_FLD( 0x40088, "entry2",10,8, "forwarding vector for entry 106""", "" )
   RDW_DEF_FLD( 0x40088, "entry3",14,12, "forwarding vector for entry 107""", "" )
   RDW_DEF_FLD( 0x40088, "entry4",18,16, "forwarding vector for entry 108""", "" )
   RDW_DEF_FLD( 0x40088, "entry5",22,20, "forwarding vector for entry 109""", "" )
   RDW_DEF_FLD( 0x40088, "entry6",26,24, "forwarding vector for entry 110""", "" )
   RDW_DEF_FLD( 0x40088, "entry7",30,28, "forwarding vector for entry 111""", "" )
   RDW_DEF("hi", 0x42088, "red_hi1_fwd_vector13","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x42088, "entry0",2,0, "forwarding vector for entry 104""", "" )
   RDW_DEF_FLD( 0x42088, "entry1",6,4, "forwarding vector for entry 105""", "" )
   RDW_DEF_FLD( 0x42088, "entry2",10,8, "forwarding vector for entry 106""", "" )
   RDW_DEF_FLD( 0x42088, "entry3",14,12, "forwarding vector for entry 107""", "" )
   RDW_DEF_FLD( 0x42088, "entry4",18,16, "forwarding vector for entry 108""", "" )
   RDW_DEF_FLD( 0x42088, "entry5",22,20, "forwarding vector for entry 109""", "" )
   RDW_DEF_FLD( 0x42088, "entry6",26,24, "forwarding vector for entry 110""", "" )
   RDW_DEF_FLD( 0x42088, "entry7",30,28, "forwarding vector for entry 111""", "" )
   RDW_DEF("hi", 0x44088, "red_hi2_fwd_vector13","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x44088, "entry0",2,0, "forwarding vector for entry 104""", "" )
   RDW_DEF_FLD( 0x44088, "entry1",6,4, "forwarding vector for entry 105""", "" )
   RDW_DEF_FLD( 0x44088, "entry2",10,8, "forwarding vector for entry 106""", "" )
   RDW_DEF_FLD( 0x44088, "entry3",14,12, "forwarding vector for entry 107""", "" )
   RDW_DEF_FLD( 0x44088, "entry4",18,16, "forwarding vector for entry 108""", "" )
   RDW_DEF_FLD( 0x44088, "entry5",22,20, "forwarding vector for entry 109""", "" )
   RDW_DEF_FLD( 0x44088, "entry6",26,24, "forwarding vector for entry 110""", "" )
   RDW_DEF_FLD( 0x44088, "entry7",30,28, "forwarding vector for entry 111""", "" )
   RDW_DEF("hi", 0x46088, "red_hi3_fwd_vector13","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x46088, "entry0",2,0, "forwarding vector for entry 104""", "" )
   RDW_DEF_FLD( 0x46088, "entry1",6,4, "forwarding vector for entry 105""", "" )
   RDW_DEF_FLD( 0x46088, "entry2",10,8, "forwarding vector for entry 106""", "" )
   RDW_DEF_FLD( 0x46088, "entry3",14,12, "forwarding vector for entry 107""", "" )
   RDW_DEF_FLD( 0x46088, "entry4",18,16, "forwarding vector for entry 108""", "" )
   RDW_DEF_FLD( 0x46088, "entry5",22,20, "forwarding vector for entry 109""", "" )
   RDW_DEF_FLD( 0x46088, "entry6",26,24, "forwarding vector for entry 110""", "" )
   RDW_DEF_FLD( 0x46088, "entry7",30,28, "forwarding vector for entry 111""", "" )
   RDW_DEF("hi", 0x48088, "red_hi4_fwd_vector13","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x48088, "entry0",2,0, "forwarding vector for entry 104""", "" )
   RDW_DEF_FLD( 0x48088, "entry1",6,4, "forwarding vector for entry 105""", "" )
   RDW_DEF_FLD( 0x48088, "entry2",10,8, "forwarding vector for entry 106""", "" )
   RDW_DEF_FLD( 0x48088, "entry3",14,12, "forwarding vector for entry 107""", "" )
   RDW_DEF_FLD( 0x48088, "entry4",18,16, "forwarding vector for entry 108""", "" )
   RDW_DEF_FLD( 0x48088, "entry5",22,20, "forwarding vector for entry 109""", "" )
   RDW_DEF_FLD( 0x48088, "entry6",26,24, "forwarding vector for entry 110""", "" )
   RDW_DEF_FLD( 0x48088, "entry7",30,28, "forwarding vector for entry 111""", "" )
   RDW_DEF("hi", 0x4a088, "red_hi5_fwd_vector13","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a088, "entry0",2,0, "forwarding vector for entry 104""", "" )
   RDW_DEF_FLD( 0x4a088, "entry1",6,4, "forwarding vector for entry 105""", "" )
   RDW_DEF_FLD( 0x4a088, "entry2",10,8, "forwarding vector for entry 106""", "" )
   RDW_DEF_FLD( 0x4a088, "entry3",14,12, "forwarding vector for entry 107""", "" )
   RDW_DEF_FLD( 0x4a088, "entry4",18,16, "forwarding vector for entry 108""", "" )
   RDW_DEF_FLD( 0x4a088, "entry5",22,20, "forwarding vector for entry 109""", "" )
   RDW_DEF_FLD( 0x4a088, "entry6",26,24, "forwarding vector for entry 110""", "" )
   RDW_DEF_FLD( 0x4a088, "entry7",30,28, "forwarding vector for entry 111""", "" )
   RDW_DEF("hi", 0x4c088, "red_hi6_fwd_vector13","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c088, "entry0",2,0, "forwarding vector for entry 104""", "" )
   RDW_DEF_FLD( 0x4c088, "entry1",6,4, "forwarding vector for entry 105""", "" )
   RDW_DEF_FLD( 0x4c088, "entry2",10,8, "forwarding vector for entry 106""", "" )
   RDW_DEF_FLD( 0x4c088, "entry3",14,12, "forwarding vector for entry 107""", "" )
   RDW_DEF_FLD( 0x4c088, "entry4",18,16, "forwarding vector for entry 108""", "" )
   RDW_DEF_FLD( 0x4c088, "entry5",22,20, "forwarding vector for entry 109""", "" )
   RDW_DEF_FLD( 0x4c088, "entry6",26,24, "forwarding vector for entry 110""", "" )
   RDW_DEF_FLD( 0x4c088, "entry7",30,28, "forwarding vector for entry 111""", "" )
   RDW_DEF("hi", 0x4e088, "red_hi7_fwd_vector13","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e088, "entry0",2,0, "forwarding vector for entry 104""", "" )
   RDW_DEF_FLD( 0x4e088, "entry1",6,4, "forwarding vector for entry 105""", "" )
   RDW_DEF_FLD( 0x4e088, "entry2",10,8, "forwarding vector for entry 106""", "" )
   RDW_DEF_FLD( 0x4e088, "entry3",14,12, "forwarding vector for entry 107""", "" )
   RDW_DEF_FLD( 0x4e088, "entry4",18,16, "forwarding vector for entry 108""", "" )
   RDW_DEF_FLD( 0x4e088, "entry5",22,20, "forwarding vector for entry 109""", "" )
   RDW_DEF_FLD( 0x4e088, "entry6",26,24, "forwarding vector for entry 110""", "" )
   RDW_DEF_FLD( 0x4e088, "entry7",30,28, "forwarding vector for entry 111""", "" )


   RDW_DEF("hi", 0x40089, "red_hi0_fwd_vector14","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x40089, "entry0",2,0, "forwarding vector for entry 112""", "" )
   RDW_DEF_FLD( 0x40089, "entry1",6,4, "forwarding vector for entry 113""", "" )
   RDW_DEF_FLD( 0x40089, "entry2",10,8, "forwarding vector for entry 114""", "" )
   RDW_DEF_FLD( 0x40089, "entry3",14,12, "forwarding vector for entry 115""", "" )
   RDW_DEF_FLD( 0x40089, "entry4",18,16, "forwarding vector for entry 116""", "" )
   RDW_DEF_FLD( 0x40089, "entry5",22,20, "forwarding vector for entry 117""", "" )
   RDW_DEF_FLD( 0x40089, "entry6",26,24, "forwarding vector for entry 118""", "" )
   RDW_DEF_FLD( 0x40089, "entry7",30,28, "forwarding vector for entry 119""", "" )
   RDW_DEF("hi", 0x42089, "red_hi1_fwd_vector14","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x42089, "entry0",2,0, "forwarding vector for entry 112""", "" )
   RDW_DEF_FLD( 0x42089, "entry1",6,4, "forwarding vector for entry 113""", "" )
   RDW_DEF_FLD( 0x42089, "entry2",10,8, "forwarding vector for entry 114""", "" )
   RDW_DEF_FLD( 0x42089, "entry3",14,12, "forwarding vector for entry 115""", "" )
   RDW_DEF_FLD( 0x42089, "entry4",18,16, "forwarding vector for entry 116""", "" )
   RDW_DEF_FLD( 0x42089, "entry5",22,20, "forwarding vector for entry 117""", "" )
   RDW_DEF_FLD( 0x42089, "entry6",26,24, "forwarding vector for entry 118""", "" )
   RDW_DEF_FLD( 0x42089, "entry7",30,28, "forwarding vector for entry 119""", "" )
   RDW_DEF("hi", 0x44089, "red_hi2_fwd_vector14","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x44089, "entry0",2,0, "forwarding vector for entry 112""", "" )
   RDW_DEF_FLD( 0x44089, "entry1",6,4, "forwarding vector for entry 113""", "" )
   RDW_DEF_FLD( 0x44089, "entry2",10,8, "forwarding vector for entry 114""", "" )
   RDW_DEF_FLD( 0x44089, "entry3",14,12, "forwarding vector for entry 115""", "" )
   RDW_DEF_FLD( 0x44089, "entry4",18,16, "forwarding vector for entry 116""", "" )
   RDW_DEF_FLD( 0x44089, "entry5",22,20, "forwarding vector for entry 117""", "" )
   RDW_DEF_FLD( 0x44089, "entry6",26,24, "forwarding vector for entry 118""", "" )
   RDW_DEF_FLD( 0x44089, "entry7",30,28, "forwarding vector for entry 119""", "" )
   RDW_DEF("hi", 0x46089, "red_hi3_fwd_vector14","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x46089, "entry0",2,0, "forwarding vector for entry 112""", "" )
   RDW_DEF_FLD( 0x46089, "entry1",6,4, "forwarding vector for entry 113""", "" )
   RDW_DEF_FLD( 0x46089, "entry2",10,8, "forwarding vector for entry 114""", "" )
   RDW_DEF_FLD( 0x46089, "entry3",14,12, "forwarding vector for entry 115""", "" )
   RDW_DEF_FLD( 0x46089, "entry4",18,16, "forwarding vector for entry 116""", "" )
   RDW_DEF_FLD( 0x46089, "entry5",22,20, "forwarding vector for entry 117""", "" )
   RDW_DEF_FLD( 0x46089, "entry6",26,24, "forwarding vector for entry 118""", "" )
   RDW_DEF_FLD( 0x46089, "entry7",30,28, "forwarding vector for entry 119""", "" )
   RDW_DEF("hi", 0x48089, "red_hi4_fwd_vector14","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x48089, "entry0",2,0, "forwarding vector for entry 112""", "" )
   RDW_DEF_FLD( 0x48089, "entry1",6,4, "forwarding vector for entry 113""", "" )
   RDW_DEF_FLD( 0x48089, "entry2",10,8, "forwarding vector for entry 114""", "" )
   RDW_DEF_FLD( 0x48089, "entry3",14,12, "forwarding vector for entry 115""", "" )
   RDW_DEF_FLD( 0x48089, "entry4",18,16, "forwarding vector for entry 116""", "" )
   RDW_DEF_FLD( 0x48089, "entry5",22,20, "forwarding vector for entry 117""", "" )
   RDW_DEF_FLD( 0x48089, "entry6",26,24, "forwarding vector for entry 118""", "" )
   RDW_DEF_FLD( 0x48089, "entry7",30,28, "forwarding vector for entry 119""", "" )
   RDW_DEF("hi", 0x4a089, "red_hi5_fwd_vector14","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a089, "entry0",2,0, "forwarding vector for entry 112""", "" )
   RDW_DEF_FLD( 0x4a089, "entry1",6,4, "forwarding vector for entry 113""", "" )
   RDW_DEF_FLD( 0x4a089, "entry2",10,8, "forwarding vector for entry 114""", "" )
   RDW_DEF_FLD( 0x4a089, "entry3",14,12, "forwarding vector for entry 115""", "" )
   RDW_DEF_FLD( 0x4a089, "entry4",18,16, "forwarding vector for entry 116""", "" )
   RDW_DEF_FLD( 0x4a089, "entry5",22,20, "forwarding vector for entry 117""", "" )
   RDW_DEF_FLD( 0x4a089, "entry6",26,24, "forwarding vector for entry 118""", "" )
   RDW_DEF_FLD( 0x4a089, "entry7",30,28, "forwarding vector for entry 119""", "" )
   RDW_DEF("hi", 0x4c089, "red_hi6_fwd_vector14","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c089, "entry0",2,0, "forwarding vector for entry 112""", "" )
   RDW_DEF_FLD( 0x4c089, "entry1",6,4, "forwarding vector for entry 113""", "" )
   RDW_DEF_FLD( 0x4c089, "entry2",10,8, "forwarding vector for entry 114""", "" )
   RDW_DEF_FLD( 0x4c089, "entry3",14,12, "forwarding vector for entry 115""", "" )
   RDW_DEF_FLD( 0x4c089, "entry4",18,16, "forwarding vector for entry 116""", "" )
   RDW_DEF_FLD( 0x4c089, "entry5",22,20, "forwarding vector for entry 117""", "" )
   RDW_DEF_FLD( 0x4c089, "entry6",26,24, "forwarding vector for entry 118""", "" )
   RDW_DEF_FLD( 0x4c089, "entry7",30,28, "forwarding vector for entry 119""", "" )
   RDW_DEF("hi", 0x4e089, "red_hi7_fwd_vector14","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e089, "entry0",2,0, "forwarding vector for entry 112""", "" )
   RDW_DEF_FLD( 0x4e089, "entry1",6,4, "forwarding vector for entry 113""", "" )
   RDW_DEF_FLD( 0x4e089, "entry2",10,8, "forwarding vector for entry 114""", "" )
   RDW_DEF_FLD( 0x4e089, "entry3",14,12, "forwarding vector for entry 115""", "" )
   RDW_DEF_FLD( 0x4e089, "entry4",18,16, "forwarding vector for entry 116""", "" )
   RDW_DEF_FLD( 0x4e089, "entry5",22,20, "forwarding vector for entry 117""", "" )
   RDW_DEF_FLD( 0x4e089, "entry6",26,24, "forwarding vector for entry 118""", "" )
   RDW_DEF_FLD( 0x4e089, "entry7",30,28, "forwarding vector for entry 119""", "" )


   RDW_DEF("hi", 0x4008a, "red_hi0_fwd_vector15","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4008a, "entry0",2,0, "forwarding vector for entry 120""", "" )
   RDW_DEF_FLD( 0x4008a, "entry1",6,4, "forwarding vector for entry 121""", "" )
   RDW_DEF_FLD( 0x4008a, "entry2",10,8, "forwarding vector for entry 122""", "" )
   RDW_DEF_FLD( 0x4008a, "entry3",14,12, "forwarding vector for entry 123""", "" )
   RDW_DEF_FLD( 0x4008a, "entry4",18,16, "forwarding vector for entry 124""", "" )
   RDW_DEF_FLD( 0x4008a, "entry5",22,20, "forwarding vector for entry 125""", "" )
   RDW_DEF_FLD( 0x4008a, "entry6",26,24, "forwarding vector for entry 126""", "" )
   RDW_DEF_FLD( 0x4008a, "entry7",30,28, "forwarding vector for entry 127""", "" )
   RDW_DEF("hi", 0x4208a, "red_hi1_fwd_vector15","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4208a, "entry0",2,0, "forwarding vector for entry 120""", "" )
   RDW_DEF_FLD( 0x4208a, "entry1",6,4, "forwarding vector for entry 121""", "" )
   RDW_DEF_FLD( 0x4208a, "entry2",10,8, "forwarding vector for entry 122""", "" )
   RDW_DEF_FLD( 0x4208a, "entry3",14,12, "forwarding vector for entry 123""", "" )
   RDW_DEF_FLD( 0x4208a, "entry4",18,16, "forwarding vector for entry 124""", "" )
   RDW_DEF_FLD( 0x4208a, "entry5",22,20, "forwarding vector for entry 125""", "" )
   RDW_DEF_FLD( 0x4208a, "entry6",26,24, "forwarding vector for entry 126""", "" )
   RDW_DEF_FLD( 0x4208a, "entry7",30,28, "forwarding vector for entry 127""", "" )
   RDW_DEF("hi", 0x4408a, "red_hi2_fwd_vector15","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4408a, "entry0",2,0, "forwarding vector for entry 120""", "" )
   RDW_DEF_FLD( 0x4408a, "entry1",6,4, "forwarding vector for entry 121""", "" )
   RDW_DEF_FLD( 0x4408a, "entry2",10,8, "forwarding vector for entry 122""", "" )
   RDW_DEF_FLD( 0x4408a, "entry3",14,12, "forwarding vector for entry 123""", "" )
   RDW_DEF_FLD( 0x4408a, "entry4",18,16, "forwarding vector for entry 124""", "" )
   RDW_DEF_FLD( 0x4408a, "entry5",22,20, "forwarding vector for entry 125""", "" )
   RDW_DEF_FLD( 0x4408a, "entry6",26,24, "forwarding vector for entry 126""", "" )
   RDW_DEF_FLD( 0x4408a, "entry7",30,28, "forwarding vector for entry 127""", "" )
   RDW_DEF("hi", 0x4608a, "red_hi3_fwd_vector15","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4608a, "entry0",2,0, "forwarding vector for entry 120""", "" )
   RDW_DEF_FLD( 0x4608a, "entry1",6,4, "forwarding vector for entry 121""", "" )
   RDW_DEF_FLD( 0x4608a, "entry2",10,8, "forwarding vector for entry 122""", "" )
   RDW_DEF_FLD( 0x4608a, "entry3",14,12, "forwarding vector for entry 123""", "" )
   RDW_DEF_FLD( 0x4608a, "entry4",18,16, "forwarding vector for entry 124""", "" )
   RDW_DEF_FLD( 0x4608a, "entry5",22,20, "forwarding vector for entry 125""", "" )
   RDW_DEF_FLD( 0x4608a, "entry6",26,24, "forwarding vector for entry 126""", "" )
   RDW_DEF_FLD( 0x4608a, "entry7",30,28, "forwarding vector for entry 127""", "" )
   RDW_DEF("hi", 0x4808a, "red_hi4_fwd_vector15","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4808a, "entry0",2,0, "forwarding vector for entry 120""", "" )
   RDW_DEF_FLD( 0x4808a, "entry1",6,4, "forwarding vector for entry 121""", "" )
   RDW_DEF_FLD( 0x4808a, "entry2",10,8, "forwarding vector for entry 122""", "" )
   RDW_DEF_FLD( 0x4808a, "entry3",14,12, "forwarding vector for entry 123""", "" )
   RDW_DEF_FLD( 0x4808a, "entry4",18,16, "forwarding vector for entry 124""", "" )
   RDW_DEF_FLD( 0x4808a, "entry5",22,20, "forwarding vector for entry 125""", "" )
   RDW_DEF_FLD( 0x4808a, "entry6",26,24, "forwarding vector for entry 126""", "" )
   RDW_DEF_FLD( 0x4808a, "entry7",30,28, "forwarding vector for entry 127""", "" )
   RDW_DEF("hi", 0x4a08a, "red_hi5_fwd_vector15","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a08a, "entry0",2,0, "forwarding vector for entry 120""", "" )
   RDW_DEF_FLD( 0x4a08a, "entry1",6,4, "forwarding vector for entry 121""", "" )
   RDW_DEF_FLD( 0x4a08a, "entry2",10,8, "forwarding vector for entry 122""", "" )
   RDW_DEF_FLD( 0x4a08a, "entry3",14,12, "forwarding vector for entry 123""", "" )
   RDW_DEF_FLD( 0x4a08a, "entry4",18,16, "forwarding vector for entry 124""", "" )
   RDW_DEF_FLD( 0x4a08a, "entry5",22,20, "forwarding vector for entry 125""", "" )
   RDW_DEF_FLD( 0x4a08a, "entry6",26,24, "forwarding vector for entry 126""", "" )
   RDW_DEF_FLD( 0x4a08a, "entry7",30,28, "forwarding vector for entry 127""", "" )
   RDW_DEF("hi", 0x4c08a, "red_hi6_fwd_vector15","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c08a, "entry0",2,0, "forwarding vector for entry 120""", "" )
   RDW_DEF_FLD( 0x4c08a, "entry1",6,4, "forwarding vector for entry 121""", "" )
   RDW_DEF_FLD( 0x4c08a, "entry2",10,8, "forwarding vector for entry 122""", "" )
   RDW_DEF_FLD( 0x4c08a, "entry3",14,12, "forwarding vector for entry 123""", "" )
   RDW_DEF_FLD( 0x4c08a, "entry4",18,16, "forwarding vector for entry 124""", "" )
   RDW_DEF_FLD( 0x4c08a, "entry5",22,20, "forwarding vector for entry 125""", "" )
   RDW_DEF_FLD( 0x4c08a, "entry6",26,24, "forwarding vector for entry 126""", "" )
   RDW_DEF_FLD( 0x4c08a, "entry7",30,28, "forwarding vector for entry 127""", "" )
   RDW_DEF("hi", 0x4e08a, "red_hi7_fwd_vector15","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e08a, "entry0",2,0, "forwarding vector for entry 120""", "" )
   RDW_DEF_FLD( 0x4e08a, "entry1",6,4, "forwarding vector for entry 121""", "" )
   RDW_DEF_FLD( 0x4e08a, "entry2",10,8, "forwarding vector for entry 122""", "" )
   RDW_DEF_FLD( 0x4e08a, "entry3",14,12, "forwarding vector for entry 123""", "" )
   RDW_DEF_FLD( 0x4e08a, "entry4",18,16, "forwarding vector for entry 124""", "" )
   RDW_DEF_FLD( 0x4e08a, "entry5",22,20, "forwarding vector for entry 125""", "" )
   RDW_DEF_FLD( 0x4e08a, "entry6",26,24, "forwarding vector for entry 126""", "" )
   RDW_DEF_FLD( 0x4e08a, "entry7",30,28, "forwarding vector for entry 127""", "" )


   RDW_DEF("hi", 0x4008b, "red_hi0_fwd_vector16","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4008b, "entry0",2,0, "forwarding vector for entry 128""", "" )
   RDW_DEF_FLD( 0x4008b, "entry1",6,4, "forwarding vector for entry 129""", "" )
   RDW_DEF_FLD( 0x4008b, "entry2",10,8, "forwarding vector for entry 130""", "" )
   RDW_DEF_FLD( 0x4008b, "entry3",14,12, "forwarding vector for entry 131""", "" )
   RDW_DEF_FLD( 0x4008b, "entry4",18,16, "forwarding vector for entry 132""", "" )
   RDW_DEF_FLD( 0x4008b, "entry5",22,20, "forwarding vector for entry 133""", "" )
   RDW_DEF_FLD( 0x4008b, "entry6",26,24, "forwarding vector for entry 134""", "" )
   RDW_DEF_FLD( 0x4008b, "entry7",30,28, "forwarding vector for entry 135""", "" )
   RDW_DEF("hi", 0x4208b, "red_hi1_fwd_vector16","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4208b, "entry0",2,0, "forwarding vector for entry 128""", "" )
   RDW_DEF_FLD( 0x4208b, "entry1",6,4, "forwarding vector for entry 129""", "" )
   RDW_DEF_FLD( 0x4208b, "entry2",10,8, "forwarding vector for entry 130""", "" )
   RDW_DEF_FLD( 0x4208b, "entry3",14,12, "forwarding vector for entry 131""", "" )
   RDW_DEF_FLD( 0x4208b, "entry4",18,16, "forwarding vector for entry 132""", "" )
   RDW_DEF_FLD( 0x4208b, "entry5",22,20, "forwarding vector for entry 133""", "" )
   RDW_DEF_FLD( 0x4208b, "entry6",26,24, "forwarding vector for entry 134""", "" )
   RDW_DEF_FLD( 0x4208b, "entry7",30,28, "forwarding vector for entry 135""", "" )
   RDW_DEF("hi", 0x4408b, "red_hi2_fwd_vector16","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4408b, "entry0",2,0, "forwarding vector for entry 128""", "" )
   RDW_DEF_FLD( 0x4408b, "entry1",6,4, "forwarding vector for entry 129""", "" )
   RDW_DEF_FLD( 0x4408b, "entry2",10,8, "forwarding vector for entry 130""", "" )
   RDW_DEF_FLD( 0x4408b, "entry3",14,12, "forwarding vector for entry 131""", "" )
   RDW_DEF_FLD( 0x4408b, "entry4",18,16, "forwarding vector for entry 132""", "" )
   RDW_DEF_FLD( 0x4408b, "entry5",22,20, "forwarding vector for entry 133""", "" )
   RDW_DEF_FLD( 0x4408b, "entry6",26,24, "forwarding vector for entry 134""", "" )
   RDW_DEF_FLD( 0x4408b, "entry7",30,28, "forwarding vector for entry 135""", "" )
   RDW_DEF("hi", 0x4608b, "red_hi3_fwd_vector16","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4608b, "entry0",2,0, "forwarding vector for entry 128""", "" )
   RDW_DEF_FLD( 0x4608b, "entry1",6,4, "forwarding vector for entry 129""", "" )
   RDW_DEF_FLD( 0x4608b, "entry2",10,8, "forwarding vector for entry 130""", "" )
   RDW_DEF_FLD( 0x4608b, "entry3",14,12, "forwarding vector for entry 131""", "" )
   RDW_DEF_FLD( 0x4608b, "entry4",18,16, "forwarding vector for entry 132""", "" )
   RDW_DEF_FLD( 0x4608b, "entry5",22,20, "forwarding vector for entry 133""", "" )
   RDW_DEF_FLD( 0x4608b, "entry6",26,24, "forwarding vector for entry 134""", "" )
   RDW_DEF_FLD( 0x4608b, "entry7",30,28, "forwarding vector for entry 135""", "" )
   RDW_DEF("hi", 0x4808b, "red_hi4_fwd_vector16","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4808b, "entry0",2,0, "forwarding vector for entry 128""", "" )
   RDW_DEF_FLD( 0x4808b, "entry1",6,4, "forwarding vector for entry 129""", "" )
   RDW_DEF_FLD( 0x4808b, "entry2",10,8, "forwarding vector for entry 130""", "" )
   RDW_DEF_FLD( 0x4808b, "entry3",14,12, "forwarding vector for entry 131""", "" )
   RDW_DEF_FLD( 0x4808b, "entry4",18,16, "forwarding vector for entry 132""", "" )
   RDW_DEF_FLD( 0x4808b, "entry5",22,20, "forwarding vector for entry 133""", "" )
   RDW_DEF_FLD( 0x4808b, "entry6",26,24, "forwarding vector for entry 134""", "" )
   RDW_DEF_FLD( 0x4808b, "entry7",30,28, "forwarding vector for entry 135""", "" )
   RDW_DEF("hi", 0x4a08b, "red_hi5_fwd_vector16","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a08b, "entry0",2,0, "forwarding vector for entry 128""", "" )
   RDW_DEF_FLD( 0x4a08b, "entry1",6,4, "forwarding vector for entry 129""", "" )
   RDW_DEF_FLD( 0x4a08b, "entry2",10,8, "forwarding vector for entry 130""", "" )
   RDW_DEF_FLD( 0x4a08b, "entry3",14,12, "forwarding vector for entry 131""", "" )
   RDW_DEF_FLD( 0x4a08b, "entry4",18,16, "forwarding vector for entry 132""", "" )
   RDW_DEF_FLD( 0x4a08b, "entry5",22,20, "forwarding vector for entry 133""", "" )
   RDW_DEF_FLD( 0x4a08b, "entry6",26,24, "forwarding vector for entry 134""", "" )
   RDW_DEF_FLD( 0x4a08b, "entry7",30,28, "forwarding vector for entry 135""", "" )
   RDW_DEF("hi", 0x4c08b, "red_hi6_fwd_vector16","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c08b, "entry0",2,0, "forwarding vector for entry 128""", "" )
   RDW_DEF_FLD( 0x4c08b, "entry1",6,4, "forwarding vector for entry 129""", "" )
   RDW_DEF_FLD( 0x4c08b, "entry2",10,8, "forwarding vector for entry 130""", "" )
   RDW_DEF_FLD( 0x4c08b, "entry3",14,12, "forwarding vector for entry 131""", "" )
   RDW_DEF_FLD( 0x4c08b, "entry4",18,16, "forwarding vector for entry 132""", "" )
   RDW_DEF_FLD( 0x4c08b, "entry5",22,20, "forwarding vector for entry 133""", "" )
   RDW_DEF_FLD( 0x4c08b, "entry6",26,24, "forwarding vector for entry 134""", "" )
   RDW_DEF_FLD( 0x4c08b, "entry7",30,28, "forwarding vector for entry 135""", "" )
   RDW_DEF("hi", 0x4e08b, "red_hi7_fwd_vector16","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e08b, "entry0",2,0, "forwarding vector for entry 128""", "" )
   RDW_DEF_FLD( 0x4e08b, "entry1",6,4, "forwarding vector for entry 129""", "" )
   RDW_DEF_FLD( 0x4e08b, "entry2",10,8, "forwarding vector for entry 130""", "" )
   RDW_DEF_FLD( 0x4e08b, "entry3",14,12, "forwarding vector for entry 131""", "" )
   RDW_DEF_FLD( 0x4e08b, "entry4",18,16, "forwarding vector for entry 132""", "" )
   RDW_DEF_FLD( 0x4e08b, "entry5",22,20, "forwarding vector for entry 133""", "" )
   RDW_DEF_FLD( 0x4e08b, "entry6",26,24, "forwarding vector for entry 134""", "" )
   RDW_DEF_FLD( 0x4e08b, "entry7",30,28, "forwarding vector for entry 135""", "" )


   RDW_DEF("hi", 0x4008c, "red_hi0_fwd_vector17","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4008c, "entry0",2,0, "forwarding vector for entry 136""", "" )
   RDW_DEF_FLD( 0x4008c, "entry1",6,4, "forwarding vector for entry 137""", "" )
   RDW_DEF_FLD( 0x4008c, "entry2",10,8, "forwarding vector for entry 138""", "" )
   RDW_DEF_FLD( 0x4008c, "entry3",14,12, "forwarding vector for entry 139""", "" )
   RDW_DEF_FLD( 0x4008c, "entry4",18,16, "forwarding vector for entry 140""", "" )
   RDW_DEF_FLD( 0x4008c, "entry5",22,20, "forwarding vector for entry 141""", "" )
   RDW_DEF_FLD( 0x4008c, "entry6",26,24, "forwarding vector for entry 142""", "" )
   RDW_DEF_FLD( 0x4008c, "entry7",30,28, "forwarding vector for entry 143""", "" )
   RDW_DEF("hi", 0x4208c, "red_hi1_fwd_vector17","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4208c, "entry0",2,0, "forwarding vector for entry 136""", "" )
   RDW_DEF_FLD( 0x4208c, "entry1",6,4, "forwarding vector for entry 137""", "" )
   RDW_DEF_FLD( 0x4208c, "entry2",10,8, "forwarding vector for entry 138""", "" )
   RDW_DEF_FLD( 0x4208c, "entry3",14,12, "forwarding vector for entry 139""", "" )
   RDW_DEF_FLD( 0x4208c, "entry4",18,16, "forwarding vector for entry 140""", "" )
   RDW_DEF_FLD( 0x4208c, "entry5",22,20, "forwarding vector for entry 141""", "" )
   RDW_DEF_FLD( 0x4208c, "entry6",26,24, "forwarding vector for entry 142""", "" )
   RDW_DEF_FLD( 0x4208c, "entry7",30,28, "forwarding vector for entry 143""", "" )
   RDW_DEF("hi", 0x4408c, "red_hi2_fwd_vector17","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4408c, "entry0",2,0, "forwarding vector for entry 136""", "" )
   RDW_DEF_FLD( 0x4408c, "entry1",6,4, "forwarding vector for entry 137""", "" )
   RDW_DEF_FLD( 0x4408c, "entry2",10,8, "forwarding vector for entry 138""", "" )
   RDW_DEF_FLD( 0x4408c, "entry3",14,12, "forwarding vector for entry 139""", "" )
   RDW_DEF_FLD( 0x4408c, "entry4",18,16, "forwarding vector for entry 140""", "" )
   RDW_DEF_FLD( 0x4408c, "entry5",22,20, "forwarding vector for entry 141""", "" )
   RDW_DEF_FLD( 0x4408c, "entry6",26,24, "forwarding vector for entry 142""", "" )
   RDW_DEF_FLD( 0x4408c, "entry7",30,28, "forwarding vector for entry 143""", "" )
   RDW_DEF("hi", 0x4608c, "red_hi3_fwd_vector17","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4608c, "entry0",2,0, "forwarding vector for entry 136""", "" )
   RDW_DEF_FLD( 0x4608c, "entry1",6,4, "forwarding vector for entry 137""", "" )
   RDW_DEF_FLD( 0x4608c, "entry2",10,8, "forwarding vector for entry 138""", "" )
   RDW_DEF_FLD( 0x4608c, "entry3",14,12, "forwarding vector for entry 139""", "" )
   RDW_DEF_FLD( 0x4608c, "entry4",18,16, "forwarding vector for entry 140""", "" )
   RDW_DEF_FLD( 0x4608c, "entry5",22,20, "forwarding vector for entry 141""", "" )
   RDW_DEF_FLD( 0x4608c, "entry6",26,24, "forwarding vector for entry 142""", "" )
   RDW_DEF_FLD( 0x4608c, "entry7",30,28, "forwarding vector for entry 143""", "" )
   RDW_DEF("hi", 0x4808c, "red_hi4_fwd_vector17","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4808c, "entry0",2,0, "forwarding vector for entry 136""", "" )
   RDW_DEF_FLD( 0x4808c, "entry1",6,4, "forwarding vector for entry 137""", "" )
   RDW_DEF_FLD( 0x4808c, "entry2",10,8, "forwarding vector for entry 138""", "" )
   RDW_DEF_FLD( 0x4808c, "entry3",14,12, "forwarding vector for entry 139""", "" )
   RDW_DEF_FLD( 0x4808c, "entry4",18,16, "forwarding vector for entry 140""", "" )
   RDW_DEF_FLD( 0x4808c, "entry5",22,20, "forwarding vector for entry 141""", "" )
   RDW_DEF_FLD( 0x4808c, "entry6",26,24, "forwarding vector for entry 142""", "" )
   RDW_DEF_FLD( 0x4808c, "entry7",30,28, "forwarding vector for entry 143""", "" )
   RDW_DEF("hi", 0x4a08c, "red_hi5_fwd_vector17","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a08c, "entry0",2,0, "forwarding vector for entry 136""", "" )
   RDW_DEF_FLD( 0x4a08c, "entry1",6,4, "forwarding vector for entry 137""", "" )
   RDW_DEF_FLD( 0x4a08c, "entry2",10,8, "forwarding vector for entry 138""", "" )
   RDW_DEF_FLD( 0x4a08c, "entry3",14,12, "forwarding vector for entry 139""", "" )
   RDW_DEF_FLD( 0x4a08c, "entry4",18,16, "forwarding vector for entry 140""", "" )
   RDW_DEF_FLD( 0x4a08c, "entry5",22,20, "forwarding vector for entry 141""", "" )
   RDW_DEF_FLD( 0x4a08c, "entry6",26,24, "forwarding vector for entry 142""", "" )
   RDW_DEF_FLD( 0x4a08c, "entry7",30,28, "forwarding vector for entry 143""", "" )
   RDW_DEF("hi", 0x4c08c, "red_hi6_fwd_vector17","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c08c, "entry0",2,0, "forwarding vector for entry 136""", "" )
   RDW_DEF_FLD( 0x4c08c, "entry1",6,4, "forwarding vector for entry 137""", "" )
   RDW_DEF_FLD( 0x4c08c, "entry2",10,8, "forwarding vector for entry 138""", "" )
   RDW_DEF_FLD( 0x4c08c, "entry3",14,12, "forwarding vector for entry 139""", "" )
   RDW_DEF_FLD( 0x4c08c, "entry4",18,16, "forwarding vector for entry 140""", "" )
   RDW_DEF_FLD( 0x4c08c, "entry5",22,20, "forwarding vector for entry 141""", "" )
   RDW_DEF_FLD( 0x4c08c, "entry6",26,24, "forwarding vector for entry 142""", "" )
   RDW_DEF_FLD( 0x4c08c, "entry7",30,28, "forwarding vector for entry 143""", "" )
   RDW_DEF("hi", 0x4e08c, "red_hi7_fwd_vector17","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e08c, "entry0",2,0, "forwarding vector for entry 136""", "" )
   RDW_DEF_FLD( 0x4e08c, "entry1",6,4, "forwarding vector for entry 137""", "" )
   RDW_DEF_FLD( 0x4e08c, "entry2",10,8, "forwarding vector for entry 138""", "" )
   RDW_DEF_FLD( 0x4e08c, "entry3",14,12, "forwarding vector for entry 139""", "" )
   RDW_DEF_FLD( 0x4e08c, "entry4",18,16, "forwarding vector for entry 140""", "" )
   RDW_DEF_FLD( 0x4e08c, "entry5",22,20, "forwarding vector for entry 141""", "" )
   RDW_DEF_FLD( 0x4e08c, "entry6",26,24, "forwarding vector for entry 142""", "" )
   RDW_DEF_FLD( 0x4e08c, "entry7",30,28, "forwarding vector for entry 143""", "" )


   RDW_DEF("hi", 0x4008d, "red_hi0_fwd_vector18","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4008d, "entry0",2,0, "forwarding vector for entry 144""", "" )
   RDW_DEF_FLD( 0x4008d, "entry1",6,4, "forwarding vector for entry 145""", "" )
   RDW_DEF_FLD( 0x4008d, "entry2",10,8, "forwarding vector for entry 146""", "" )
   RDW_DEF_FLD( 0x4008d, "entry3",14,12, "forwarding vector for entry 147""", "" )
   RDW_DEF_FLD( 0x4008d, "entry4",18,16, "forwarding vector for entry 148""", "" )
   RDW_DEF_FLD( 0x4008d, "entry5",22,20, "forwarding vector for entry 149""", "" )
   RDW_DEF_FLD( 0x4008d, "entry6",26,24, "forwarding vector for entry 150""", "" )
   RDW_DEF_FLD( 0x4008d, "entry7",30,28, "forwarding vector for entry 151""", "" )
   RDW_DEF("hi", 0x4208d, "red_hi1_fwd_vector18","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4208d, "entry0",2,0, "forwarding vector for entry 144""", "" )
   RDW_DEF_FLD( 0x4208d, "entry1",6,4, "forwarding vector for entry 145""", "" )
   RDW_DEF_FLD( 0x4208d, "entry2",10,8, "forwarding vector for entry 146""", "" )
   RDW_DEF_FLD( 0x4208d, "entry3",14,12, "forwarding vector for entry 147""", "" )
   RDW_DEF_FLD( 0x4208d, "entry4",18,16, "forwarding vector for entry 148""", "" )
   RDW_DEF_FLD( 0x4208d, "entry5",22,20, "forwarding vector for entry 149""", "" )
   RDW_DEF_FLD( 0x4208d, "entry6",26,24, "forwarding vector for entry 150""", "" )
   RDW_DEF_FLD( 0x4208d, "entry7",30,28, "forwarding vector for entry 151""", "" )
   RDW_DEF("hi", 0x4408d, "red_hi2_fwd_vector18","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4408d, "entry0",2,0, "forwarding vector for entry 144""", "" )
   RDW_DEF_FLD( 0x4408d, "entry1",6,4, "forwarding vector for entry 145""", "" )
   RDW_DEF_FLD( 0x4408d, "entry2",10,8, "forwarding vector for entry 146""", "" )
   RDW_DEF_FLD( 0x4408d, "entry3",14,12, "forwarding vector for entry 147""", "" )
   RDW_DEF_FLD( 0x4408d, "entry4",18,16, "forwarding vector for entry 148""", "" )
   RDW_DEF_FLD( 0x4408d, "entry5",22,20, "forwarding vector for entry 149""", "" )
   RDW_DEF_FLD( 0x4408d, "entry6",26,24, "forwarding vector for entry 150""", "" )
   RDW_DEF_FLD( 0x4408d, "entry7",30,28, "forwarding vector for entry 151""", "" )
   RDW_DEF("hi", 0x4608d, "red_hi3_fwd_vector18","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4608d, "entry0",2,0, "forwarding vector for entry 144""", "" )
   RDW_DEF_FLD( 0x4608d, "entry1",6,4, "forwarding vector for entry 145""", "" )
   RDW_DEF_FLD( 0x4608d, "entry2",10,8, "forwarding vector for entry 146""", "" )
   RDW_DEF_FLD( 0x4608d, "entry3",14,12, "forwarding vector for entry 147""", "" )
   RDW_DEF_FLD( 0x4608d, "entry4",18,16, "forwarding vector for entry 148""", "" )
   RDW_DEF_FLD( 0x4608d, "entry5",22,20, "forwarding vector for entry 149""", "" )
   RDW_DEF_FLD( 0x4608d, "entry6",26,24, "forwarding vector for entry 150""", "" )
   RDW_DEF_FLD( 0x4608d, "entry7",30,28, "forwarding vector for entry 151""", "" )
   RDW_DEF("hi", 0x4808d, "red_hi4_fwd_vector18","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4808d, "entry0",2,0, "forwarding vector for entry 144""", "" )
   RDW_DEF_FLD( 0x4808d, "entry1",6,4, "forwarding vector for entry 145""", "" )
   RDW_DEF_FLD( 0x4808d, "entry2",10,8, "forwarding vector for entry 146""", "" )
   RDW_DEF_FLD( 0x4808d, "entry3",14,12, "forwarding vector for entry 147""", "" )
   RDW_DEF_FLD( 0x4808d, "entry4",18,16, "forwarding vector for entry 148""", "" )
   RDW_DEF_FLD( 0x4808d, "entry5",22,20, "forwarding vector for entry 149""", "" )
   RDW_DEF_FLD( 0x4808d, "entry6",26,24, "forwarding vector for entry 150""", "" )
   RDW_DEF_FLD( 0x4808d, "entry7",30,28, "forwarding vector for entry 151""", "" )
   RDW_DEF("hi", 0x4a08d, "red_hi5_fwd_vector18","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a08d, "entry0",2,0, "forwarding vector for entry 144""", "" )
   RDW_DEF_FLD( 0x4a08d, "entry1",6,4, "forwarding vector for entry 145""", "" )
   RDW_DEF_FLD( 0x4a08d, "entry2",10,8, "forwarding vector for entry 146""", "" )
   RDW_DEF_FLD( 0x4a08d, "entry3",14,12, "forwarding vector for entry 147""", "" )
   RDW_DEF_FLD( 0x4a08d, "entry4",18,16, "forwarding vector for entry 148""", "" )
   RDW_DEF_FLD( 0x4a08d, "entry5",22,20, "forwarding vector for entry 149""", "" )
   RDW_DEF_FLD( 0x4a08d, "entry6",26,24, "forwarding vector for entry 150""", "" )
   RDW_DEF_FLD( 0x4a08d, "entry7",30,28, "forwarding vector for entry 151""", "" )
   RDW_DEF("hi", 0x4c08d, "red_hi6_fwd_vector18","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c08d, "entry0",2,0, "forwarding vector for entry 144""", "" )
   RDW_DEF_FLD( 0x4c08d, "entry1",6,4, "forwarding vector for entry 145""", "" )
   RDW_DEF_FLD( 0x4c08d, "entry2",10,8, "forwarding vector for entry 146""", "" )
   RDW_DEF_FLD( 0x4c08d, "entry3",14,12, "forwarding vector for entry 147""", "" )
   RDW_DEF_FLD( 0x4c08d, "entry4",18,16, "forwarding vector for entry 148""", "" )
   RDW_DEF_FLD( 0x4c08d, "entry5",22,20, "forwarding vector for entry 149""", "" )
   RDW_DEF_FLD( 0x4c08d, "entry6",26,24, "forwarding vector for entry 150""", "" )
   RDW_DEF_FLD( 0x4c08d, "entry7",30,28, "forwarding vector for entry 151""", "" )
   RDW_DEF("hi", 0x4e08d, "red_hi7_fwd_vector18","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e08d, "entry0",2,0, "forwarding vector for entry 144""", "" )
   RDW_DEF_FLD( 0x4e08d, "entry1",6,4, "forwarding vector for entry 145""", "" )
   RDW_DEF_FLD( 0x4e08d, "entry2",10,8, "forwarding vector for entry 146""", "" )
   RDW_DEF_FLD( 0x4e08d, "entry3",14,12, "forwarding vector for entry 147""", "" )
   RDW_DEF_FLD( 0x4e08d, "entry4",18,16, "forwarding vector for entry 148""", "" )
   RDW_DEF_FLD( 0x4e08d, "entry5",22,20, "forwarding vector for entry 149""", "" )
   RDW_DEF_FLD( 0x4e08d, "entry6",26,24, "forwarding vector for entry 150""", "" )
   RDW_DEF_FLD( 0x4e08d, "entry7",30,28, "forwarding vector for entry 151""", "" )


   RDW_DEF("hi", 0x4008e, "red_hi0_fwd_vector19","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4008e, "entry0",2,0, "forwarding vector for entry 152""", "" )
   RDW_DEF_FLD( 0x4008e, "entry1",6,4, "forwarding vector for entry 153""", "" )
   RDW_DEF_FLD( 0x4008e, "entry2",10,8, "forwarding vector for entry 154""", "" )
   RDW_DEF_FLD( 0x4008e, "entry3",14,12, "forwarding vector for entry 155""", "" )
   RDW_DEF_FLD( 0x4008e, "entry4",18,16, "forwarding vector for entry 156""", "" )
   RDW_DEF_FLD( 0x4008e, "entry5",22,20, "forwarding vector for entry 157""", "" )
   RDW_DEF_FLD( 0x4008e, "entry6",26,24, "forwarding vector for entry 158""", "" )
   RDW_DEF_FLD( 0x4008e, "entry7",30,28, "forwarding vector for entry 159""", "" )
   RDW_DEF("hi", 0x4208e, "red_hi1_fwd_vector19","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4208e, "entry0",2,0, "forwarding vector for entry 152""", "" )
   RDW_DEF_FLD( 0x4208e, "entry1",6,4, "forwarding vector for entry 153""", "" )
   RDW_DEF_FLD( 0x4208e, "entry2",10,8, "forwarding vector for entry 154""", "" )
   RDW_DEF_FLD( 0x4208e, "entry3",14,12, "forwarding vector for entry 155""", "" )
   RDW_DEF_FLD( 0x4208e, "entry4",18,16, "forwarding vector for entry 156""", "" )
   RDW_DEF_FLD( 0x4208e, "entry5",22,20, "forwarding vector for entry 157""", "" )
   RDW_DEF_FLD( 0x4208e, "entry6",26,24, "forwarding vector for entry 158""", "" )
   RDW_DEF_FLD( 0x4208e, "entry7",30,28, "forwarding vector for entry 159""", "" )
   RDW_DEF("hi", 0x4408e, "red_hi2_fwd_vector19","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4408e, "entry0",2,0, "forwarding vector for entry 152""", "" )
   RDW_DEF_FLD( 0x4408e, "entry1",6,4, "forwarding vector for entry 153""", "" )
   RDW_DEF_FLD( 0x4408e, "entry2",10,8, "forwarding vector for entry 154""", "" )
   RDW_DEF_FLD( 0x4408e, "entry3",14,12, "forwarding vector for entry 155""", "" )
   RDW_DEF_FLD( 0x4408e, "entry4",18,16, "forwarding vector for entry 156""", "" )
   RDW_DEF_FLD( 0x4408e, "entry5",22,20, "forwarding vector for entry 157""", "" )
   RDW_DEF_FLD( 0x4408e, "entry6",26,24, "forwarding vector for entry 158""", "" )
   RDW_DEF_FLD( 0x4408e, "entry7",30,28, "forwarding vector for entry 159""", "" )
   RDW_DEF("hi", 0x4608e, "red_hi3_fwd_vector19","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4608e, "entry0",2,0, "forwarding vector for entry 152""", "" )
   RDW_DEF_FLD( 0x4608e, "entry1",6,4, "forwarding vector for entry 153""", "" )
   RDW_DEF_FLD( 0x4608e, "entry2",10,8, "forwarding vector for entry 154""", "" )
   RDW_DEF_FLD( 0x4608e, "entry3",14,12, "forwarding vector for entry 155""", "" )
   RDW_DEF_FLD( 0x4608e, "entry4",18,16, "forwarding vector for entry 156""", "" )
   RDW_DEF_FLD( 0x4608e, "entry5",22,20, "forwarding vector for entry 157""", "" )
   RDW_DEF_FLD( 0x4608e, "entry6",26,24, "forwarding vector for entry 158""", "" )
   RDW_DEF_FLD( 0x4608e, "entry7",30,28, "forwarding vector for entry 159""", "" )
   RDW_DEF("hi", 0x4808e, "red_hi4_fwd_vector19","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4808e, "entry0",2,0, "forwarding vector for entry 152""", "" )
   RDW_DEF_FLD( 0x4808e, "entry1",6,4, "forwarding vector for entry 153""", "" )
   RDW_DEF_FLD( 0x4808e, "entry2",10,8, "forwarding vector for entry 154""", "" )
   RDW_DEF_FLD( 0x4808e, "entry3",14,12, "forwarding vector for entry 155""", "" )
   RDW_DEF_FLD( 0x4808e, "entry4",18,16, "forwarding vector for entry 156""", "" )
   RDW_DEF_FLD( 0x4808e, "entry5",22,20, "forwarding vector for entry 157""", "" )
   RDW_DEF_FLD( 0x4808e, "entry6",26,24, "forwarding vector for entry 158""", "" )
   RDW_DEF_FLD( 0x4808e, "entry7",30,28, "forwarding vector for entry 159""", "" )
   RDW_DEF("hi", 0x4a08e, "red_hi5_fwd_vector19","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a08e, "entry0",2,0, "forwarding vector for entry 152""", "" )
   RDW_DEF_FLD( 0x4a08e, "entry1",6,4, "forwarding vector for entry 153""", "" )
   RDW_DEF_FLD( 0x4a08e, "entry2",10,8, "forwarding vector for entry 154""", "" )
   RDW_DEF_FLD( 0x4a08e, "entry3",14,12, "forwarding vector for entry 155""", "" )
   RDW_DEF_FLD( 0x4a08e, "entry4",18,16, "forwarding vector for entry 156""", "" )
   RDW_DEF_FLD( 0x4a08e, "entry5",22,20, "forwarding vector for entry 157""", "" )
   RDW_DEF_FLD( 0x4a08e, "entry6",26,24, "forwarding vector for entry 158""", "" )
   RDW_DEF_FLD( 0x4a08e, "entry7",30,28, "forwarding vector for entry 159""", "" )
   RDW_DEF("hi", 0x4c08e, "red_hi6_fwd_vector19","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c08e, "entry0",2,0, "forwarding vector for entry 152""", "" )
   RDW_DEF_FLD( 0x4c08e, "entry1",6,4, "forwarding vector for entry 153""", "" )
   RDW_DEF_FLD( 0x4c08e, "entry2",10,8, "forwarding vector for entry 154""", "" )
   RDW_DEF_FLD( 0x4c08e, "entry3",14,12, "forwarding vector for entry 155""", "" )
   RDW_DEF_FLD( 0x4c08e, "entry4",18,16, "forwarding vector for entry 156""", "" )
   RDW_DEF_FLD( 0x4c08e, "entry5",22,20, "forwarding vector for entry 157""", "" )
   RDW_DEF_FLD( 0x4c08e, "entry6",26,24, "forwarding vector for entry 158""", "" )
   RDW_DEF_FLD( 0x4c08e, "entry7",30,28, "forwarding vector for entry 159""", "" )
   RDW_DEF("hi", 0x4e08e, "red_hi7_fwd_vector19","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e08e, "entry0",2,0, "forwarding vector for entry 152""", "" )
   RDW_DEF_FLD( 0x4e08e, "entry1",6,4, "forwarding vector for entry 153""", "" )
   RDW_DEF_FLD( 0x4e08e, "entry2",10,8, "forwarding vector for entry 154""", "" )
   RDW_DEF_FLD( 0x4e08e, "entry3",14,12, "forwarding vector for entry 155""", "" )
   RDW_DEF_FLD( 0x4e08e, "entry4",18,16, "forwarding vector for entry 156""", "" )
   RDW_DEF_FLD( 0x4e08e, "entry5",22,20, "forwarding vector for entry 157""", "" )
   RDW_DEF_FLD( 0x4e08e, "entry6",26,24, "forwarding vector for entry 158""", "" )
   RDW_DEF_FLD( 0x4e08e, "entry7",30,28, "forwarding vector for entry 159""", "" )


   RDW_DEF("hi", 0x4008f, "red_hi0_fwd_vector20","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4008f, "entry0",2,0, "forwarding vector for entry 160""", "" )
   RDW_DEF_FLD( 0x4008f, "entry1",6,4, "forwarding vector for entry 161""", "" )
   RDW_DEF_FLD( 0x4008f, "entry2",10,8, "forwarding vector for entry 162""", "" )
   RDW_DEF_FLD( 0x4008f, "entry3",14,12, "forwarding vector for entry 163""", "" )
   RDW_DEF_FLD( 0x4008f, "entry4",18,16, "forwarding vector for entry 164""", "" )
   RDW_DEF_FLD( 0x4008f, "entry5",22,20, "forwarding vector for entry 165""", "" )
   RDW_DEF_FLD( 0x4008f, "entry6",26,24, "forwarding vector for entry 166""", "" )
   RDW_DEF_FLD( 0x4008f, "entry7",30,28, "forwarding vector for entry 167""", "" )
   RDW_DEF("hi", 0x4208f, "red_hi1_fwd_vector20","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4208f, "entry0",2,0, "forwarding vector for entry 160""", "" )
   RDW_DEF_FLD( 0x4208f, "entry1",6,4, "forwarding vector for entry 161""", "" )
   RDW_DEF_FLD( 0x4208f, "entry2",10,8, "forwarding vector for entry 162""", "" )
   RDW_DEF_FLD( 0x4208f, "entry3",14,12, "forwarding vector for entry 163""", "" )
   RDW_DEF_FLD( 0x4208f, "entry4",18,16, "forwarding vector for entry 164""", "" )
   RDW_DEF_FLD( 0x4208f, "entry5",22,20, "forwarding vector for entry 165""", "" )
   RDW_DEF_FLD( 0x4208f, "entry6",26,24, "forwarding vector for entry 166""", "" )
   RDW_DEF_FLD( 0x4208f, "entry7",30,28, "forwarding vector for entry 167""", "" )
   RDW_DEF("hi", 0x4408f, "red_hi2_fwd_vector20","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4408f, "entry0",2,0, "forwarding vector for entry 160""", "" )
   RDW_DEF_FLD( 0x4408f, "entry1",6,4, "forwarding vector for entry 161""", "" )
   RDW_DEF_FLD( 0x4408f, "entry2",10,8, "forwarding vector for entry 162""", "" )
   RDW_DEF_FLD( 0x4408f, "entry3",14,12, "forwarding vector for entry 163""", "" )
   RDW_DEF_FLD( 0x4408f, "entry4",18,16, "forwarding vector for entry 164""", "" )
   RDW_DEF_FLD( 0x4408f, "entry5",22,20, "forwarding vector for entry 165""", "" )
   RDW_DEF_FLD( 0x4408f, "entry6",26,24, "forwarding vector for entry 166""", "" )
   RDW_DEF_FLD( 0x4408f, "entry7",30,28, "forwarding vector for entry 167""", "" )
   RDW_DEF("hi", 0x4608f, "red_hi3_fwd_vector20","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4608f, "entry0",2,0, "forwarding vector for entry 160""", "" )
   RDW_DEF_FLD( 0x4608f, "entry1",6,4, "forwarding vector for entry 161""", "" )
   RDW_DEF_FLD( 0x4608f, "entry2",10,8, "forwarding vector for entry 162""", "" )
   RDW_DEF_FLD( 0x4608f, "entry3",14,12, "forwarding vector for entry 163""", "" )
   RDW_DEF_FLD( 0x4608f, "entry4",18,16, "forwarding vector for entry 164""", "" )
   RDW_DEF_FLD( 0x4608f, "entry5",22,20, "forwarding vector for entry 165""", "" )
   RDW_DEF_FLD( 0x4608f, "entry6",26,24, "forwarding vector for entry 166""", "" )
   RDW_DEF_FLD( 0x4608f, "entry7",30,28, "forwarding vector for entry 167""", "" )
   RDW_DEF("hi", 0x4808f, "red_hi4_fwd_vector20","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4808f, "entry0",2,0, "forwarding vector for entry 160""", "" )
   RDW_DEF_FLD( 0x4808f, "entry1",6,4, "forwarding vector for entry 161""", "" )
   RDW_DEF_FLD( 0x4808f, "entry2",10,8, "forwarding vector for entry 162""", "" )
   RDW_DEF_FLD( 0x4808f, "entry3",14,12, "forwarding vector for entry 163""", "" )
   RDW_DEF_FLD( 0x4808f, "entry4",18,16, "forwarding vector for entry 164""", "" )
   RDW_DEF_FLD( 0x4808f, "entry5",22,20, "forwarding vector for entry 165""", "" )
   RDW_DEF_FLD( 0x4808f, "entry6",26,24, "forwarding vector for entry 166""", "" )
   RDW_DEF_FLD( 0x4808f, "entry7",30,28, "forwarding vector for entry 167""", "" )
   RDW_DEF("hi", 0x4a08f, "red_hi5_fwd_vector20","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a08f, "entry0",2,0, "forwarding vector for entry 160""", "" )
   RDW_DEF_FLD( 0x4a08f, "entry1",6,4, "forwarding vector for entry 161""", "" )
   RDW_DEF_FLD( 0x4a08f, "entry2",10,8, "forwarding vector for entry 162""", "" )
   RDW_DEF_FLD( 0x4a08f, "entry3",14,12, "forwarding vector for entry 163""", "" )
   RDW_DEF_FLD( 0x4a08f, "entry4",18,16, "forwarding vector for entry 164""", "" )
   RDW_DEF_FLD( 0x4a08f, "entry5",22,20, "forwarding vector for entry 165""", "" )
   RDW_DEF_FLD( 0x4a08f, "entry6",26,24, "forwarding vector for entry 166""", "" )
   RDW_DEF_FLD( 0x4a08f, "entry7",30,28, "forwarding vector for entry 167""", "" )
   RDW_DEF("hi", 0x4c08f, "red_hi6_fwd_vector20","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c08f, "entry0",2,0, "forwarding vector for entry 160""", "" )
   RDW_DEF_FLD( 0x4c08f, "entry1",6,4, "forwarding vector for entry 161""", "" )
   RDW_DEF_FLD( 0x4c08f, "entry2",10,8, "forwarding vector for entry 162""", "" )
   RDW_DEF_FLD( 0x4c08f, "entry3",14,12, "forwarding vector for entry 163""", "" )
   RDW_DEF_FLD( 0x4c08f, "entry4",18,16, "forwarding vector for entry 164""", "" )
   RDW_DEF_FLD( 0x4c08f, "entry5",22,20, "forwarding vector for entry 165""", "" )
   RDW_DEF_FLD( 0x4c08f, "entry6",26,24, "forwarding vector for entry 166""", "" )
   RDW_DEF_FLD( 0x4c08f, "entry7",30,28, "forwarding vector for entry 167""", "" )
   RDW_DEF("hi", 0x4e08f, "red_hi7_fwd_vector20","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e08f, "entry0",2,0, "forwarding vector for entry 160""", "" )
   RDW_DEF_FLD( 0x4e08f, "entry1",6,4, "forwarding vector for entry 161""", "" )
   RDW_DEF_FLD( 0x4e08f, "entry2",10,8, "forwarding vector for entry 162""", "" )
   RDW_DEF_FLD( 0x4e08f, "entry3",14,12, "forwarding vector for entry 163""", "" )
   RDW_DEF_FLD( 0x4e08f, "entry4",18,16, "forwarding vector for entry 164""", "" )
   RDW_DEF_FLD( 0x4e08f, "entry5",22,20, "forwarding vector for entry 165""", "" )
   RDW_DEF_FLD( 0x4e08f, "entry6",26,24, "forwarding vector for entry 166""", "" )
   RDW_DEF_FLD( 0x4e08f, "entry7",30,28, "forwarding vector for entry 167""", "" )


   RDW_DEF("hi", 0x40090, "red_hi0_fwd_vector21","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x40090, "entry0",2,0, "forwarding vector for entry 168""", "" )
   RDW_DEF_FLD( 0x40090, "entry1",6,4, "forwarding vector for entry 169""", "" )
   RDW_DEF_FLD( 0x40090, "entry2",10,8, "forwarding vector for entry 170""", "" )
   RDW_DEF_FLD( 0x40090, "entry3",14,12, "forwarding vector for entry 171""", "" )
   RDW_DEF_FLD( 0x40090, "entry4",18,16, "forwarding vector for entry 172""", "" )
   RDW_DEF_FLD( 0x40090, "entry5",22,20, "forwarding vector for entry 173""", "" )
   RDW_DEF_FLD( 0x40090, "entry6",26,24, "forwarding vector for entry 174""", "" )
   RDW_DEF_FLD( 0x40090, "entry7",30,28, "forwarding vector for entry 175""", "" )
   RDW_DEF("hi", 0x42090, "red_hi1_fwd_vector21","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x42090, "entry0",2,0, "forwarding vector for entry 168""", "" )
   RDW_DEF_FLD( 0x42090, "entry1",6,4, "forwarding vector for entry 169""", "" )
   RDW_DEF_FLD( 0x42090, "entry2",10,8, "forwarding vector for entry 170""", "" )
   RDW_DEF_FLD( 0x42090, "entry3",14,12, "forwarding vector for entry 171""", "" )
   RDW_DEF_FLD( 0x42090, "entry4",18,16, "forwarding vector for entry 172""", "" )
   RDW_DEF_FLD( 0x42090, "entry5",22,20, "forwarding vector for entry 173""", "" )
   RDW_DEF_FLD( 0x42090, "entry6",26,24, "forwarding vector for entry 174""", "" )
   RDW_DEF_FLD( 0x42090, "entry7",30,28, "forwarding vector for entry 175""", "" )
   RDW_DEF("hi", 0x44090, "red_hi2_fwd_vector21","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x44090, "entry0",2,0, "forwarding vector for entry 168""", "" )
   RDW_DEF_FLD( 0x44090, "entry1",6,4, "forwarding vector for entry 169""", "" )
   RDW_DEF_FLD( 0x44090, "entry2",10,8, "forwarding vector for entry 170""", "" )
   RDW_DEF_FLD( 0x44090, "entry3",14,12, "forwarding vector for entry 171""", "" )
   RDW_DEF_FLD( 0x44090, "entry4",18,16, "forwarding vector for entry 172""", "" )
   RDW_DEF_FLD( 0x44090, "entry5",22,20, "forwarding vector for entry 173""", "" )
   RDW_DEF_FLD( 0x44090, "entry6",26,24, "forwarding vector for entry 174""", "" )
   RDW_DEF_FLD( 0x44090, "entry7",30,28, "forwarding vector for entry 175""", "" )
   RDW_DEF("hi", 0x46090, "red_hi3_fwd_vector21","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x46090, "entry0",2,0, "forwarding vector for entry 168""", "" )
   RDW_DEF_FLD( 0x46090, "entry1",6,4, "forwarding vector for entry 169""", "" )
   RDW_DEF_FLD( 0x46090, "entry2",10,8, "forwarding vector for entry 170""", "" )
   RDW_DEF_FLD( 0x46090, "entry3",14,12, "forwarding vector for entry 171""", "" )
   RDW_DEF_FLD( 0x46090, "entry4",18,16, "forwarding vector for entry 172""", "" )
   RDW_DEF_FLD( 0x46090, "entry5",22,20, "forwarding vector for entry 173""", "" )
   RDW_DEF_FLD( 0x46090, "entry6",26,24, "forwarding vector for entry 174""", "" )
   RDW_DEF_FLD( 0x46090, "entry7",30,28, "forwarding vector for entry 175""", "" )
   RDW_DEF("hi", 0x48090, "red_hi4_fwd_vector21","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x48090, "entry0",2,0, "forwarding vector for entry 168""", "" )
   RDW_DEF_FLD( 0x48090, "entry1",6,4, "forwarding vector for entry 169""", "" )
   RDW_DEF_FLD( 0x48090, "entry2",10,8, "forwarding vector for entry 170""", "" )
   RDW_DEF_FLD( 0x48090, "entry3",14,12, "forwarding vector for entry 171""", "" )
   RDW_DEF_FLD( 0x48090, "entry4",18,16, "forwarding vector for entry 172""", "" )
   RDW_DEF_FLD( 0x48090, "entry5",22,20, "forwarding vector for entry 173""", "" )
   RDW_DEF_FLD( 0x48090, "entry6",26,24, "forwarding vector for entry 174""", "" )
   RDW_DEF_FLD( 0x48090, "entry7",30,28, "forwarding vector for entry 175""", "" )
   RDW_DEF("hi", 0x4a090, "red_hi5_fwd_vector21","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a090, "entry0",2,0, "forwarding vector for entry 168""", "" )
   RDW_DEF_FLD( 0x4a090, "entry1",6,4, "forwarding vector for entry 169""", "" )
   RDW_DEF_FLD( 0x4a090, "entry2",10,8, "forwarding vector for entry 170""", "" )
   RDW_DEF_FLD( 0x4a090, "entry3",14,12, "forwarding vector for entry 171""", "" )
   RDW_DEF_FLD( 0x4a090, "entry4",18,16, "forwarding vector for entry 172""", "" )
   RDW_DEF_FLD( 0x4a090, "entry5",22,20, "forwarding vector for entry 173""", "" )
   RDW_DEF_FLD( 0x4a090, "entry6",26,24, "forwarding vector for entry 174""", "" )
   RDW_DEF_FLD( 0x4a090, "entry7",30,28, "forwarding vector for entry 175""", "" )
   RDW_DEF("hi", 0x4c090, "red_hi6_fwd_vector21","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c090, "entry0",2,0, "forwarding vector for entry 168""", "" )
   RDW_DEF_FLD( 0x4c090, "entry1",6,4, "forwarding vector for entry 169""", "" )
   RDW_DEF_FLD( 0x4c090, "entry2",10,8, "forwarding vector for entry 170""", "" )
   RDW_DEF_FLD( 0x4c090, "entry3",14,12, "forwarding vector for entry 171""", "" )
   RDW_DEF_FLD( 0x4c090, "entry4",18,16, "forwarding vector for entry 172""", "" )
   RDW_DEF_FLD( 0x4c090, "entry5",22,20, "forwarding vector for entry 173""", "" )
   RDW_DEF_FLD( 0x4c090, "entry6",26,24, "forwarding vector for entry 174""", "" )
   RDW_DEF_FLD( 0x4c090, "entry7",30,28, "forwarding vector for entry 175""", "" )
   RDW_DEF("hi", 0x4e090, "red_hi7_fwd_vector21","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e090, "entry0",2,0, "forwarding vector for entry 168""", "" )
   RDW_DEF_FLD( 0x4e090, "entry1",6,4, "forwarding vector for entry 169""", "" )
   RDW_DEF_FLD( 0x4e090, "entry2",10,8, "forwarding vector for entry 170""", "" )
   RDW_DEF_FLD( 0x4e090, "entry3",14,12, "forwarding vector for entry 171""", "" )
   RDW_DEF_FLD( 0x4e090, "entry4",18,16, "forwarding vector for entry 172""", "" )
   RDW_DEF_FLD( 0x4e090, "entry5",22,20, "forwarding vector for entry 173""", "" )
   RDW_DEF_FLD( 0x4e090, "entry6",26,24, "forwarding vector for entry 174""", "" )
   RDW_DEF_FLD( 0x4e090, "entry7",30,28, "forwarding vector for entry 175""", "" )


   RDW_DEF("hi", 0x40091, "red_hi0_fwd_vector22","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x40091, "entry0",2,0, "forwarding vector for entry 176""", "" )
   RDW_DEF_FLD( 0x40091, "entry1",6,4, "forwarding vector for entry 177""", "" )
   RDW_DEF_FLD( 0x40091, "entry2",10,8, "forwarding vector for entry 178""", "" )
   RDW_DEF_FLD( 0x40091, "entry3",14,12, "forwarding vector for entry 179""", "" )
   RDW_DEF_FLD( 0x40091, "entry4",18,16, "forwarding vector for entry 180""", "" )
   RDW_DEF_FLD( 0x40091, "entry5",22,20, "forwarding vector for entry 181""", "" )
   RDW_DEF_FLD( 0x40091, "entry6",26,24, "forwarding vector for entry 182""", "" )
   RDW_DEF_FLD( 0x40091, "entry7",30,28, "forwarding vector for entry 183""", "" )
   RDW_DEF("hi", 0x42091, "red_hi1_fwd_vector22","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x42091, "entry0",2,0, "forwarding vector for entry 176""", "" )
   RDW_DEF_FLD( 0x42091, "entry1",6,4, "forwarding vector for entry 177""", "" )
   RDW_DEF_FLD( 0x42091, "entry2",10,8, "forwarding vector for entry 178""", "" )
   RDW_DEF_FLD( 0x42091, "entry3",14,12, "forwarding vector for entry 179""", "" )
   RDW_DEF_FLD( 0x42091, "entry4",18,16, "forwarding vector for entry 180""", "" )
   RDW_DEF_FLD( 0x42091, "entry5",22,20, "forwarding vector for entry 181""", "" )
   RDW_DEF_FLD( 0x42091, "entry6",26,24, "forwarding vector for entry 182""", "" )
   RDW_DEF_FLD( 0x42091, "entry7",30,28, "forwarding vector for entry 183""", "" )
   RDW_DEF("hi", 0x44091, "red_hi2_fwd_vector22","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x44091, "entry0",2,0, "forwarding vector for entry 176""", "" )
   RDW_DEF_FLD( 0x44091, "entry1",6,4, "forwarding vector for entry 177""", "" )
   RDW_DEF_FLD( 0x44091, "entry2",10,8, "forwarding vector for entry 178""", "" )
   RDW_DEF_FLD( 0x44091, "entry3",14,12, "forwarding vector for entry 179""", "" )
   RDW_DEF_FLD( 0x44091, "entry4",18,16, "forwarding vector for entry 180""", "" )
   RDW_DEF_FLD( 0x44091, "entry5",22,20, "forwarding vector for entry 181""", "" )
   RDW_DEF_FLD( 0x44091, "entry6",26,24, "forwarding vector for entry 182""", "" )
   RDW_DEF_FLD( 0x44091, "entry7",30,28, "forwarding vector for entry 183""", "" )
   RDW_DEF("hi", 0x46091, "red_hi3_fwd_vector22","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x46091, "entry0",2,0, "forwarding vector for entry 176""", "" )
   RDW_DEF_FLD( 0x46091, "entry1",6,4, "forwarding vector for entry 177""", "" )
   RDW_DEF_FLD( 0x46091, "entry2",10,8, "forwarding vector for entry 178""", "" )
   RDW_DEF_FLD( 0x46091, "entry3",14,12, "forwarding vector for entry 179""", "" )
   RDW_DEF_FLD( 0x46091, "entry4",18,16, "forwarding vector for entry 180""", "" )
   RDW_DEF_FLD( 0x46091, "entry5",22,20, "forwarding vector for entry 181""", "" )
   RDW_DEF_FLD( 0x46091, "entry6",26,24, "forwarding vector for entry 182""", "" )
   RDW_DEF_FLD( 0x46091, "entry7",30,28, "forwarding vector for entry 183""", "" )
   RDW_DEF("hi", 0x48091, "red_hi4_fwd_vector22","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x48091, "entry0",2,0, "forwarding vector for entry 176""", "" )
   RDW_DEF_FLD( 0x48091, "entry1",6,4, "forwarding vector for entry 177""", "" )
   RDW_DEF_FLD( 0x48091, "entry2",10,8, "forwarding vector for entry 178""", "" )
   RDW_DEF_FLD( 0x48091, "entry3",14,12, "forwarding vector for entry 179""", "" )
   RDW_DEF_FLD( 0x48091, "entry4",18,16, "forwarding vector for entry 180""", "" )
   RDW_DEF_FLD( 0x48091, "entry5",22,20, "forwarding vector for entry 181""", "" )
   RDW_DEF_FLD( 0x48091, "entry6",26,24, "forwarding vector for entry 182""", "" )
   RDW_DEF_FLD( 0x48091, "entry7",30,28, "forwarding vector for entry 183""", "" )
   RDW_DEF("hi", 0x4a091, "red_hi5_fwd_vector22","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a091, "entry0",2,0, "forwarding vector for entry 176""", "" )
   RDW_DEF_FLD( 0x4a091, "entry1",6,4, "forwarding vector for entry 177""", "" )
   RDW_DEF_FLD( 0x4a091, "entry2",10,8, "forwarding vector for entry 178""", "" )
   RDW_DEF_FLD( 0x4a091, "entry3",14,12, "forwarding vector for entry 179""", "" )
   RDW_DEF_FLD( 0x4a091, "entry4",18,16, "forwarding vector for entry 180""", "" )
   RDW_DEF_FLD( 0x4a091, "entry5",22,20, "forwarding vector for entry 181""", "" )
   RDW_DEF_FLD( 0x4a091, "entry6",26,24, "forwarding vector for entry 182""", "" )
   RDW_DEF_FLD( 0x4a091, "entry7",30,28, "forwarding vector for entry 183""", "" )
   RDW_DEF("hi", 0x4c091, "red_hi6_fwd_vector22","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c091, "entry0",2,0, "forwarding vector for entry 176""", "" )
   RDW_DEF_FLD( 0x4c091, "entry1",6,4, "forwarding vector for entry 177""", "" )
   RDW_DEF_FLD( 0x4c091, "entry2",10,8, "forwarding vector for entry 178""", "" )
   RDW_DEF_FLD( 0x4c091, "entry3",14,12, "forwarding vector for entry 179""", "" )
   RDW_DEF_FLD( 0x4c091, "entry4",18,16, "forwarding vector for entry 180""", "" )
   RDW_DEF_FLD( 0x4c091, "entry5",22,20, "forwarding vector for entry 181""", "" )
   RDW_DEF_FLD( 0x4c091, "entry6",26,24, "forwarding vector for entry 182""", "" )
   RDW_DEF_FLD( 0x4c091, "entry7",30,28, "forwarding vector for entry 183""", "" )
   RDW_DEF("hi", 0x4e091, "red_hi7_fwd_vector22","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e091, "entry0",2,0, "forwarding vector for entry 176""", "" )
   RDW_DEF_FLD( 0x4e091, "entry1",6,4, "forwarding vector for entry 177""", "" )
   RDW_DEF_FLD( 0x4e091, "entry2",10,8, "forwarding vector for entry 178""", "" )
   RDW_DEF_FLD( 0x4e091, "entry3",14,12, "forwarding vector for entry 179""", "" )
   RDW_DEF_FLD( 0x4e091, "entry4",18,16, "forwarding vector for entry 180""", "" )
   RDW_DEF_FLD( 0x4e091, "entry5",22,20, "forwarding vector for entry 181""", "" )
   RDW_DEF_FLD( 0x4e091, "entry6",26,24, "forwarding vector for entry 182""", "" )
   RDW_DEF_FLD( 0x4e091, "entry7",30,28, "forwarding vector for entry 183""", "" )


   RDW_DEF("hi", 0x40092, "red_hi0_fwd_vector23","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x40092, "entry0",2,0, "forwarding vector for entry 184""", "" )
   RDW_DEF_FLD( 0x40092, "entry1",6,4, "forwarding vector for entry 185""", "" )
   RDW_DEF_FLD( 0x40092, "entry2",10,8, "forwarding vector for entry 186""", "" )
   RDW_DEF_FLD( 0x40092, "entry3",14,12, "forwarding vector for entry 187""", "" )
   RDW_DEF_FLD( 0x40092, "entry4",18,16, "forwarding vector for entry 188""", "" )
   RDW_DEF_FLD( 0x40092, "entry5",22,20, "forwarding vector for entry 189""", "" )
   RDW_DEF_FLD( 0x40092, "entry6",26,24, "forwarding vector for entry 190""", "" )
   RDW_DEF_FLD( 0x40092, "entry7",30,28, "forwarding vector for entry 191""", "" )
   RDW_DEF("hi", 0x42092, "red_hi1_fwd_vector23","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x42092, "entry0",2,0, "forwarding vector for entry 184""", "" )
   RDW_DEF_FLD( 0x42092, "entry1",6,4, "forwarding vector for entry 185""", "" )
   RDW_DEF_FLD( 0x42092, "entry2",10,8, "forwarding vector for entry 186""", "" )
   RDW_DEF_FLD( 0x42092, "entry3",14,12, "forwarding vector for entry 187""", "" )
   RDW_DEF_FLD( 0x42092, "entry4",18,16, "forwarding vector for entry 188""", "" )
   RDW_DEF_FLD( 0x42092, "entry5",22,20, "forwarding vector for entry 189""", "" )
   RDW_DEF_FLD( 0x42092, "entry6",26,24, "forwarding vector for entry 190""", "" )
   RDW_DEF_FLD( 0x42092, "entry7",30,28, "forwarding vector for entry 191""", "" )
   RDW_DEF("hi", 0x44092, "red_hi2_fwd_vector23","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x44092, "entry0",2,0, "forwarding vector for entry 184""", "" )
   RDW_DEF_FLD( 0x44092, "entry1",6,4, "forwarding vector for entry 185""", "" )
   RDW_DEF_FLD( 0x44092, "entry2",10,8, "forwarding vector for entry 186""", "" )
   RDW_DEF_FLD( 0x44092, "entry3",14,12, "forwarding vector for entry 187""", "" )
   RDW_DEF_FLD( 0x44092, "entry4",18,16, "forwarding vector for entry 188""", "" )
   RDW_DEF_FLD( 0x44092, "entry5",22,20, "forwarding vector for entry 189""", "" )
   RDW_DEF_FLD( 0x44092, "entry6",26,24, "forwarding vector for entry 190""", "" )
   RDW_DEF_FLD( 0x44092, "entry7",30,28, "forwarding vector for entry 191""", "" )
   RDW_DEF("hi", 0x46092, "red_hi3_fwd_vector23","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x46092, "entry0",2,0, "forwarding vector for entry 184""", "" )
   RDW_DEF_FLD( 0x46092, "entry1",6,4, "forwarding vector for entry 185""", "" )
   RDW_DEF_FLD( 0x46092, "entry2",10,8, "forwarding vector for entry 186""", "" )
   RDW_DEF_FLD( 0x46092, "entry3",14,12, "forwarding vector for entry 187""", "" )
   RDW_DEF_FLD( 0x46092, "entry4",18,16, "forwarding vector for entry 188""", "" )
   RDW_DEF_FLD( 0x46092, "entry5",22,20, "forwarding vector for entry 189""", "" )
   RDW_DEF_FLD( 0x46092, "entry6",26,24, "forwarding vector for entry 190""", "" )
   RDW_DEF_FLD( 0x46092, "entry7",30,28, "forwarding vector for entry 191""", "" )
   RDW_DEF("hi", 0x48092, "red_hi4_fwd_vector23","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x48092, "entry0",2,0, "forwarding vector for entry 184""", "" )
   RDW_DEF_FLD( 0x48092, "entry1",6,4, "forwarding vector for entry 185""", "" )
   RDW_DEF_FLD( 0x48092, "entry2",10,8, "forwarding vector for entry 186""", "" )
   RDW_DEF_FLD( 0x48092, "entry3",14,12, "forwarding vector for entry 187""", "" )
   RDW_DEF_FLD( 0x48092, "entry4",18,16, "forwarding vector for entry 188""", "" )
   RDW_DEF_FLD( 0x48092, "entry5",22,20, "forwarding vector for entry 189""", "" )
   RDW_DEF_FLD( 0x48092, "entry6",26,24, "forwarding vector for entry 190""", "" )
   RDW_DEF_FLD( 0x48092, "entry7",30,28, "forwarding vector for entry 191""", "" )
   RDW_DEF("hi", 0x4a092, "red_hi5_fwd_vector23","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a092, "entry0",2,0, "forwarding vector for entry 184""", "" )
   RDW_DEF_FLD( 0x4a092, "entry1",6,4, "forwarding vector for entry 185""", "" )
   RDW_DEF_FLD( 0x4a092, "entry2",10,8, "forwarding vector for entry 186""", "" )
   RDW_DEF_FLD( 0x4a092, "entry3",14,12, "forwarding vector for entry 187""", "" )
   RDW_DEF_FLD( 0x4a092, "entry4",18,16, "forwarding vector for entry 188""", "" )
   RDW_DEF_FLD( 0x4a092, "entry5",22,20, "forwarding vector for entry 189""", "" )
   RDW_DEF_FLD( 0x4a092, "entry6",26,24, "forwarding vector for entry 190""", "" )
   RDW_DEF_FLD( 0x4a092, "entry7",30,28, "forwarding vector for entry 191""", "" )
   RDW_DEF("hi", 0x4c092, "red_hi6_fwd_vector23","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c092, "entry0",2,0, "forwarding vector for entry 184""", "" )
   RDW_DEF_FLD( 0x4c092, "entry1",6,4, "forwarding vector for entry 185""", "" )
   RDW_DEF_FLD( 0x4c092, "entry2",10,8, "forwarding vector for entry 186""", "" )
   RDW_DEF_FLD( 0x4c092, "entry3",14,12, "forwarding vector for entry 187""", "" )
   RDW_DEF_FLD( 0x4c092, "entry4",18,16, "forwarding vector for entry 188""", "" )
   RDW_DEF_FLD( 0x4c092, "entry5",22,20, "forwarding vector for entry 189""", "" )
   RDW_DEF_FLD( 0x4c092, "entry6",26,24, "forwarding vector for entry 190""", "" )
   RDW_DEF_FLD( 0x4c092, "entry7",30,28, "forwarding vector for entry 191""", "" )
   RDW_DEF("hi", 0x4e092, "red_hi7_fwd_vector23","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e092, "entry0",2,0, "forwarding vector for entry 184""", "" )
   RDW_DEF_FLD( 0x4e092, "entry1",6,4, "forwarding vector for entry 185""", "" )
   RDW_DEF_FLD( 0x4e092, "entry2",10,8, "forwarding vector for entry 186""", "" )
   RDW_DEF_FLD( 0x4e092, "entry3",14,12, "forwarding vector for entry 187""", "" )
   RDW_DEF_FLD( 0x4e092, "entry4",18,16, "forwarding vector for entry 188""", "" )
   RDW_DEF_FLD( 0x4e092, "entry5",22,20, "forwarding vector for entry 189""", "" )
   RDW_DEF_FLD( 0x4e092, "entry6",26,24, "forwarding vector for entry 190""", "" )
   RDW_DEF_FLD( 0x4e092, "entry7",30,28, "forwarding vector for entry 191""", "" )


   RDW_DEF("hi", 0x40093, "red_hi0_fwd_vector24","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x40093, "entry0",2,0, "forwarding vector for entry 192""", "" )
   RDW_DEF_FLD( 0x40093, "entry1",6,4, "forwarding vector for entry 193""", "" )
   RDW_DEF_FLD( 0x40093, "entry2",10,8, "forwarding vector for entry 194""", "" )
   RDW_DEF_FLD( 0x40093, "entry3",14,12, "forwarding vector for entry 195""", "" )
   RDW_DEF_FLD( 0x40093, "entry4",18,16, "forwarding vector for entry 196""", "" )
   RDW_DEF_FLD( 0x40093, "entry5",22,20, "forwarding vector for entry 197""", "" )
   RDW_DEF_FLD( 0x40093, "entry6",26,24, "forwarding vector for entry 198""", "" )
   RDW_DEF_FLD( 0x40093, "entry7",30,28, "forwarding vector for entry 199""", "" )
   RDW_DEF("hi", 0x42093, "red_hi1_fwd_vector24","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x42093, "entry0",2,0, "forwarding vector for entry 192""", "" )
   RDW_DEF_FLD( 0x42093, "entry1",6,4, "forwarding vector for entry 193""", "" )
   RDW_DEF_FLD( 0x42093, "entry2",10,8, "forwarding vector for entry 194""", "" )
   RDW_DEF_FLD( 0x42093, "entry3",14,12, "forwarding vector for entry 195""", "" )
   RDW_DEF_FLD( 0x42093, "entry4",18,16, "forwarding vector for entry 196""", "" )
   RDW_DEF_FLD( 0x42093, "entry5",22,20, "forwarding vector for entry 197""", "" )
   RDW_DEF_FLD( 0x42093, "entry6",26,24, "forwarding vector for entry 198""", "" )
   RDW_DEF_FLD( 0x42093, "entry7",30,28, "forwarding vector for entry 199""", "" )
   RDW_DEF("hi", 0x44093, "red_hi2_fwd_vector24","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x44093, "entry0",2,0, "forwarding vector for entry 192""", "" )
   RDW_DEF_FLD( 0x44093, "entry1",6,4, "forwarding vector for entry 193""", "" )
   RDW_DEF_FLD( 0x44093, "entry2",10,8, "forwarding vector for entry 194""", "" )
   RDW_DEF_FLD( 0x44093, "entry3",14,12, "forwarding vector for entry 195""", "" )
   RDW_DEF_FLD( 0x44093, "entry4",18,16, "forwarding vector for entry 196""", "" )
   RDW_DEF_FLD( 0x44093, "entry5",22,20, "forwarding vector for entry 197""", "" )
   RDW_DEF_FLD( 0x44093, "entry6",26,24, "forwarding vector for entry 198""", "" )
   RDW_DEF_FLD( 0x44093, "entry7",30,28, "forwarding vector for entry 199""", "" )
   RDW_DEF("hi", 0x46093, "red_hi3_fwd_vector24","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x46093, "entry0",2,0, "forwarding vector for entry 192""", "" )
   RDW_DEF_FLD( 0x46093, "entry1",6,4, "forwarding vector for entry 193""", "" )
   RDW_DEF_FLD( 0x46093, "entry2",10,8, "forwarding vector for entry 194""", "" )
   RDW_DEF_FLD( 0x46093, "entry3",14,12, "forwarding vector for entry 195""", "" )
   RDW_DEF_FLD( 0x46093, "entry4",18,16, "forwarding vector for entry 196""", "" )
   RDW_DEF_FLD( 0x46093, "entry5",22,20, "forwarding vector for entry 197""", "" )
   RDW_DEF_FLD( 0x46093, "entry6",26,24, "forwarding vector for entry 198""", "" )
   RDW_DEF_FLD( 0x46093, "entry7",30,28, "forwarding vector for entry 199""", "" )
   RDW_DEF("hi", 0x48093, "red_hi4_fwd_vector24","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x48093, "entry0",2,0, "forwarding vector for entry 192""", "" )
   RDW_DEF_FLD( 0x48093, "entry1",6,4, "forwarding vector for entry 193""", "" )
   RDW_DEF_FLD( 0x48093, "entry2",10,8, "forwarding vector for entry 194""", "" )
   RDW_DEF_FLD( 0x48093, "entry3",14,12, "forwarding vector for entry 195""", "" )
   RDW_DEF_FLD( 0x48093, "entry4",18,16, "forwarding vector for entry 196""", "" )
   RDW_DEF_FLD( 0x48093, "entry5",22,20, "forwarding vector for entry 197""", "" )
   RDW_DEF_FLD( 0x48093, "entry6",26,24, "forwarding vector for entry 198""", "" )
   RDW_DEF_FLD( 0x48093, "entry7",30,28, "forwarding vector for entry 199""", "" )
   RDW_DEF("hi", 0x4a093, "red_hi5_fwd_vector24","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a093, "entry0",2,0, "forwarding vector for entry 192""", "" )
   RDW_DEF_FLD( 0x4a093, "entry1",6,4, "forwarding vector for entry 193""", "" )
   RDW_DEF_FLD( 0x4a093, "entry2",10,8, "forwarding vector for entry 194""", "" )
   RDW_DEF_FLD( 0x4a093, "entry3",14,12, "forwarding vector for entry 195""", "" )
   RDW_DEF_FLD( 0x4a093, "entry4",18,16, "forwarding vector for entry 196""", "" )
   RDW_DEF_FLD( 0x4a093, "entry5",22,20, "forwarding vector for entry 197""", "" )
   RDW_DEF_FLD( 0x4a093, "entry6",26,24, "forwarding vector for entry 198""", "" )
   RDW_DEF_FLD( 0x4a093, "entry7",30,28, "forwarding vector for entry 199""", "" )
   RDW_DEF("hi", 0x4c093, "red_hi6_fwd_vector24","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c093, "entry0",2,0, "forwarding vector for entry 192""", "" )
   RDW_DEF_FLD( 0x4c093, "entry1",6,4, "forwarding vector for entry 193""", "" )
   RDW_DEF_FLD( 0x4c093, "entry2",10,8, "forwarding vector for entry 194""", "" )
   RDW_DEF_FLD( 0x4c093, "entry3",14,12, "forwarding vector for entry 195""", "" )
   RDW_DEF_FLD( 0x4c093, "entry4",18,16, "forwarding vector for entry 196""", "" )
   RDW_DEF_FLD( 0x4c093, "entry5",22,20, "forwarding vector for entry 197""", "" )
   RDW_DEF_FLD( 0x4c093, "entry6",26,24, "forwarding vector for entry 198""", "" )
   RDW_DEF_FLD( 0x4c093, "entry7",30,28, "forwarding vector for entry 199""", "" )
   RDW_DEF("hi", 0x4e093, "red_hi7_fwd_vector24","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e093, "entry0",2,0, "forwarding vector for entry 192""", "" )
   RDW_DEF_FLD( 0x4e093, "entry1",6,4, "forwarding vector for entry 193""", "" )
   RDW_DEF_FLD( 0x4e093, "entry2",10,8, "forwarding vector for entry 194""", "" )
   RDW_DEF_FLD( 0x4e093, "entry3",14,12, "forwarding vector for entry 195""", "" )
   RDW_DEF_FLD( 0x4e093, "entry4",18,16, "forwarding vector for entry 196""", "" )
   RDW_DEF_FLD( 0x4e093, "entry5",22,20, "forwarding vector for entry 197""", "" )
   RDW_DEF_FLD( 0x4e093, "entry6",26,24, "forwarding vector for entry 198""", "" )
   RDW_DEF_FLD( 0x4e093, "entry7",30,28, "forwarding vector for entry 199""", "" )


   RDW_DEF("hi", 0x40094, "red_hi0_fwd_vector25","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x40094, "entry0",2,0, "forwarding vector for entry 200""", "" )
   RDW_DEF_FLD( 0x40094, "entry1",6,4, "forwarding vector for entry 201""", "" )
   RDW_DEF_FLD( 0x40094, "entry2",10,8, "forwarding vector for entry 202""", "" )
   RDW_DEF_FLD( 0x40094, "entry3",14,12, "forwarding vector for entry 203""", "" )
   RDW_DEF_FLD( 0x40094, "entry4",18,16, "forwarding vector for entry 204""", "" )
   RDW_DEF_FLD( 0x40094, "entry5",22,20, "forwarding vector for entry 205""", "" )
   RDW_DEF_FLD( 0x40094, "entry6",26,24, "forwarding vector for entry 206""", "" )
   RDW_DEF_FLD( 0x40094, "entry7",30,28, "forwarding vector for entry 207""", "" )
   RDW_DEF("hi", 0x42094, "red_hi1_fwd_vector25","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x42094, "entry0",2,0, "forwarding vector for entry 200""", "" )
   RDW_DEF_FLD( 0x42094, "entry1",6,4, "forwarding vector for entry 201""", "" )
   RDW_DEF_FLD( 0x42094, "entry2",10,8, "forwarding vector for entry 202""", "" )
   RDW_DEF_FLD( 0x42094, "entry3",14,12, "forwarding vector for entry 203""", "" )
   RDW_DEF_FLD( 0x42094, "entry4",18,16, "forwarding vector for entry 204""", "" )
   RDW_DEF_FLD( 0x42094, "entry5",22,20, "forwarding vector for entry 205""", "" )
   RDW_DEF_FLD( 0x42094, "entry6",26,24, "forwarding vector for entry 206""", "" )
   RDW_DEF_FLD( 0x42094, "entry7",30,28, "forwarding vector for entry 207""", "" )
   RDW_DEF("hi", 0x44094, "red_hi2_fwd_vector25","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x44094, "entry0",2,0, "forwarding vector for entry 200""", "" )
   RDW_DEF_FLD( 0x44094, "entry1",6,4, "forwarding vector for entry 201""", "" )
   RDW_DEF_FLD( 0x44094, "entry2",10,8, "forwarding vector for entry 202""", "" )
   RDW_DEF_FLD( 0x44094, "entry3",14,12, "forwarding vector for entry 203""", "" )
   RDW_DEF_FLD( 0x44094, "entry4",18,16, "forwarding vector for entry 204""", "" )
   RDW_DEF_FLD( 0x44094, "entry5",22,20, "forwarding vector for entry 205""", "" )
   RDW_DEF_FLD( 0x44094, "entry6",26,24, "forwarding vector for entry 206""", "" )
   RDW_DEF_FLD( 0x44094, "entry7",30,28, "forwarding vector for entry 207""", "" )
   RDW_DEF("hi", 0x46094, "red_hi3_fwd_vector25","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x46094, "entry0",2,0, "forwarding vector for entry 200""", "" )
   RDW_DEF_FLD( 0x46094, "entry1",6,4, "forwarding vector for entry 201""", "" )
   RDW_DEF_FLD( 0x46094, "entry2",10,8, "forwarding vector for entry 202""", "" )
   RDW_DEF_FLD( 0x46094, "entry3",14,12, "forwarding vector for entry 203""", "" )
   RDW_DEF_FLD( 0x46094, "entry4",18,16, "forwarding vector for entry 204""", "" )
   RDW_DEF_FLD( 0x46094, "entry5",22,20, "forwarding vector for entry 205""", "" )
   RDW_DEF_FLD( 0x46094, "entry6",26,24, "forwarding vector for entry 206""", "" )
   RDW_DEF_FLD( 0x46094, "entry7",30,28, "forwarding vector for entry 207""", "" )
   RDW_DEF("hi", 0x48094, "red_hi4_fwd_vector25","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x48094, "entry0",2,0, "forwarding vector for entry 200""", "" )
   RDW_DEF_FLD( 0x48094, "entry1",6,4, "forwarding vector for entry 201""", "" )
   RDW_DEF_FLD( 0x48094, "entry2",10,8, "forwarding vector for entry 202""", "" )
   RDW_DEF_FLD( 0x48094, "entry3",14,12, "forwarding vector for entry 203""", "" )
   RDW_DEF_FLD( 0x48094, "entry4",18,16, "forwarding vector for entry 204""", "" )
   RDW_DEF_FLD( 0x48094, "entry5",22,20, "forwarding vector for entry 205""", "" )
   RDW_DEF_FLD( 0x48094, "entry6",26,24, "forwarding vector for entry 206""", "" )
   RDW_DEF_FLD( 0x48094, "entry7",30,28, "forwarding vector for entry 207""", "" )
   RDW_DEF("hi", 0x4a094, "red_hi5_fwd_vector25","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a094, "entry0",2,0, "forwarding vector for entry 200""", "" )
   RDW_DEF_FLD( 0x4a094, "entry1",6,4, "forwarding vector for entry 201""", "" )
   RDW_DEF_FLD( 0x4a094, "entry2",10,8, "forwarding vector for entry 202""", "" )
   RDW_DEF_FLD( 0x4a094, "entry3",14,12, "forwarding vector for entry 203""", "" )
   RDW_DEF_FLD( 0x4a094, "entry4",18,16, "forwarding vector for entry 204""", "" )
   RDW_DEF_FLD( 0x4a094, "entry5",22,20, "forwarding vector for entry 205""", "" )
   RDW_DEF_FLD( 0x4a094, "entry6",26,24, "forwarding vector for entry 206""", "" )
   RDW_DEF_FLD( 0x4a094, "entry7",30,28, "forwarding vector for entry 207""", "" )
   RDW_DEF("hi", 0x4c094, "red_hi6_fwd_vector25","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c094, "entry0",2,0, "forwarding vector for entry 200""", "" )
   RDW_DEF_FLD( 0x4c094, "entry1",6,4, "forwarding vector for entry 201""", "" )
   RDW_DEF_FLD( 0x4c094, "entry2",10,8, "forwarding vector for entry 202""", "" )
   RDW_DEF_FLD( 0x4c094, "entry3",14,12, "forwarding vector for entry 203""", "" )
   RDW_DEF_FLD( 0x4c094, "entry4",18,16, "forwarding vector for entry 204""", "" )
   RDW_DEF_FLD( 0x4c094, "entry5",22,20, "forwarding vector for entry 205""", "" )
   RDW_DEF_FLD( 0x4c094, "entry6",26,24, "forwarding vector for entry 206""", "" )
   RDW_DEF_FLD( 0x4c094, "entry7",30,28, "forwarding vector for entry 207""", "" )
   RDW_DEF("hi", 0x4e094, "red_hi7_fwd_vector25","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e094, "entry0",2,0, "forwarding vector for entry 200""", "" )
   RDW_DEF_FLD( 0x4e094, "entry1",6,4, "forwarding vector for entry 201""", "" )
   RDW_DEF_FLD( 0x4e094, "entry2",10,8, "forwarding vector for entry 202""", "" )
   RDW_DEF_FLD( 0x4e094, "entry3",14,12, "forwarding vector for entry 203""", "" )
   RDW_DEF_FLD( 0x4e094, "entry4",18,16, "forwarding vector for entry 204""", "" )
   RDW_DEF_FLD( 0x4e094, "entry5",22,20, "forwarding vector for entry 205""", "" )
   RDW_DEF_FLD( 0x4e094, "entry6",26,24, "forwarding vector for entry 206""", "" )
   RDW_DEF_FLD( 0x4e094, "entry7",30,28, "forwarding vector for entry 207""", "" )


   RDW_DEF("hi", 0x40095, "red_hi0_fwd_vector26","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x40095, "entry0",2,0, "forwarding vector for entry 208""", "" )
   RDW_DEF_FLD( 0x40095, "entry1",6,4, "forwarding vector for entry 209""", "" )
   RDW_DEF_FLD( 0x40095, "entry2",10,8, "forwarding vector for entry 210""", "" )
   RDW_DEF_FLD( 0x40095, "entry3",14,12, "forwarding vector for entry 211""", "" )
   RDW_DEF_FLD( 0x40095, "entry4",18,16, "forwarding vector for entry 212""", "" )
   RDW_DEF_FLD( 0x40095, "entry5",22,20, "forwarding vector for entry 213""", "" )
   RDW_DEF_FLD( 0x40095, "entry6",26,24, "forwarding vector for entry 214""", "" )
   RDW_DEF_FLD( 0x40095, "entry7",30,28, "forwarding vector for entry 215""", "" )
   RDW_DEF("hi", 0x42095, "red_hi1_fwd_vector26","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x42095, "entry0",2,0, "forwarding vector for entry 208""", "" )
   RDW_DEF_FLD( 0x42095, "entry1",6,4, "forwarding vector for entry 209""", "" )
   RDW_DEF_FLD( 0x42095, "entry2",10,8, "forwarding vector for entry 210""", "" )
   RDW_DEF_FLD( 0x42095, "entry3",14,12, "forwarding vector for entry 211""", "" )
   RDW_DEF_FLD( 0x42095, "entry4",18,16, "forwarding vector for entry 212""", "" )
   RDW_DEF_FLD( 0x42095, "entry5",22,20, "forwarding vector for entry 213""", "" )
   RDW_DEF_FLD( 0x42095, "entry6",26,24, "forwarding vector for entry 214""", "" )
   RDW_DEF_FLD( 0x42095, "entry7",30,28, "forwarding vector for entry 215""", "" )
   RDW_DEF("hi", 0x44095, "red_hi2_fwd_vector26","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x44095, "entry0",2,0, "forwarding vector for entry 208""", "" )
   RDW_DEF_FLD( 0x44095, "entry1",6,4, "forwarding vector for entry 209""", "" )
   RDW_DEF_FLD( 0x44095, "entry2",10,8, "forwarding vector for entry 210""", "" )
   RDW_DEF_FLD( 0x44095, "entry3",14,12, "forwarding vector for entry 211""", "" )
   RDW_DEF_FLD( 0x44095, "entry4",18,16, "forwarding vector for entry 212""", "" )
   RDW_DEF_FLD( 0x44095, "entry5",22,20, "forwarding vector for entry 213""", "" )
   RDW_DEF_FLD( 0x44095, "entry6",26,24, "forwarding vector for entry 214""", "" )
   RDW_DEF_FLD( 0x44095, "entry7",30,28, "forwarding vector for entry 215""", "" )
   RDW_DEF("hi", 0x46095, "red_hi3_fwd_vector26","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x46095, "entry0",2,0, "forwarding vector for entry 208""", "" )
   RDW_DEF_FLD( 0x46095, "entry1",6,4, "forwarding vector for entry 209""", "" )
   RDW_DEF_FLD( 0x46095, "entry2",10,8, "forwarding vector for entry 210""", "" )
   RDW_DEF_FLD( 0x46095, "entry3",14,12, "forwarding vector for entry 211""", "" )
   RDW_DEF_FLD( 0x46095, "entry4",18,16, "forwarding vector for entry 212""", "" )
   RDW_DEF_FLD( 0x46095, "entry5",22,20, "forwarding vector for entry 213""", "" )
   RDW_DEF_FLD( 0x46095, "entry6",26,24, "forwarding vector for entry 214""", "" )
   RDW_DEF_FLD( 0x46095, "entry7",30,28, "forwarding vector for entry 215""", "" )
   RDW_DEF("hi", 0x48095, "red_hi4_fwd_vector26","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x48095, "entry0",2,0, "forwarding vector for entry 208""", "" )
   RDW_DEF_FLD( 0x48095, "entry1",6,4, "forwarding vector for entry 209""", "" )
   RDW_DEF_FLD( 0x48095, "entry2",10,8, "forwarding vector for entry 210""", "" )
   RDW_DEF_FLD( 0x48095, "entry3",14,12, "forwarding vector for entry 211""", "" )
   RDW_DEF_FLD( 0x48095, "entry4",18,16, "forwarding vector for entry 212""", "" )
   RDW_DEF_FLD( 0x48095, "entry5",22,20, "forwarding vector for entry 213""", "" )
   RDW_DEF_FLD( 0x48095, "entry6",26,24, "forwarding vector for entry 214""", "" )
   RDW_DEF_FLD( 0x48095, "entry7",30,28, "forwarding vector for entry 215""", "" )
   RDW_DEF("hi", 0x4a095, "red_hi5_fwd_vector26","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a095, "entry0",2,0, "forwarding vector for entry 208""", "" )
   RDW_DEF_FLD( 0x4a095, "entry1",6,4, "forwarding vector for entry 209""", "" )
   RDW_DEF_FLD( 0x4a095, "entry2",10,8, "forwarding vector for entry 210""", "" )
   RDW_DEF_FLD( 0x4a095, "entry3",14,12, "forwarding vector for entry 211""", "" )
   RDW_DEF_FLD( 0x4a095, "entry4",18,16, "forwarding vector for entry 212""", "" )
   RDW_DEF_FLD( 0x4a095, "entry5",22,20, "forwarding vector for entry 213""", "" )
   RDW_DEF_FLD( 0x4a095, "entry6",26,24, "forwarding vector for entry 214""", "" )
   RDW_DEF_FLD( 0x4a095, "entry7",30,28, "forwarding vector for entry 215""", "" )
   RDW_DEF("hi", 0x4c095, "red_hi6_fwd_vector26","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c095, "entry0",2,0, "forwarding vector for entry 208""", "" )
   RDW_DEF_FLD( 0x4c095, "entry1",6,4, "forwarding vector for entry 209""", "" )
   RDW_DEF_FLD( 0x4c095, "entry2",10,8, "forwarding vector for entry 210""", "" )
   RDW_DEF_FLD( 0x4c095, "entry3",14,12, "forwarding vector for entry 211""", "" )
   RDW_DEF_FLD( 0x4c095, "entry4",18,16, "forwarding vector for entry 212""", "" )
   RDW_DEF_FLD( 0x4c095, "entry5",22,20, "forwarding vector for entry 213""", "" )
   RDW_DEF_FLD( 0x4c095, "entry6",26,24, "forwarding vector for entry 214""", "" )
   RDW_DEF_FLD( 0x4c095, "entry7",30,28, "forwarding vector for entry 215""", "" )
   RDW_DEF("hi", 0x4e095, "red_hi7_fwd_vector26","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e095, "entry0",2,0, "forwarding vector for entry 208""", "" )
   RDW_DEF_FLD( 0x4e095, "entry1",6,4, "forwarding vector for entry 209""", "" )
   RDW_DEF_FLD( 0x4e095, "entry2",10,8, "forwarding vector for entry 210""", "" )
   RDW_DEF_FLD( 0x4e095, "entry3",14,12, "forwarding vector for entry 211""", "" )
   RDW_DEF_FLD( 0x4e095, "entry4",18,16, "forwarding vector for entry 212""", "" )
   RDW_DEF_FLD( 0x4e095, "entry5",22,20, "forwarding vector for entry 213""", "" )
   RDW_DEF_FLD( 0x4e095, "entry6",26,24, "forwarding vector for entry 214""", "" )
   RDW_DEF_FLD( 0x4e095, "entry7",30,28, "forwarding vector for entry 215""", "" )


   RDW_DEF("hi", 0x40096, "red_hi0_fwd_vector27","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x40096, "entry0",2,0, "forwarding vector for entry 216""", "" )
   RDW_DEF_FLD( 0x40096, "entry1",6,4, "forwarding vector for entry 217""", "" )
   RDW_DEF_FLD( 0x40096, "entry2",10,8, "forwarding vector for entry 218""", "" )
   RDW_DEF_FLD( 0x40096, "entry3",14,12, "forwarding vector for entry 219""", "" )
   RDW_DEF_FLD( 0x40096, "entry4",18,16, "forwarding vector for entry 220""", "" )
   RDW_DEF_FLD( 0x40096, "entry5",22,20, "forwarding vector for entry 221""", "" )
   RDW_DEF_FLD( 0x40096, "entry6",26,24, "forwarding vector for entry 222""", "" )
   RDW_DEF_FLD( 0x40096, "entry7",30,28, "forwarding vector for entry 223""", "" )
   RDW_DEF("hi", 0x42096, "red_hi1_fwd_vector27","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x42096, "entry0",2,0, "forwarding vector for entry 216""", "" )
   RDW_DEF_FLD( 0x42096, "entry1",6,4, "forwarding vector for entry 217""", "" )
   RDW_DEF_FLD( 0x42096, "entry2",10,8, "forwarding vector for entry 218""", "" )
   RDW_DEF_FLD( 0x42096, "entry3",14,12, "forwarding vector for entry 219""", "" )
   RDW_DEF_FLD( 0x42096, "entry4",18,16, "forwarding vector for entry 220""", "" )
   RDW_DEF_FLD( 0x42096, "entry5",22,20, "forwarding vector for entry 221""", "" )
   RDW_DEF_FLD( 0x42096, "entry6",26,24, "forwarding vector for entry 222""", "" )
   RDW_DEF_FLD( 0x42096, "entry7",30,28, "forwarding vector for entry 223""", "" )
   RDW_DEF("hi", 0x44096, "red_hi2_fwd_vector27","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x44096, "entry0",2,0, "forwarding vector for entry 216""", "" )
   RDW_DEF_FLD( 0x44096, "entry1",6,4, "forwarding vector for entry 217""", "" )
   RDW_DEF_FLD( 0x44096, "entry2",10,8, "forwarding vector for entry 218""", "" )
   RDW_DEF_FLD( 0x44096, "entry3",14,12, "forwarding vector for entry 219""", "" )
   RDW_DEF_FLD( 0x44096, "entry4",18,16, "forwarding vector for entry 220""", "" )
   RDW_DEF_FLD( 0x44096, "entry5",22,20, "forwarding vector for entry 221""", "" )
   RDW_DEF_FLD( 0x44096, "entry6",26,24, "forwarding vector for entry 222""", "" )
   RDW_DEF_FLD( 0x44096, "entry7",30,28, "forwarding vector for entry 223""", "" )
   RDW_DEF("hi", 0x46096, "red_hi3_fwd_vector27","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x46096, "entry0",2,0, "forwarding vector for entry 216""", "" )
   RDW_DEF_FLD( 0x46096, "entry1",6,4, "forwarding vector for entry 217""", "" )
   RDW_DEF_FLD( 0x46096, "entry2",10,8, "forwarding vector for entry 218""", "" )
   RDW_DEF_FLD( 0x46096, "entry3",14,12, "forwarding vector for entry 219""", "" )
   RDW_DEF_FLD( 0x46096, "entry4",18,16, "forwarding vector for entry 220""", "" )
   RDW_DEF_FLD( 0x46096, "entry5",22,20, "forwarding vector for entry 221""", "" )
   RDW_DEF_FLD( 0x46096, "entry6",26,24, "forwarding vector for entry 222""", "" )
   RDW_DEF_FLD( 0x46096, "entry7",30,28, "forwarding vector for entry 223""", "" )
   RDW_DEF("hi", 0x48096, "red_hi4_fwd_vector27","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x48096, "entry0",2,0, "forwarding vector for entry 216""", "" )
   RDW_DEF_FLD( 0x48096, "entry1",6,4, "forwarding vector for entry 217""", "" )
   RDW_DEF_FLD( 0x48096, "entry2",10,8, "forwarding vector for entry 218""", "" )
   RDW_DEF_FLD( 0x48096, "entry3",14,12, "forwarding vector for entry 219""", "" )
   RDW_DEF_FLD( 0x48096, "entry4",18,16, "forwarding vector for entry 220""", "" )
   RDW_DEF_FLD( 0x48096, "entry5",22,20, "forwarding vector for entry 221""", "" )
   RDW_DEF_FLD( 0x48096, "entry6",26,24, "forwarding vector for entry 222""", "" )
   RDW_DEF_FLD( 0x48096, "entry7",30,28, "forwarding vector for entry 223""", "" )
   RDW_DEF("hi", 0x4a096, "red_hi5_fwd_vector27","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a096, "entry0",2,0, "forwarding vector for entry 216""", "" )
   RDW_DEF_FLD( 0x4a096, "entry1",6,4, "forwarding vector for entry 217""", "" )
   RDW_DEF_FLD( 0x4a096, "entry2",10,8, "forwarding vector for entry 218""", "" )
   RDW_DEF_FLD( 0x4a096, "entry3",14,12, "forwarding vector for entry 219""", "" )
   RDW_DEF_FLD( 0x4a096, "entry4",18,16, "forwarding vector for entry 220""", "" )
   RDW_DEF_FLD( 0x4a096, "entry5",22,20, "forwarding vector for entry 221""", "" )
   RDW_DEF_FLD( 0x4a096, "entry6",26,24, "forwarding vector for entry 222""", "" )
   RDW_DEF_FLD( 0x4a096, "entry7",30,28, "forwarding vector for entry 223""", "" )
   RDW_DEF("hi", 0x4c096, "red_hi6_fwd_vector27","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c096, "entry0",2,0, "forwarding vector for entry 216""", "" )
   RDW_DEF_FLD( 0x4c096, "entry1",6,4, "forwarding vector for entry 217""", "" )
   RDW_DEF_FLD( 0x4c096, "entry2",10,8, "forwarding vector for entry 218""", "" )
   RDW_DEF_FLD( 0x4c096, "entry3",14,12, "forwarding vector for entry 219""", "" )
   RDW_DEF_FLD( 0x4c096, "entry4",18,16, "forwarding vector for entry 220""", "" )
   RDW_DEF_FLD( 0x4c096, "entry5",22,20, "forwarding vector for entry 221""", "" )
   RDW_DEF_FLD( 0x4c096, "entry6",26,24, "forwarding vector for entry 222""", "" )
   RDW_DEF_FLD( 0x4c096, "entry7",30,28, "forwarding vector for entry 223""", "" )
   RDW_DEF("hi", 0x4e096, "red_hi7_fwd_vector27","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e096, "entry0",2,0, "forwarding vector for entry 216""", "" )
   RDW_DEF_FLD( 0x4e096, "entry1",6,4, "forwarding vector for entry 217""", "" )
   RDW_DEF_FLD( 0x4e096, "entry2",10,8, "forwarding vector for entry 218""", "" )
   RDW_DEF_FLD( 0x4e096, "entry3",14,12, "forwarding vector for entry 219""", "" )
   RDW_DEF_FLD( 0x4e096, "entry4",18,16, "forwarding vector for entry 220""", "" )
   RDW_DEF_FLD( 0x4e096, "entry5",22,20, "forwarding vector for entry 221""", "" )
   RDW_DEF_FLD( 0x4e096, "entry6",26,24, "forwarding vector for entry 222""", "" )
   RDW_DEF_FLD( 0x4e096, "entry7",30,28, "forwarding vector for entry 223""", "" )


   RDW_DEF("hi", 0x40097, "red_hi0_fwd_vector28","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x40097, "entry0",2,0, "forwarding vector for entry 224""", "" )
   RDW_DEF_FLD( 0x40097, "entry1",6,4, "forwarding vector for entry 225""", "" )
   RDW_DEF_FLD( 0x40097, "entry2",10,8, "forwarding vector for entry 226""", "" )
   RDW_DEF_FLD( 0x40097, "entry3",14,12, "forwarding vector for entry 227""", "" )
   RDW_DEF_FLD( 0x40097, "entry4",18,16, "forwarding vector for entry 228""", "" )
   RDW_DEF_FLD( 0x40097, "entry5",22,20, "forwarding vector for entry 229""", "" )
   RDW_DEF_FLD( 0x40097, "entry6",26,24, "forwarding vector for entry 230""", "" )
   RDW_DEF_FLD( 0x40097, "entry7",30,28, "forwarding vector for entry 231""", "" )
   RDW_DEF("hi", 0x42097, "red_hi1_fwd_vector28","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x42097, "entry0",2,0, "forwarding vector for entry 224""", "" )
   RDW_DEF_FLD( 0x42097, "entry1",6,4, "forwarding vector for entry 225""", "" )
   RDW_DEF_FLD( 0x42097, "entry2",10,8, "forwarding vector for entry 226""", "" )
   RDW_DEF_FLD( 0x42097, "entry3",14,12, "forwarding vector for entry 227""", "" )
   RDW_DEF_FLD( 0x42097, "entry4",18,16, "forwarding vector for entry 228""", "" )
   RDW_DEF_FLD( 0x42097, "entry5",22,20, "forwarding vector for entry 229""", "" )
   RDW_DEF_FLD( 0x42097, "entry6",26,24, "forwarding vector for entry 230""", "" )
   RDW_DEF_FLD( 0x42097, "entry7",30,28, "forwarding vector for entry 231""", "" )
   RDW_DEF("hi", 0x44097, "red_hi2_fwd_vector28","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x44097, "entry0",2,0, "forwarding vector for entry 224""", "" )
   RDW_DEF_FLD( 0x44097, "entry1",6,4, "forwarding vector for entry 225""", "" )
   RDW_DEF_FLD( 0x44097, "entry2",10,8, "forwarding vector for entry 226""", "" )
   RDW_DEF_FLD( 0x44097, "entry3",14,12, "forwarding vector for entry 227""", "" )
   RDW_DEF_FLD( 0x44097, "entry4",18,16, "forwarding vector for entry 228""", "" )
   RDW_DEF_FLD( 0x44097, "entry5",22,20, "forwarding vector for entry 229""", "" )
   RDW_DEF_FLD( 0x44097, "entry6",26,24, "forwarding vector for entry 230""", "" )
   RDW_DEF_FLD( 0x44097, "entry7",30,28, "forwarding vector for entry 231""", "" )
   RDW_DEF("hi", 0x46097, "red_hi3_fwd_vector28","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x46097, "entry0",2,0, "forwarding vector for entry 224""", "" )
   RDW_DEF_FLD( 0x46097, "entry1",6,4, "forwarding vector for entry 225""", "" )
   RDW_DEF_FLD( 0x46097, "entry2",10,8, "forwarding vector for entry 226""", "" )
   RDW_DEF_FLD( 0x46097, "entry3",14,12, "forwarding vector for entry 227""", "" )
   RDW_DEF_FLD( 0x46097, "entry4",18,16, "forwarding vector for entry 228""", "" )
   RDW_DEF_FLD( 0x46097, "entry5",22,20, "forwarding vector for entry 229""", "" )
   RDW_DEF_FLD( 0x46097, "entry6",26,24, "forwarding vector for entry 230""", "" )
   RDW_DEF_FLD( 0x46097, "entry7",30,28, "forwarding vector for entry 231""", "" )
   RDW_DEF("hi", 0x48097, "red_hi4_fwd_vector28","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x48097, "entry0",2,0, "forwarding vector for entry 224""", "" )
   RDW_DEF_FLD( 0x48097, "entry1",6,4, "forwarding vector for entry 225""", "" )
   RDW_DEF_FLD( 0x48097, "entry2",10,8, "forwarding vector for entry 226""", "" )
   RDW_DEF_FLD( 0x48097, "entry3",14,12, "forwarding vector for entry 227""", "" )
   RDW_DEF_FLD( 0x48097, "entry4",18,16, "forwarding vector for entry 228""", "" )
   RDW_DEF_FLD( 0x48097, "entry5",22,20, "forwarding vector for entry 229""", "" )
   RDW_DEF_FLD( 0x48097, "entry6",26,24, "forwarding vector for entry 230""", "" )
   RDW_DEF_FLD( 0x48097, "entry7",30,28, "forwarding vector for entry 231""", "" )
   RDW_DEF("hi", 0x4a097, "red_hi5_fwd_vector28","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a097, "entry0",2,0, "forwarding vector for entry 224""", "" )
   RDW_DEF_FLD( 0x4a097, "entry1",6,4, "forwarding vector for entry 225""", "" )
   RDW_DEF_FLD( 0x4a097, "entry2",10,8, "forwarding vector for entry 226""", "" )
   RDW_DEF_FLD( 0x4a097, "entry3",14,12, "forwarding vector for entry 227""", "" )
   RDW_DEF_FLD( 0x4a097, "entry4",18,16, "forwarding vector for entry 228""", "" )
   RDW_DEF_FLD( 0x4a097, "entry5",22,20, "forwarding vector for entry 229""", "" )
   RDW_DEF_FLD( 0x4a097, "entry6",26,24, "forwarding vector for entry 230""", "" )
   RDW_DEF_FLD( 0x4a097, "entry7",30,28, "forwarding vector for entry 231""", "" )
   RDW_DEF("hi", 0x4c097, "red_hi6_fwd_vector28","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c097, "entry0",2,0, "forwarding vector for entry 224""", "" )
   RDW_DEF_FLD( 0x4c097, "entry1",6,4, "forwarding vector for entry 225""", "" )
   RDW_DEF_FLD( 0x4c097, "entry2",10,8, "forwarding vector for entry 226""", "" )
   RDW_DEF_FLD( 0x4c097, "entry3",14,12, "forwarding vector for entry 227""", "" )
   RDW_DEF_FLD( 0x4c097, "entry4",18,16, "forwarding vector for entry 228""", "" )
   RDW_DEF_FLD( 0x4c097, "entry5",22,20, "forwarding vector for entry 229""", "" )
   RDW_DEF_FLD( 0x4c097, "entry6",26,24, "forwarding vector for entry 230""", "" )
   RDW_DEF_FLD( 0x4c097, "entry7",30,28, "forwarding vector for entry 231""", "" )
   RDW_DEF("hi", 0x4e097, "red_hi7_fwd_vector28","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e097, "entry0",2,0, "forwarding vector for entry 224""", "" )
   RDW_DEF_FLD( 0x4e097, "entry1",6,4, "forwarding vector for entry 225""", "" )
   RDW_DEF_FLD( 0x4e097, "entry2",10,8, "forwarding vector for entry 226""", "" )
   RDW_DEF_FLD( 0x4e097, "entry3",14,12, "forwarding vector for entry 227""", "" )
   RDW_DEF_FLD( 0x4e097, "entry4",18,16, "forwarding vector for entry 228""", "" )
   RDW_DEF_FLD( 0x4e097, "entry5",22,20, "forwarding vector for entry 229""", "" )
   RDW_DEF_FLD( 0x4e097, "entry6",26,24, "forwarding vector for entry 230""", "" )
   RDW_DEF_FLD( 0x4e097, "entry7",30,28, "forwarding vector for entry 231""", "" )


   RDW_DEF("hi", 0x40098, "red_hi0_fwd_vector29","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x40098, "entry0",2,0, "forwarding vector for entry 232""", "" )
   RDW_DEF_FLD( 0x40098, "entry1",6,4, "forwarding vector for entry 233""", "" )
   RDW_DEF_FLD( 0x40098, "entry2",10,8, "forwarding vector for entry 234""", "" )
   RDW_DEF_FLD( 0x40098, "entry3",14,12, "forwarding vector for entry 235""", "" )
   RDW_DEF_FLD( 0x40098, "entry4",18,16, "forwarding vector for entry 236""", "" )
   RDW_DEF_FLD( 0x40098, "entry5",22,20, "forwarding vector for entry 237""", "" )
   RDW_DEF_FLD( 0x40098, "entry6",26,24, "forwarding vector for entry 238""", "" )
   RDW_DEF_FLD( 0x40098, "entry7",30,28, "forwarding vector for entry 239""", "" )
   RDW_DEF("hi", 0x42098, "red_hi1_fwd_vector29","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x42098, "entry0",2,0, "forwarding vector for entry 232""", "" )
   RDW_DEF_FLD( 0x42098, "entry1",6,4, "forwarding vector for entry 233""", "" )
   RDW_DEF_FLD( 0x42098, "entry2",10,8, "forwarding vector for entry 234""", "" )
   RDW_DEF_FLD( 0x42098, "entry3",14,12, "forwarding vector for entry 235""", "" )
   RDW_DEF_FLD( 0x42098, "entry4",18,16, "forwarding vector for entry 236""", "" )
   RDW_DEF_FLD( 0x42098, "entry5",22,20, "forwarding vector for entry 237""", "" )
   RDW_DEF_FLD( 0x42098, "entry6",26,24, "forwarding vector for entry 238""", "" )
   RDW_DEF_FLD( 0x42098, "entry7",30,28, "forwarding vector for entry 239""", "" )
   RDW_DEF("hi", 0x44098, "red_hi2_fwd_vector29","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x44098, "entry0",2,0, "forwarding vector for entry 232""", "" )
   RDW_DEF_FLD( 0x44098, "entry1",6,4, "forwarding vector for entry 233""", "" )
   RDW_DEF_FLD( 0x44098, "entry2",10,8, "forwarding vector for entry 234""", "" )
   RDW_DEF_FLD( 0x44098, "entry3",14,12, "forwarding vector for entry 235""", "" )
   RDW_DEF_FLD( 0x44098, "entry4",18,16, "forwarding vector for entry 236""", "" )
   RDW_DEF_FLD( 0x44098, "entry5",22,20, "forwarding vector for entry 237""", "" )
   RDW_DEF_FLD( 0x44098, "entry6",26,24, "forwarding vector for entry 238""", "" )
   RDW_DEF_FLD( 0x44098, "entry7",30,28, "forwarding vector for entry 239""", "" )
   RDW_DEF("hi", 0x46098, "red_hi3_fwd_vector29","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x46098, "entry0",2,0, "forwarding vector for entry 232""", "" )
   RDW_DEF_FLD( 0x46098, "entry1",6,4, "forwarding vector for entry 233""", "" )
   RDW_DEF_FLD( 0x46098, "entry2",10,8, "forwarding vector for entry 234""", "" )
   RDW_DEF_FLD( 0x46098, "entry3",14,12, "forwarding vector for entry 235""", "" )
   RDW_DEF_FLD( 0x46098, "entry4",18,16, "forwarding vector for entry 236""", "" )
   RDW_DEF_FLD( 0x46098, "entry5",22,20, "forwarding vector for entry 237""", "" )
   RDW_DEF_FLD( 0x46098, "entry6",26,24, "forwarding vector for entry 238""", "" )
   RDW_DEF_FLD( 0x46098, "entry7",30,28, "forwarding vector for entry 239""", "" )
   RDW_DEF("hi", 0x48098, "red_hi4_fwd_vector29","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x48098, "entry0",2,0, "forwarding vector for entry 232""", "" )
   RDW_DEF_FLD( 0x48098, "entry1",6,4, "forwarding vector for entry 233""", "" )
   RDW_DEF_FLD( 0x48098, "entry2",10,8, "forwarding vector for entry 234""", "" )
   RDW_DEF_FLD( 0x48098, "entry3",14,12, "forwarding vector for entry 235""", "" )
   RDW_DEF_FLD( 0x48098, "entry4",18,16, "forwarding vector for entry 236""", "" )
   RDW_DEF_FLD( 0x48098, "entry5",22,20, "forwarding vector for entry 237""", "" )
   RDW_DEF_FLD( 0x48098, "entry6",26,24, "forwarding vector for entry 238""", "" )
   RDW_DEF_FLD( 0x48098, "entry7",30,28, "forwarding vector for entry 239""", "" )
   RDW_DEF("hi", 0x4a098, "red_hi5_fwd_vector29","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a098, "entry0",2,0, "forwarding vector for entry 232""", "" )
   RDW_DEF_FLD( 0x4a098, "entry1",6,4, "forwarding vector for entry 233""", "" )
   RDW_DEF_FLD( 0x4a098, "entry2",10,8, "forwarding vector for entry 234""", "" )
   RDW_DEF_FLD( 0x4a098, "entry3",14,12, "forwarding vector for entry 235""", "" )
   RDW_DEF_FLD( 0x4a098, "entry4",18,16, "forwarding vector for entry 236""", "" )
   RDW_DEF_FLD( 0x4a098, "entry5",22,20, "forwarding vector for entry 237""", "" )
   RDW_DEF_FLD( 0x4a098, "entry6",26,24, "forwarding vector for entry 238""", "" )
   RDW_DEF_FLD( 0x4a098, "entry7",30,28, "forwarding vector for entry 239""", "" )
   RDW_DEF("hi", 0x4c098, "red_hi6_fwd_vector29","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c098, "entry0",2,0, "forwarding vector for entry 232""", "" )
   RDW_DEF_FLD( 0x4c098, "entry1",6,4, "forwarding vector for entry 233""", "" )
   RDW_DEF_FLD( 0x4c098, "entry2",10,8, "forwarding vector for entry 234""", "" )
   RDW_DEF_FLD( 0x4c098, "entry3",14,12, "forwarding vector for entry 235""", "" )
   RDW_DEF_FLD( 0x4c098, "entry4",18,16, "forwarding vector for entry 236""", "" )
   RDW_DEF_FLD( 0x4c098, "entry5",22,20, "forwarding vector for entry 237""", "" )
   RDW_DEF_FLD( 0x4c098, "entry6",26,24, "forwarding vector for entry 238""", "" )
   RDW_DEF_FLD( 0x4c098, "entry7",30,28, "forwarding vector for entry 239""", "" )
   RDW_DEF("hi", 0x4e098, "red_hi7_fwd_vector29","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e098, "entry0",2,0, "forwarding vector for entry 232""", "" )
   RDW_DEF_FLD( 0x4e098, "entry1",6,4, "forwarding vector for entry 233""", "" )
   RDW_DEF_FLD( 0x4e098, "entry2",10,8, "forwarding vector for entry 234""", "" )
   RDW_DEF_FLD( 0x4e098, "entry3",14,12, "forwarding vector for entry 235""", "" )
   RDW_DEF_FLD( 0x4e098, "entry4",18,16, "forwarding vector for entry 236""", "" )
   RDW_DEF_FLD( 0x4e098, "entry5",22,20, "forwarding vector for entry 237""", "" )
   RDW_DEF_FLD( 0x4e098, "entry6",26,24, "forwarding vector for entry 238""", "" )
   RDW_DEF_FLD( 0x4e098, "entry7",30,28, "forwarding vector for entry 239""", "" )


   RDW_DEF("hi", 0x40099, "red_hi0_fwd_vector30","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x40099, "entry0",2,0, "forwarding vector for entry 240""", "" )
   RDW_DEF_FLD( 0x40099, "entry1",6,4, "forwarding vector for entry 241""", "" )
   RDW_DEF_FLD( 0x40099, "entry2",10,8, "forwarding vector for entry 242""", "" )
   RDW_DEF_FLD( 0x40099, "entry3",14,12, "forwarding vector for entry 243""", "" )
   RDW_DEF_FLD( 0x40099, "entry4",18,16, "forwarding vector for entry 244""", "" )
   RDW_DEF_FLD( 0x40099, "entry5",22,20, "forwarding vector for entry 245""", "" )
   RDW_DEF_FLD( 0x40099, "entry6",26,24, "forwarding vector for entry 246""", "" )
   RDW_DEF_FLD( 0x40099, "entry7",30,28, "forwarding vector for entry 247""", "" )
   RDW_DEF("hi", 0x42099, "red_hi1_fwd_vector30","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x42099, "entry0",2,0, "forwarding vector for entry 240""", "" )
   RDW_DEF_FLD( 0x42099, "entry1",6,4, "forwarding vector for entry 241""", "" )
   RDW_DEF_FLD( 0x42099, "entry2",10,8, "forwarding vector for entry 242""", "" )
   RDW_DEF_FLD( 0x42099, "entry3",14,12, "forwarding vector for entry 243""", "" )
   RDW_DEF_FLD( 0x42099, "entry4",18,16, "forwarding vector for entry 244""", "" )
   RDW_DEF_FLD( 0x42099, "entry5",22,20, "forwarding vector for entry 245""", "" )
   RDW_DEF_FLD( 0x42099, "entry6",26,24, "forwarding vector for entry 246""", "" )
   RDW_DEF_FLD( 0x42099, "entry7",30,28, "forwarding vector for entry 247""", "" )
   RDW_DEF("hi", 0x44099, "red_hi2_fwd_vector30","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x44099, "entry0",2,0, "forwarding vector for entry 240""", "" )
   RDW_DEF_FLD( 0x44099, "entry1",6,4, "forwarding vector for entry 241""", "" )
   RDW_DEF_FLD( 0x44099, "entry2",10,8, "forwarding vector for entry 242""", "" )
   RDW_DEF_FLD( 0x44099, "entry3",14,12, "forwarding vector for entry 243""", "" )
   RDW_DEF_FLD( 0x44099, "entry4",18,16, "forwarding vector for entry 244""", "" )
   RDW_DEF_FLD( 0x44099, "entry5",22,20, "forwarding vector for entry 245""", "" )
   RDW_DEF_FLD( 0x44099, "entry6",26,24, "forwarding vector for entry 246""", "" )
   RDW_DEF_FLD( 0x44099, "entry7",30,28, "forwarding vector for entry 247""", "" )
   RDW_DEF("hi", 0x46099, "red_hi3_fwd_vector30","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x46099, "entry0",2,0, "forwarding vector for entry 240""", "" )
   RDW_DEF_FLD( 0x46099, "entry1",6,4, "forwarding vector for entry 241""", "" )
   RDW_DEF_FLD( 0x46099, "entry2",10,8, "forwarding vector for entry 242""", "" )
   RDW_DEF_FLD( 0x46099, "entry3",14,12, "forwarding vector for entry 243""", "" )
   RDW_DEF_FLD( 0x46099, "entry4",18,16, "forwarding vector for entry 244""", "" )
   RDW_DEF_FLD( 0x46099, "entry5",22,20, "forwarding vector for entry 245""", "" )
   RDW_DEF_FLD( 0x46099, "entry6",26,24, "forwarding vector for entry 246""", "" )
   RDW_DEF_FLD( 0x46099, "entry7",30,28, "forwarding vector for entry 247""", "" )
   RDW_DEF("hi", 0x48099, "red_hi4_fwd_vector30","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x48099, "entry0",2,0, "forwarding vector for entry 240""", "" )
   RDW_DEF_FLD( 0x48099, "entry1",6,4, "forwarding vector for entry 241""", "" )
   RDW_DEF_FLD( 0x48099, "entry2",10,8, "forwarding vector for entry 242""", "" )
   RDW_DEF_FLD( 0x48099, "entry3",14,12, "forwarding vector for entry 243""", "" )
   RDW_DEF_FLD( 0x48099, "entry4",18,16, "forwarding vector for entry 244""", "" )
   RDW_DEF_FLD( 0x48099, "entry5",22,20, "forwarding vector for entry 245""", "" )
   RDW_DEF_FLD( 0x48099, "entry6",26,24, "forwarding vector for entry 246""", "" )
   RDW_DEF_FLD( 0x48099, "entry7",30,28, "forwarding vector for entry 247""", "" )
   RDW_DEF("hi", 0x4a099, "red_hi5_fwd_vector30","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a099, "entry0",2,0, "forwarding vector for entry 240""", "" )
   RDW_DEF_FLD( 0x4a099, "entry1",6,4, "forwarding vector for entry 241""", "" )
   RDW_DEF_FLD( 0x4a099, "entry2",10,8, "forwarding vector for entry 242""", "" )
   RDW_DEF_FLD( 0x4a099, "entry3",14,12, "forwarding vector for entry 243""", "" )
   RDW_DEF_FLD( 0x4a099, "entry4",18,16, "forwarding vector for entry 244""", "" )
   RDW_DEF_FLD( 0x4a099, "entry5",22,20, "forwarding vector for entry 245""", "" )
   RDW_DEF_FLD( 0x4a099, "entry6",26,24, "forwarding vector for entry 246""", "" )
   RDW_DEF_FLD( 0x4a099, "entry7",30,28, "forwarding vector for entry 247""", "" )
   RDW_DEF("hi", 0x4c099, "red_hi6_fwd_vector30","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c099, "entry0",2,0, "forwarding vector for entry 240""", "" )
   RDW_DEF_FLD( 0x4c099, "entry1",6,4, "forwarding vector for entry 241""", "" )
   RDW_DEF_FLD( 0x4c099, "entry2",10,8, "forwarding vector for entry 242""", "" )
   RDW_DEF_FLD( 0x4c099, "entry3",14,12, "forwarding vector for entry 243""", "" )
   RDW_DEF_FLD( 0x4c099, "entry4",18,16, "forwarding vector for entry 244""", "" )
   RDW_DEF_FLD( 0x4c099, "entry5",22,20, "forwarding vector for entry 245""", "" )
   RDW_DEF_FLD( 0x4c099, "entry6",26,24, "forwarding vector for entry 246""", "" )
   RDW_DEF_FLD( 0x4c099, "entry7",30,28, "forwarding vector for entry 247""", "" )
   RDW_DEF("hi", 0x4e099, "red_hi7_fwd_vector30","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e099, "entry0",2,0, "forwarding vector for entry 240""", "" )
   RDW_DEF_FLD( 0x4e099, "entry1",6,4, "forwarding vector for entry 241""", "" )
   RDW_DEF_FLD( 0x4e099, "entry2",10,8, "forwarding vector for entry 242""", "" )
   RDW_DEF_FLD( 0x4e099, "entry3",14,12, "forwarding vector for entry 243""", "" )
   RDW_DEF_FLD( 0x4e099, "entry4",18,16, "forwarding vector for entry 244""", "" )
   RDW_DEF_FLD( 0x4e099, "entry5",22,20, "forwarding vector for entry 245""", "" )
   RDW_DEF_FLD( 0x4e099, "entry6",26,24, "forwarding vector for entry 246""", "" )
   RDW_DEF_FLD( 0x4e099, "entry7",30,28, "forwarding vector for entry 247""", "" )


   RDW_DEF("hi", 0x4009a, "red_hi0_fwd_vector31","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4009a, "entry0",2,0, "forwarding vector for entry 248""", "" )
   RDW_DEF_FLD( 0x4009a, "entry1",6,4, "forwarding vector for entry 249""", "" )
   RDW_DEF_FLD( 0x4009a, "entry2",10,8, "forwarding vector for entry 250""", "" )
   RDW_DEF_FLD( 0x4009a, "entry3",14,12, "forwarding vector for entry 251""", "" )
   RDW_DEF_FLD( 0x4009a, "entry4",18,16, "forwarding vector for entry 252""", "" )
   RDW_DEF_FLD( 0x4009a, "entry5",22,20, "forwarding vector for entry 253""", "" )
   RDW_DEF_FLD( 0x4009a, "entry6",26,24, "forwarding vector for entry 254""", "" )
   RDW_DEF_FLD( 0x4009a, "entry7",30,28, "forwarding vector for entry 255""", "" )
   RDW_DEF("hi", 0x4209a, "red_hi1_fwd_vector31","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4209a, "entry0",2,0, "forwarding vector for entry 248""", "" )
   RDW_DEF_FLD( 0x4209a, "entry1",6,4, "forwarding vector for entry 249""", "" )
   RDW_DEF_FLD( 0x4209a, "entry2",10,8, "forwarding vector for entry 250""", "" )
   RDW_DEF_FLD( 0x4209a, "entry3",14,12, "forwarding vector for entry 251""", "" )
   RDW_DEF_FLD( 0x4209a, "entry4",18,16, "forwarding vector for entry 252""", "" )
   RDW_DEF_FLD( 0x4209a, "entry5",22,20, "forwarding vector for entry 253""", "" )
   RDW_DEF_FLD( 0x4209a, "entry6",26,24, "forwarding vector for entry 254""", "" )
   RDW_DEF_FLD( 0x4209a, "entry7",30,28, "forwarding vector for entry 255""", "" )
   RDW_DEF("hi", 0x4409a, "red_hi2_fwd_vector31","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4409a, "entry0",2,0, "forwarding vector for entry 248""", "" )
   RDW_DEF_FLD( 0x4409a, "entry1",6,4, "forwarding vector for entry 249""", "" )
   RDW_DEF_FLD( 0x4409a, "entry2",10,8, "forwarding vector for entry 250""", "" )
   RDW_DEF_FLD( 0x4409a, "entry3",14,12, "forwarding vector for entry 251""", "" )
   RDW_DEF_FLD( 0x4409a, "entry4",18,16, "forwarding vector for entry 252""", "" )
   RDW_DEF_FLD( 0x4409a, "entry5",22,20, "forwarding vector for entry 253""", "" )
   RDW_DEF_FLD( 0x4409a, "entry6",26,24, "forwarding vector for entry 254""", "" )
   RDW_DEF_FLD( 0x4409a, "entry7",30,28, "forwarding vector for entry 255""", "" )
   RDW_DEF("hi", 0x4609a, "red_hi3_fwd_vector31","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4609a, "entry0",2,0, "forwarding vector for entry 248""", "" )
   RDW_DEF_FLD( 0x4609a, "entry1",6,4, "forwarding vector for entry 249""", "" )
   RDW_DEF_FLD( 0x4609a, "entry2",10,8, "forwarding vector for entry 250""", "" )
   RDW_DEF_FLD( 0x4609a, "entry3",14,12, "forwarding vector for entry 251""", "" )
   RDW_DEF_FLD( 0x4609a, "entry4",18,16, "forwarding vector for entry 252""", "" )
   RDW_DEF_FLD( 0x4609a, "entry5",22,20, "forwarding vector for entry 253""", "" )
   RDW_DEF_FLD( 0x4609a, "entry6",26,24, "forwarding vector for entry 254""", "" )
   RDW_DEF_FLD( 0x4609a, "entry7",30,28, "forwarding vector for entry 255""", "" )
   RDW_DEF("hi", 0x4809a, "red_hi4_fwd_vector31","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4809a, "entry0",2,0, "forwarding vector for entry 248""", "" )
   RDW_DEF_FLD( 0x4809a, "entry1",6,4, "forwarding vector for entry 249""", "" )
   RDW_DEF_FLD( 0x4809a, "entry2",10,8, "forwarding vector for entry 250""", "" )
   RDW_DEF_FLD( 0x4809a, "entry3",14,12, "forwarding vector for entry 251""", "" )
   RDW_DEF_FLD( 0x4809a, "entry4",18,16, "forwarding vector for entry 252""", "" )
   RDW_DEF_FLD( 0x4809a, "entry5",22,20, "forwarding vector for entry 253""", "" )
   RDW_DEF_FLD( 0x4809a, "entry6",26,24, "forwarding vector for entry 254""", "" )
   RDW_DEF_FLD( 0x4809a, "entry7",30,28, "forwarding vector for entry 255""", "" )
   RDW_DEF("hi", 0x4a09a, "red_hi5_fwd_vector31","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a09a, "entry0",2,0, "forwarding vector for entry 248""", "" )
   RDW_DEF_FLD( 0x4a09a, "entry1",6,4, "forwarding vector for entry 249""", "" )
   RDW_DEF_FLD( 0x4a09a, "entry2",10,8, "forwarding vector for entry 250""", "" )
   RDW_DEF_FLD( 0x4a09a, "entry3",14,12, "forwarding vector for entry 251""", "" )
   RDW_DEF_FLD( 0x4a09a, "entry4",18,16, "forwarding vector for entry 252""", "" )
   RDW_DEF_FLD( 0x4a09a, "entry5",22,20, "forwarding vector for entry 253""", "" )
   RDW_DEF_FLD( 0x4a09a, "entry6",26,24, "forwarding vector for entry 254""", "" )
   RDW_DEF_FLD( 0x4a09a, "entry7",30,28, "forwarding vector for entry 255""", "" )
   RDW_DEF("hi", 0x4c09a, "red_hi6_fwd_vector31","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c09a, "entry0",2,0, "forwarding vector for entry 248""", "" )
   RDW_DEF_FLD( 0x4c09a, "entry1",6,4, "forwarding vector for entry 249""", "" )
   RDW_DEF_FLD( 0x4c09a, "entry2",10,8, "forwarding vector for entry 250""", "" )
   RDW_DEF_FLD( 0x4c09a, "entry3",14,12, "forwarding vector for entry 251""", "" )
   RDW_DEF_FLD( 0x4c09a, "entry4",18,16, "forwarding vector for entry 252""", "" )
   RDW_DEF_FLD( 0x4c09a, "entry5",22,20, "forwarding vector for entry 253""", "" )
   RDW_DEF_FLD( 0x4c09a, "entry6",26,24, "forwarding vector for entry 254""", "" )
   RDW_DEF_FLD( 0x4c09a, "entry7",30,28, "forwarding vector for entry 255""", "" )
   RDW_DEF("hi", 0x4e09a, "red_hi7_fwd_vector31","7-drop, 6-etherchannel1, 5-etherchannel0, 4-CIF, 3-nif3, 2-nif2, 1-nif1, 0-nif0""", 0x77777777, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e09a, "entry0",2,0, "forwarding vector for entry 248""", "" )
   RDW_DEF_FLD( 0x4e09a, "entry1",6,4, "forwarding vector for entry 249""", "" )
   RDW_DEF_FLD( 0x4e09a, "entry2",10,8, "forwarding vector for entry 250""", "" )
   RDW_DEF_FLD( 0x4e09a, "entry3",14,12, "forwarding vector for entry 251""", "" )
   RDW_DEF_FLD( 0x4e09a, "entry4",18,16, "forwarding vector for entry 252""", "" )
   RDW_DEF_FLD( 0x4e09a, "entry5",22,20, "forwarding vector for entry 253""", "" )
   RDW_DEF_FLD( 0x4e09a, "entry6",26,24, "forwarding vector for entry 254""", "" )
   RDW_DEF_FLD( 0x4e09a, "entry7",30,28, "forwarding vector for entry 255""", "" )


   RDW_DEF("hi", 0x4009b, "red_hi0_intr","interrupt register""", 0x3fffff, 0x0, "int")
   RDW_DEF_FLD( 0x4009b, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4009b, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4009b, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x4009b, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x4009b, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4009b, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4009b, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x4009b, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x4009b, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x4009b, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x4009b, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4009b, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x4009b, "tx_crc_err",18,18, "transmit packet crc error""", "" )
   RDW_DEF_FLD( 0x4009b, "vif_out_of_range",19,19, "src vif is out of range""", "" )
   RDW_DEF_FLD( 0x4009b, "runt_pkt_drop",20,20, "received a runt pkt in the rx direction""", "" )
   RDW_DEF_FLD( 0x4009b, "tx_prsr_l2_err",21,21, "tx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("hi", 0x4209b, "red_hi1_intr","interrupt register""", 0x3fffff, 0x0, "int")
   RDW_DEF_FLD( 0x4209b, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4209b, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4209b, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x4209b, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x4209b, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4209b, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4209b, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x4209b, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x4209b, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x4209b, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x4209b, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4209b, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x4209b, "tx_crc_err",18,18, "transmit packet crc error""", "" )
   RDW_DEF_FLD( 0x4209b, "vif_out_of_range",19,19, "src vif is out of range""", "" )
   RDW_DEF_FLD( 0x4209b, "runt_pkt_drop",20,20, "received a runt pkt in the rx direction""", "" )
   RDW_DEF_FLD( 0x4209b, "tx_prsr_l2_err",21,21, "tx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("hi", 0x4409b, "red_hi2_intr","interrupt register""", 0x3fffff, 0x0, "int")
   RDW_DEF_FLD( 0x4409b, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4409b, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4409b, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x4409b, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x4409b, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4409b, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4409b, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x4409b, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x4409b, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x4409b, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x4409b, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4409b, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x4409b, "tx_crc_err",18,18, "transmit packet crc error""", "" )
   RDW_DEF_FLD( 0x4409b, "vif_out_of_range",19,19, "src vif is out of range""", "" )
   RDW_DEF_FLD( 0x4409b, "runt_pkt_drop",20,20, "received a runt pkt in the rx direction""", "" )
   RDW_DEF_FLD( 0x4409b, "tx_prsr_l2_err",21,21, "tx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("hi", 0x4609b, "red_hi3_intr","interrupt register""", 0x3fffff, 0x0, "int")
   RDW_DEF_FLD( 0x4609b, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4609b, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4609b, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x4609b, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x4609b, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4609b, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4609b, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x4609b, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x4609b, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x4609b, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x4609b, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4609b, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x4609b, "tx_crc_err",18,18, "transmit packet crc error""", "" )
   RDW_DEF_FLD( 0x4609b, "vif_out_of_range",19,19, "src vif is out of range""", "" )
   RDW_DEF_FLD( 0x4609b, "runt_pkt_drop",20,20, "received a runt pkt in the rx direction""", "" )
   RDW_DEF_FLD( 0x4609b, "tx_prsr_l2_err",21,21, "tx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("hi", 0x4809b, "red_hi4_intr","interrupt register""", 0x3fffff, 0x0, "int")
   RDW_DEF_FLD( 0x4809b, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4809b, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4809b, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x4809b, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x4809b, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4809b, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4809b, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x4809b, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x4809b, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x4809b, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x4809b, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4809b, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x4809b, "tx_crc_err",18,18, "transmit packet crc error""", "" )
   RDW_DEF_FLD( 0x4809b, "vif_out_of_range",19,19, "src vif is out of range""", "" )
   RDW_DEF_FLD( 0x4809b, "runt_pkt_drop",20,20, "received a runt pkt in the rx direction""", "" )
   RDW_DEF_FLD( 0x4809b, "tx_prsr_l2_err",21,21, "tx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("hi", 0x4a09b, "red_hi5_intr","interrupt register""", 0x3fffff, 0x0, "int")
   RDW_DEF_FLD( 0x4a09b, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4a09b, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4a09b, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x4a09b, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x4a09b, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4a09b, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4a09b, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x4a09b, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x4a09b, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x4a09b, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x4a09b, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4a09b, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x4a09b, "tx_crc_err",18,18, "transmit packet crc error""", "" )
   RDW_DEF_FLD( 0x4a09b, "vif_out_of_range",19,19, "src vif is out of range""", "" )
   RDW_DEF_FLD( 0x4a09b, "runt_pkt_drop",20,20, "received a runt pkt in the rx direction""", "" )
   RDW_DEF_FLD( 0x4a09b, "tx_prsr_l2_err",21,21, "tx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("hi", 0x4c09b, "red_hi6_intr","interrupt register""", 0x3fffff, 0x0, "int")
   RDW_DEF_FLD( 0x4c09b, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4c09b, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4c09b, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x4c09b, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x4c09b, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4c09b, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4c09b, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x4c09b, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x4c09b, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x4c09b, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x4c09b, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4c09b, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x4c09b, "tx_crc_err",18,18, "transmit packet crc error""", "" )
   RDW_DEF_FLD( 0x4c09b, "vif_out_of_range",19,19, "src vif is out of range""", "" )
   RDW_DEF_FLD( 0x4c09b, "runt_pkt_drop",20,20, "received a runt pkt in the rx direction""", "" )
   RDW_DEF_FLD( 0x4c09b, "tx_prsr_l2_err",21,21, "tx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("hi", 0x4e09b, "red_hi7_intr","interrupt register""", 0x3fffff, 0x0, "int")
   RDW_DEF_FLD( 0x4e09b, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4e09b, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4e09b, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x4e09b, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x4e09b, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4e09b, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4e09b, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x4e09b, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x4e09b, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x4e09b, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x4e09b, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4e09b, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x4e09b, "tx_crc_err",18,18, "transmit packet crc error""", "" )
   RDW_DEF_FLD( 0x4e09b, "vif_out_of_range",19,19, "src vif is out of range""", "" )
   RDW_DEF_FLD( 0x4e09b, "runt_pkt_drop",20,20, "received a runt pkt in the rx direction""", "" )
   RDW_DEF_FLD( 0x4e09b, "tx_prsr_l2_err",21,21, "tx parser asserted the info2_hdr_err""", "" )


   RDW_DEF("hi", 0x4009c, "red_hi0_intr_msk","interrupt register""", 0x3fffff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x4009c, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4009c, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4009c, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x4009c, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x4009c, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4009c, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4009c, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x4009c, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x4009c, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x4009c, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x4009c, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4009c, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x4009c, "tx_crc_err",18,18, "transmit packet crc error""", "" )
   RDW_DEF_FLD( 0x4009c, "vif_out_of_range",19,19, "src vif is out of range""", "" )
   RDW_DEF_FLD( 0x4009c, "runt_pkt_drop",20,20, "received a runt pkt in the rx direction""", "" )
   RDW_DEF_FLD( 0x4009c, "tx_prsr_l2_err",21,21, "tx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("hi", 0x4209c, "red_hi1_intr_msk","interrupt register""", 0x3fffff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x4209c, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4209c, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4209c, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x4209c, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x4209c, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4209c, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4209c, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x4209c, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x4209c, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x4209c, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x4209c, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4209c, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x4209c, "tx_crc_err",18,18, "transmit packet crc error""", "" )
   RDW_DEF_FLD( 0x4209c, "vif_out_of_range",19,19, "src vif is out of range""", "" )
   RDW_DEF_FLD( 0x4209c, "runt_pkt_drop",20,20, "received a runt pkt in the rx direction""", "" )
   RDW_DEF_FLD( 0x4209c, "tx_prsr_l2_err",21,21, "tx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("hi", 0x4409c, "red_hi2_intr_msk","interrupt register""", 0x3fffff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x4409c, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4409c, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4409c, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x4409c, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x4409c, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4409c, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4409c, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x4409c, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x4409c, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x4409c, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x4409c, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4409c, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x4409c, "tx_crc_err",18,18, "transmit packet crc error""", "" )
   RDW_DEF_FLD( 0x4409c, "vif_out_of_range",19,19, "src vif is out of range""", "" )
   RDW_DEF_FLD( 0x4409c, "runt_pkt_drop",20,20, "received a runt pkt in the rx direction""", "" )
   RDW_DEF_FLD( 0x4409c, "tx_prsr_l2_err",21,21, "tx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("hi", 0x4609c, "red_hi3_intr_msk","interrupt register""", 0x3fffff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x4609c, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4609c, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4609c, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x4609c, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x4609c, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4609c, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4609c, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x4609c, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x4609c, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x4609c, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x4609c, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4609c, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x4609c, "tx_crc_err",18,18, "transmit packet crc error""", "" )
   RDW_DEF_FLD( 0x4609c, "vif_out_of_range",19,19, "src vif is out of range""", "" )
   RDW_DEF_FLD( 0x4609c, "runt_pkt_drop",20,20, "received a runt pkt in the rx direction""", "" )
   RDW_DEF_FLD( 0x4609c, "tx_prsr_l2_err",21,21, "tx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("hi", 0x4809c, "red_hi4_intr_msk","interrupt register""", 0x3fffff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x4809c, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4809c, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4809c, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x4809c, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x4809c, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4809c, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4809c, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x4809c, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x4809c, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x4809c, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x4809c, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4809c, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x4809c, "tx_crc_err",18,18, "transmit packet crc error""", "" )
   RDW_DEF_FLD( 0x4809c, "vif_out_of_range",19,19, "src vif is out of range""", "" )
   RDW_DEF_FLD( 0x4809c, "runt_pkt_drop",20,20, "received a runt pkt in the rx direction""", "" )
   RDW_DEF_FLD( 0x4809c, "tx_prsr_l2_err",21,21, "tx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("hi", 0x4a09c, "red_hi5_intr_msk","interrupt register""", 0x3fffff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x4a09c, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4a09c, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4a09c, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x4a09c, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x4a09c, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4a09c, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4a09c, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x4a09c, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x4a09c, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x4a09c, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x4a09c, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4a09c, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x4a09c, "tx_crc_err",18,18, "transmit packet crc error""", "" )
   RDW_DEF_FLD( 0x4a09c, "vif_out_of_range",19,19, "src vif is out of range""", "" )
   RDW_DEF_FLD( 0x4a09c, "runt_pkt_drop",20,20, "received a runt pkt in the rx direction""", "" )
   RDW_DEF_FLD( 0x4a09c, "tx_prsr_l2_err",21,21, "tx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("hi", 0x4c09c, "red_hi6_intr_msk","interrupt register""", 0x3fffff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x4c09c, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4c09c, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4c09c, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x4c09c, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x4c09c, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4c09c, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4c09c, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x4c09c, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x4c09c, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x4c09c, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x4c09c, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4c09c, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x4c09c, "tx_crc_err",18,18, "transmit packet crc error""", "" )
   RDW_DEF_FLD( 0x4c09c, "vif_out_of_range",19,19, "src vif is out of range""", "" )
   RDW_DEF_FLD( 0x4c09c, "runt_pkt_drop",20,20, "received a runt pkt in the rx direction""", "" )
   RDW_DEF_FLD( 0x4c09c, "tx_prsr_l2_err",21,21, "tx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("hi", 0x4e09c, "red_hi7_intr_msk","interrupt register""", 0x3fffff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x4e09c, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4e09c, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4e09c, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x4e09c, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x4e09c, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4e09c, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4e09c, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x4e09c, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x4e09c, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x4e09c, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x4e09c, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4e09c, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x4e09c, "tx_crc_err",18,18, "transmit packet crc error""", "" )
   RDW_DEF_FLD( 0x4e09c, "vif_out_of_range",19,19, "src vif is out of range""", "" )
   RDW_DEF_FLD( 0x4e09c, "runt_pkt_drop",20,20, "received a runt pkt in the rx direction""", "" )
   RDW_DEF_FLD( 0x4e09c, "tx_prsr_l2_err",21,21, "tx parser asserted the info2_hdr_err""", "" )


   RDW_DEF("hi", 0x4009d, "red_hi0_intr_tst","interrupt register""", 0x3fffff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x4009d, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4009d, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4009d, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x4009d, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x4009d, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4009d, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4009d, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x4009d, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x4009d, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x4009d, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x4009d, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4009d, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x4009d, "tx_crc_err",18,18, "transmit packet crc error""", "" )
   RDW_DEF_FLD( 0x4009d, "vif_out_of_range",19,19, "src vif is out of range""", "" )
   RDW_DEF_FLD( 0x4009d, "runt_pkt_drop",20,20, "received a runt pkt in the rx direction""", "" )
   RDW_DEF_FLD( 0x4009d, "tx_prsr_l2_err",21,21, "tx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("hi", 0x4209d, "red_hi1_intr_tst","interrupt register""", 0x3fffff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x4209d, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4209d, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4209d, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x4209d, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x4209d, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4209d, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4209d, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x4209d, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x4209d, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x4209d, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x4209d, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4209d, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x4209d, "tx_crc_err",18,18, "transmit packet crc error""", "" )
   RDW_DEF_FLD( 0x4209d, "vif_out_of_range",19,19, "src vif is out of range""", "" )
   RDW_DEF_FLD( 0x4209d, "runt_pkt_drop",20,20, "received a runt pkt in the rx direction""", "" )
   RDW_DEF_FLD( 0x4209d, "tx_prsr_l2_err",21,21, "tx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("hi", 0x4409d, "red_hi2_intr_tst","interrupt register""", 0x3fffff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x4409d, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4409d, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4409d, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x4409d, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x4409d, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4409d, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4409d, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x4409d, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x4409d, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x4409d, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x4409d, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4409d, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x4409d, "tx_crc_err",18,18, "transmit packet crc error""", "" )
   RDW_DEF_FLD( 0x4409d, "vif_out_of_range",19,19, "src vif is out of range""", "" )
   RDW_DEF_FLD( 0x4409d, "runt_pkt_drop",20,20, "received a runt pkt in the rx direction""", "" )
   RDW_DEF_FLD( 0x4409d, "tx_prsr_l2_err",21,21, "tx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("hi", 0x4609d, "red_hi3_intr_tst","interrupt register""", 0x3fffff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x4609d, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4609d, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4609d, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x4609d, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x4609d, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4609d, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4609d, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x4609d, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x4609d, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x4609d, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x4609d, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4609d, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x4609d, "tx_crc_err",18,18, "transmit packet crc error""", "" )
   RDW_DEF_FLD( 0x4609d, "vif_out_of_range",19,19, "src vif is out of range""", "" )
   RDW_DEF_FLD( 0x4609d, "runt_pkt_drop",20,20, "received a runt pkt in the rx direction""", "" )
   RDW_DEF_FLD( 0x4609d, "tx_prsr_l2_err",21,21, "tx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("hi", 0x4809d, "red_hi4_intr_tst","interrupt register""", 0x3fffff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x4809d, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4809d, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4809d, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x4809d, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x4809d, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4809d, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4809d, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x4809d, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x4809d, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x4809d, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x4809d, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4809d, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x4809d, "tx_crc_err",18,18, "transmit packet crc error""", "" )
   RDW_DEF_FLD( 0x4809d, "vif_out_of_range",19,19, "src vif is out of range""", "" )
   RDW_DEF_FLD( 0x4809d, "runt_pkt_drop",20,20, "received a runt pkt in the rx direction""", "" )
   RDW_DEF_FLD( 0x4809d, "tx_prsr_l2_err",21,21, "tx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("hi", 0x4a09d, "red_hi5_intr_tst","interrupt register""", 0x3fffff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x4a09d, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4a09d, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4a09d, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x4a09d, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x4a09d, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4a09d, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4a09d, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x4a09d, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x4a09d, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x4a09d, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x4a09d, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4a09d, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x4a09d, "tx_crc_err",18,18, "transmit packet crc error""", "" )
   RDW_DEF_FLD( 0x4a09d, "vif_out_of_range",19,19, "src vif is out of range""", "" )
   RDW_DEF_FLD( 0x4a09d, "runt_pkt_drop",20,20, "received a runt pkt in the rx direction""", "" )
   RDW_DEF_FLD( 0x4a09d, "tx_prsr_l2_err",21,21, "tx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("hi", 0x4c09d, "red_hi6_intr_tst","interrupt register""", 0x3fffff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x4c09d, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4c09d, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4c09d, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x4c09d, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x4c09d, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4c09d, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4c09d, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x4c09d, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x4c09d, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x4c09d, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x4c09d, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4c09d, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x4c09d, "tx_crc_err",18,18, "transmit packet crc error""", "" )
   RDW_DEF_FLD( 0x4c09d, "vif_out_of_range",19,19, "src vif is out of range""", "" )
   RDW_DEF_FLD( 0x4c09d, "runt_pkt_drop",20,20, "received a runt pkt in the rx direction""", "" )
   RDW_DEF_FLD( 0x4c09d, "tx_prsr_l2_err",21,21, "tx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("hi", 0x4e09d, "red_hi7_intr_tst","interrupt register""", 0x3fffff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x4e09d, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4e09d, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x4e09d, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x4e09d, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x4e09d, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4e09d, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x4e09d, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x4e09d, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x4e09d, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x4e09d, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x4e09d, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x4e09d, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x4e09d, "tx_crc_err",18,18, "transmit packet crc error""", "" )
   RDW_DEF_FLD( 0x4e09d, "vif_out_of_range",19,19, "src vif is out of range""", "" )
   RDW_DEF_FLD( 0x4e09d, "runt_pkt_drop",20,20, "received a runt pkt in the rx direction""", "" )
   RDW_DEF_FLD( 0x4e09d, "tx_prsr_l2_err",21,21, "tx parser asserted the info2_hdr_err""", "" )


   RDW_DEF("hi", 0x4009e, "red_hi0_cnt_rx_mc_drop","count for mac control frame drops""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4009e, "",31,0, "count for dropped mac control pkt""", "" )
   RDW_DEF("hi", 0x4209e, "red_hi1_cnt_rx_mc_drop","count for mac control frame drops""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4209e, "",31,0, "count for dropped mac control pkt""", "" )
   RDW_DEF("hi", 0x4409e, "red_hi2_cnt_rx_mc_drop","count for mac control frame drops""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4409e, "",31,0, "count for dropped mac control pkt""", "" )
   RDW_DEF("hi", 0x4609e, "red_hi3_cnt_rx_mc_drop","count for mac control frame drops""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4609e, "",31,0, "count for dropped mac control pkt""", "" )
   RDW_DEF("hi", 0x4809e, "red_hi4_cnt_rx_mc_drop","count for mac control frame drops""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4809e, "",31,0, "count for dropped mac control pkt""", "" )
   RDW_DEF("hi", 0x4a09e, "red_hi5_cnt_rx_mc_drop","count for mac control frame drops""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4a09e, "",31,0, "count for dropped mac control pkt""", "" )
   RDW_DEF("hi", 0x4c09e, "red_hi6_cnt_rx_mc_drop","count for mac control frame drops""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4c09e, "",31,0, "count for dropped mac control pkt""", "" )
   RDW_DEF("hi", 0x4e09e, "red_hi7_cnt_rx_mc_drop","count for mac control frame drops""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4e09e, "",31,0, "count for dropped mac control pkt""", "" )


   RDW_DEF("hi", 0x4009f, "red_hi0_cnt_rx_fwd_drop","counts packets that are dropped when forwarding vector is 7""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4009f, "",31,0, "", "" )
   RDW_DEF("hi", 0x4209f, "red_hi1_cnt_rx_fwd_drop","counts packets that are dropped when forwarding vector is 7""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4209f, "",31,0, "", "" )
   RDW_DEF("hi", 0x4409f, "red_hi2_cnt_rx_fwd_drop","counts packets that are dropped when forwarding vector is 7""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4409f, "",31,0, "", "" )
   RDW_DEF("hi", 0x4609f, "red_hi3_cnt_rx_fwd_drop","counts packets that are dropped when forwarding vector is 7""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4609f, "",31,0, "", "" )
   RDW_DEF("hi", 0x4809f, "red_hi4_cnt_rx_fwd_drop","counts packets that are dropped when forwarding vector is 7""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4809f, "",31,0, "", "" )
   RDW_DEF("hi", 0x4a09f, "red_hi5_cnt_rx_fwd_drop","counts packets that are dropped when forwarding vector is 7""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4a09f, "",31,0, "", "" )
   RDW_DEF("hi", 0x4c09f, "red_hi6_cnt_rx_fwd_drop","counts packets that are dropped when forwarding vector is 7""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4c09f, "",31,0, "", "" )
   RDW_DEF("hi", 0x4e09f, "red_hi7_cnt_rx_fwd_drop","counts packets that are dropped when forwarding vector is 7""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4e09f, "",31,0, "", "" )


   RDW_DEF("hi", 0x400a0, "red_hi0_cnt_rx_src_vif_out_of_range_drop","counts packets that are dropped because src vif is out of range""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x400a0, "",31,0, "", "" )
   RDW_DEF("hi", 0x420a0, "red_hi1_cnt_rx_src_vif_out_of_range_drop","counts packets that are dropped because src vif is out of range""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x420a0, "",31,0, "", "" )
   RDW_DEF("hi", 0x440a0, "red_hi2_cnt_rx_src_vif_out_of_range_drop","counts packets that are dropped because src vif is out of range""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x440a0, "",31,0, "", "" )
   RDW_DEF("hi", 0x460a0, "red_hi3_cnt_rx_src_vif_out_of_range_drop","counts packets that are dropped because src vif is out of range""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x460a0, "",31,0, "", "" )
   RDW_DEF("hi", 0x480a0, "red_hi4_cnt_rx_src_vif_out_of_range_drop","counts packets that are dropped because src vif is out of range""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x480a0, "",31,0, "", "" )
   RDW_DEF("hi", 0x4a0a0, "red_hi5_cnt_rx_src_vif_out_of_range_drop","counts packets that are dropped because src vif is out of range""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4a0a0, "",31,0, "", "" )
   RDW_DEF("hi", 0x4c0a0, "red_hi6_cnt_rx_src_vif_out_of_range_drop","counts packets that are dropped because src vif is out of range""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4c0a0, "",31,0, "", "" )
   RDW_DEF("hi", 0x4e0a0, "red_hi7_cnt_rx_src_vif_out_of_range_drop","counts packets that are dropped because src vif is out of range""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4e0a0, "",31,0, "", "" )


   RDW_DEF("hi", 0x400a1, "red_hi0_cnt_tx_lb_drop","counts packets dropped because the packet has the L-BIT set, is in the svif range,\nand the port is not in vntag mode""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x400a1, "",15,0, "", "" )
   RDW_DEF("hi", 0x420a1, "red_hi1_cnt_tx_lb_drop","counts packets dropped because the packet has the L-BIT set, is in the svif range,\nand the port is not in vntag mode""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x420a1, "",15,0, "", "" )
   RDW_DEF("hi", 0x440a1, "red_hi2_cnt_tx_lb_drop","counts packets dropped because the packet has the L-BIT set, is in the svif range,\nand the port is not in vntag mode""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x440a1, "",15,0, "", "" )
   RDW_DEF("hi", 0x460a1, "red_hi3_cnt_tx_lb_drop","counts packets dropped because the packet has the L-BIT set, is in the svif range,\nand the port is not in vntag mode""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x460a1, "",15,0, "", "" )
   RDW_DEF("hi", 0x480a1, "red_hi4_cnt_tx_lb_drop","counts packets dropped because the packet has the L-BIT set, is in the svif range,\nand the port is not in vntag mode""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x480a1, "",15,0, "", "" )
   RDW_DEF("hi", 0x4a0a1, "red_hi5_cnt_tx_lb_drop","counts packets dropped because the packet has the L-BIT set, is in the svif range,\nand the port is not in vntag mode""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4a0a1, "",15,0, "", "" )
   RDW_DEF("hi", 0x4c0a1, "red_hi6_cnt_tx_lb_drop","counts packets dropped because the packet has the L-BIT set, is in the svif range,\nand the port is not in vntag mode""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4c0a1, "",15,0, "", "" )
   RDW_DEF("hi", 0x4e0a1, "red_hi7_cnt_tx_lb_drop","counts packets dropped because the packet has the L-BIT set, is in the svif range,\nand the port is not in vntag mode""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4e0a1, "",15,0, "", "" )


   RDW_DEF("hi", 0x400a2, "red_hi0_cnt_rx_allow_vntag_drop","counts dropped packets that were received with a vntag, when the allow_vntag bit is false""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x400a2, "",15,0, "", "" )
   RDW_DEF("hi", 0x420a2, "red_hi1_cnt_rx_allow_vntag_drop","counts dropped packets that were received with a vntag, when the allow_vntag bit is false""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x420a2, "",15,0, "", "" )
   RDW_DEF("hi", 0x440a2, "red_hi2_cnt_rx_allow_vntag_drop","counts dropped packets that were received with a vntag, when the allow_vntag bit is false""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x440a2, "",15,0, "", "" )
   RDW_DEF("hi", 0x460a2, "red_hi3_cnt_rx_allow_vntag_drop","counts dropped packets that were received with a vntag, when the allow_vntag bit is false""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x460a2, "",15,0, "", "" )
   RDW_DEF("hi", 0x480a2, "red_hi4_cnt_rx_allow_vntag_drop","counts dropped packets that were received with a vntag, when the allow_vntag bit is false""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x480a2, "",15,0, "", "" )
   RDW_DEF("hi", 0x4a0a2, "red_hi5_cnt_rx_allow_vntag_drop","counts dropped packets that were received with a vntag, when the allow_vntag bit is false""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4a0a2, "",15,0, "", "" )
   RDW_DEF("hi", 0x4c0a2, "red_hi6_cnt_rx_allow_vntag_drop","counts dropped packets that were received with a vntag, when the allow_vntag bit is false""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4c0a2, "",15,0, "", "" )
   RDW_DEF("hi", 0x4e0a2, "red_hi7_cnt_rx_allow_vntag_drop","counts dropped packets that were received with a vntag, when the allow_vntag bit is false""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4e0a2, "",15,0, "", "" )


   RDW_DEF("hi", 0x400a3, "red_hi0_cnt_rx_echannel_drop","counts dropped packets that should be forwarded to an etherchannel, but the etherchannel map is empty""", 0xff, 0x0, "cnt")
   RDW_DEF_FLD( 0x400a3, "",7,0, "", "" )
   RDW_DEF("hi", 0x420a3, "red_hi1_cnt_rx_echannel_drop","counts dropped packets that should be forwarded to an etherchannel, but the etherchannel map is empty""", 0xff, 0x0, "cnt")
   RDW_DEF_FLD( 0x420a3, "",7,0, "", "" )
   RDW_DEF("hi", 0x440a3, "red_hi2_cnt_rx_echannel_drop","counts dropped packets that should be forwarded to an etherchannel, but the etherchannel map is empty""", 0xff, 0x0, "cnt")
   RDW_DEF_FLD( 0x440a3, "",7,0, "", "" )
   RDW_DEF("hi", 0x460a3, "red_hi3_cnt_rx_echannel_drop","counts dropped packets that should be forwarded to an etherchannel, but the etherchannel map is empty""", 0xff, 0x0, "cnt")
   RDW_DEF_FLD( 0x460a3, "",7,0, "", "" )
   RDW_DEF("hi", 0x480a3, "red_hi4_cnt_rx_echannel_drop","counts dropped packets that should be forwarded to an etherchannel, but the etherchannel map is empty""", 0xff, 0x0, "cnt")
   RDW_DEF_FLD( 0x480a3, "",7,0, "", "" )
   RDW_DEF("hi", 0x4a0a3, "red_hi5_cnt_rx_echannel_drop","counts dropped packets that should be forwarded to an etherchannel, but the etherchannel map is empty""", 0xff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4a0a3, "",7,0, "", "" )
   RDW_DEF("hi", 0x4c0a3, "red_hi6_cnt_rx_echannel_drop","counts dropped packets that should be forwarded to an etherchannel, but the etherchannel map is empty""", 0xff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4c0a3, "",7,0, "", "" )
   RDW_DEF("hi", 0x4e0a3, "red_hi7_cnt_rx_echannel_drop","counts dropped packets that should be forwarded to an etherchannel, but the etherchannel map is empty""", 0xff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4e0a3, "",7,0, "", "" )


    RDW_DEF_DHS("hi", 0x400a8, "red_hi0_dhs_rx_fcoe_cnt_00", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x400a8, "_00",31,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x400a9, "red_hi0_dhs_rx_fcoe_cnt_01", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x400a9, "_01",3,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x420a8, "red_hi1_dhs_rx_fcoe_cnt_00", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x420a8, "_00",31,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x420a9, "red_hi1_dhs_rx_fcoe_cnt_01", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x420a9, "_01",3,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x440a8, "red_hi2_dhs_rx_fcoe_cnt_00", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x440a8, "_00",31,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x440a9, "red_hi2_dhs_rx_fcoe_cnt_01", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x440a9, "_01",3,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x460a8, "red_hi3_dhs_rx_fcoe_cnt_00", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x460a8, "_00",31,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x460a9, "red_hi3_dhs_rx_fcoe_cnt_01", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x460a9, "_01",3,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x480a8, "red_hi4_dhs_rx_fcoe_cnt_00", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x480a8, "_00",31,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x480a9, "red_hi4_dhs_rx_fcoe_cnt_01", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x480a9, "_01",3,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x4a0a8, "red_hi5_dhs_rx_fcoe_cnt_00", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x4a0a8, "_00",31,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x4a0a9, "red_hi5_dhs_rx_fcoe_cnt_01", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x4a0a9, "_01",3,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x4c0a8, "red_hi6_dhs_rx_fcoe_cnt_00", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x4c0a8, "_00",31,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x4c0a9, "red_hi6_dhs_rx_fcoe_cnt_01", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x4c0a9, "_01",3,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x4e0a8, "red_hi7_dhs_rx_fcoe_cnt_00", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x4e0a8, "_00",31,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x4e0a9, "red_hi7_dhs_rx_fcoe_cnt_01", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x4e0a9, "_01",3,0,"fcoe/non fcoe counts.\n","" )


    RDW_DEF_DHS("hi", 0x400b0, "red_hi0_dhs_tx_fcoe_cnt_00", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x400b0, "_00",31,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x400b1, "red_hi0_dhs_tx_fcoe_cnt_01", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x400b1, "_01",3,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x420b0, "red_hi1_dhs_tx_fcoe_cnt_00", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x420b0, "_00",31,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x420b1, "red_hi1_dhs_tx_fcoe_cnt_01", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x420b1, "_01",3,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x440b0, "red_hi2_dhs_tx_fcoe_cnt_00", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x440b0, "_00",31,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x440b1, "red_hi2_dhs_tx_fcoe_cnt_01", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x440b1, "_01",3,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x460b0, "red_hi3_dhs_tx_fcoe_cnt_00", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x460b0, "_00",31,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x460b1, "red_hi3_dhs_tx_fcoe_cnt_01", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x460b1, "_01",3,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x480b0, "red_hi4_dhs_tx_fcoe_cnt_00", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x480b0, "_00",31,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x480b1, "red_hi4_dhs_tx_fcoe_cnt_01", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x480b1, "_01",3,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x4a0b0, "red_hi5_dhs_tx_fcoe_cnt_00", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x4a0b0, "_00",31,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x4a0b1, "red_hi5_dhs_tx_fcoe_cnt_01", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x4a0b1, "_01",3,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x4c0b0, "red_hi6_dhs_tx_fcoe_cnt_00", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x4c0b0, "_00",31,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x4c0b1, "red_hi6_dhs_tx_fcoe_cnt_01", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x4c0b1, "_01",3,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x4e0b0, "red_hi7_dhs_tx_fcoe_cnt_00", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x4e0b0, "_00",31,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("hi", 0x4e0b1, "red_hi7_dhs_tx_fcoe_cnt_01", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x4e0b1, "_01",3,0,"fcoe/non fcoe counts.\n","" )


   RDW_DEF("hi", 0x400b8, "red_hi0_sta_stat_upper","upper 4 bits of the dhs_mac_stat""", 0xf, 0x0, "sta")
   RDW_DEF_FLD( 0x400b8, "",3,0, "SW can read this after reading the dhs_mac_stat or dhs_fcoe_count to get the\nupper 4 bits of the stats. Other wise the 2nd dhs read will\nget the latest value of the dhs""", "" )
   RDW_DEF("hi", 0x420b8, "red_hi1_sta_stat_upper","upper 4 bits of the dhs_mac_stat""", 0xf, 0x0, "sta")
   RDW_DEF_FLD( 0x420b8, "",3,0, "SW can read this after reading the dhs_mac_stat or dhs_fcoe_count to get the\nupper 4 bits of the stats. Other wise the 2nd dhs read will\nget the latest value of the dhs""", "" )
   RDW_DEF("hi", 0x440b8, "red_hi2_sta_stat_upper","upper 4 bits of the dhs_mac_stat""", 0xf, 0x0, "sta")
   RDW_DEF_FLD( 0x440b8, "",3,0, "SW can read this after reading the dhs_mac_stat or dhs_fcoe_count to get the\nupper 4 bits of the stats. Other wise the 2nd dhs read will\nget the latest value of the dhs""", "" )
   RDW_DEF("hi", 0x460b8, "red_hi3_sta_stat_upper","upper 4 bits of the dhs_mac_stat""", 0xf, 0x0, "sta")
   RDW_DEF_FLD( 0x460b8, "",3,0, "SW can read this after reading the dhs_mac_stat or dhs_fcoe_count to get the\nupper 4 bits of the stats. Other wise the 2nd dhs read will\nget the latest value of the dhs""", "" )
   RDW_DEF("hi", 0x480b8, "red_hi4_sta_stat_upper","upper 4 bits of the dhs_mac_stat""", 0xf, 0x0, "sta")
   RDW_DEF_FLD( 0x480b8, "",3,0, "SW can read this after reading the dhs_mac_stat or dhs_fcoe_count to get the\nupper 4 bits of the stats. Other wise the 2nd dhs read will\nget the latest value of the dhs""", "" )
   RDW_DEF("hi", 0x4a0b8, "red_hi5_sta_stat_upper","upper 4 bits of the dhs_mac_stat""", 0xf, 0x0, "sta")
   RDW_DEF_FLD( 0x4a0b8, "",3,0, "SW can read this after reading the dhs_mac_stat or dhs_fcoe_count to get the\nupper 4 bits of the stats. Other wise the 2nd dhs read will\nget the latest value of the dhs""", "" )
   RDW_DEF("hi", 0x4c0b8, "red_hi6_sta_stat_upper","upper 4 bits of the dhs_mac_stat""", 0xf, 0x0, "sta")
   RDW_DEF_FLD( 0x4c0b8, "",3,0, "SW can read this after reading the dhs_mac_stat or dhs_fcoe_count to get the\nupper 4 bits of the stats. Other wise the 2nd dhs read will\nget the latest value of the dhs""", "" )
   RDW_DEF("hi", 0x4e0b8, "red_hi7_sta_stat_upper","upper 4 bits of the dhs_mac_stat""", 0xf, 0x0, "sta")
   RDW_DEF_FLD( 0x4e0b8, "",3,0, "SW can read this after reading the dhs_mac_stat or dhs_fcoe_count to get the\nupper 4 bits of the stats. Other wise the 2nd dhs read will\nget the latest value of the dhs""", "" )


    RDW_DEF_DHS("hi", 0x40100, "red_hi0_dhs_mac_stat_00", "", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x40100, "_00",31,0," access to rmon stats","" )
    RDW_DEF_DHS("hi", 0x40101, "red_hi0_dhs_mac_stat_01", "", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x40101, "_01",3,0," access to rmon stats","" )
    RDW_DEF_DHS("hi", 0x42100, "red_hi1_dhs_mac_stat_00", "", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x42100, "_00",31,0," access to rmon stats","" )
    RDW_DEF_DHS("hi", 0x42101, "red_hi1_dhs_mac_stat_01", "", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x42101, "_01",3,0," access to rmon stats","" )
    RDW_DEF_DHS("hi", 0x44100, "red_hi2_dhs_mac_stat_00", "", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x44100, "_00",31,0," access to rmon stats","" )
    RDW_DEF_DHS("hi", 0x44101, "red_hi2_dhs_mac_stat_01", "", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x44101, "_01",3,0," access to rmon stats","" )
    RDW_DEF_DHS("hi", 0x46100, "red_hi3_dhs_mac_stat_00", "", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x46100, "_00",31,0," access to rmon stats","" )
    RDW_DEF_DHS("hi", 0x46101, "red_hi3_dhs_mac_stat_01", "", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x46101, "_01",3,0," access to rmon stats","" )
    RDW_DEF_DHS("hi", 0x48100, "red_hi4_dhs_mac_stat_00", "", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x48100, "_00",31,0," access to rmon stats","" )
    RDW_DEF_DHS("hi", 0x48101, "red_hi4_dhs_mac_stat_01", "", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x48101, "_01",3,0," access to rmon stats","" )
    RDW_DEF_DHS("hi", 0x4a100, "red_hi5_dhs_mac_stat_00", "", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x4a100, "_00",31,0," access to rmon stats","" )
    RDW_DEF_DHS("hi", 0x4a101, "red_hi5_dhs_mac_stat_01", "", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x4a101, "_01",3,0," access to rmon stats","" )
    RDW_DEF_DHS("hi", 0x4c100, "red_hi6_dhs_mac_stat_00", "", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x4c100, "_00",31,0," access to rmon stats","" )
    RDW_DEF_DHS("hi", 0x4c101, "red_hi6_dhs_mac_stat_01", "", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x4c101, "_01",3,0," access to rmon stats","" )
    RDW_DEF_DHS("hi", 0x4e100, "red_hi7_dhs_mac_stat_00", "", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x4e100, "_00",31,0," access to rmon stats","" )
    RDW_DEF_DHS("hi", 0x4e101, "red_hi7_dhs_mac_stat_01", "", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x4e101, "_01",3,0," access to rmon stats","" )


    RDW_DEF_DHS("hi", 0x40180, "red_hi0_dhs_mdio", "mdio reg""", 0xffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x40180, "",15,0,"mdio access","" )
    RDW_DEF_DHS("hi", 0x42180, "red_hi1_dhs_mdio", "mdio reg""", 0xffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x42180, "",15,0,"mdio access","" )
    RDW_DEF_DHS("hi", 0x44180, "red_hi2_dhs_mdio", "mdio reg""", 0xffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x44180, "",15,0,"mdio access","" )
    RDW_DEF_DHS("hi", 0x46180, "red_hi3_dhs_mdio", "mdio reg""", 0xffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x46180, "",15,0,"mdio access","" )
    RDW_DEF_DHS("hi", 0x48180, "red_hi4_dhs_mdio", "mdio reg""", 0xffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x48180, "",15,0,"mdio access","" )
    RDW_DEF_DHS("hi", 0x4a180, "red_hi5_dhs_mdio", "mdio reg""", 0xffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x4a180, "",15,0,"mdio access","" )
    RDW_DEF_DHS("hi", 0x4c180, "red_hi6_dhs_mdio", "mdio reg""", 0xffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x4c180, "",15,0,"mdio access","" )
    RDW_DEF_DHS("hi", 0x4e180, "red_hi7_dhs_mdio", "mdio reg""", 0xffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x4e180, "",15,0,"mdio access","" )


   RDW_DEF("hi", 0x40184, "red_hi0_mdio_master","", 0xffff, 0x6404, "cfg")
   RDW_DEF_FLD( 0x40184, "clk_hold",7,0, "clock control - hold time""", "" )
   RDW_DEF_FLD( 0x40184, "clk_div",15,8, "clock control - clock divide time""", "" )
   RDW_DEF("hi", 0x42184, "red_hi1_mdio_master","", 0xffff, 0x6404, "cfg")
   RDW_DEF_FLD( 0x42184, "clk_hold",7,0, "clock control - hold time""", "" )
   RDW_DEF_FLD( 0x42184, "clk_div",15,8, "clock control - clock divide time""", "" )
   RDW_DEF("hi", 0x44184, "red_hi2_mdio_master","", 0xffff, 0x6404, "cfg")
   RDW_DEF_FLD( 0x44184, "clk_hold",7,0, "clock control - hold time""", "" )
   RDW_DEF_FLD( 0x44184, "clk_div",15,8, "clock control - clock divide time""", "" )
   RDW_DEF("hi", 0x46184, "red_hi3_mdio_master","", 0xffff, 0x6404, "cfg")
   RDW_DEF_FLD( 0x46184, "clk_hold",7,0, "clock control - hold time""", "" )
   RDW_DEF_FLD( 0x46184, "clk_div",15,8, "clock control - clock divide time""", "" )
   RDW_DEF("hi", 0x48184, "red_hi4_mdio_master","", 0xffff, 0x6404, "cfg")
   RDW_DEF_FLD( 0x48184, "clk_hold",7,0, "clock control - hold time""", "" )
   RDW_DEF_FLD( 0x48184, "clk_div",15,8, "clock control - clock divide time""", "" )
   RDW_DEF("hi", 0x4a184, "red_hi5_mdio_master","", 0xffff, 0x6404, "cfg")
   RDW_DEF_FLD( 0x4a184, "clk_hold",7,0, "clock control - hold time""", "" )
   RDW_DEF_FLD( 0x4a184, "clk_div",15,8, "clock control - clock divide time""", "" )
   RDW_DEF("hi", 0x4c184, "red_hi6_mdio_master","", 0xffff, 0x6404, "cfg")
   RDW_DEF_FLD( 0x4c184, "clk_hold",7,0, "clock control - hold time""", "" )
   RDW_DEF_FLD( 0x4c184, "clk_div",15,8, "clock control - clock divide time""", "" )
   RDW_DEF("hi", 0x4e184, "red_hi7_mdio_master","", 0xffff, 0x6404, "cfg")
   RDW_DEF_FLD( 0x4e184, "clk_hold",7,0, "clock control - hold time""", "" )
   RDW_DEF_FLD( 0x4e184, "clk_div",15,8, "clock control - clock divide time""", "" )


   RDW_DEF("hi", 0x40185, "red_hi0_cfg_eg_nspi_timer","MAC Rx nspi bus timer. In unit of 256 core clock cycles. Zero==disable""", 0xffff, 0x20, "cfg")
   RDW_DEF_FLD( 0x40185, "",15,0, "", "" )
   RDW_DEF("hi", 0x42185, "red_hi1_cfg_eg_nspi_timer","MAC Rx nspi bus timer. In unit of 256 core clock cycles. Zero==disable""", 0xffff, 0x20, "cfg")
   RDW_DEF_FLD( 0x42185, "",15,0, "", "" )
   RDW_DEF("hi", 0x44185, "red_hi2_cfg_eg_nspi_timer","MAC Rx nspi bus timer. In unit of 256 core clock cycles. Zero==disable""", 0xffff, 0x20, "cfg")
   RDW_DEF_FLD( 0x44185, "",15,0, "", "" )
   RDW_DEF("hi", 0x46185, "red_hi3_cfg_eg_nspi_timer","MAC Rx nspi bus timer. In unit of 256 core clock cycles. Zero==disable""", 0xffff, 0x20, "cfg")
   RDW_DEF_FLD( 0x46185, "",15,0, "", "" )
   RDW_DEF("hi", 0x48185, "red_hi4_cfg_eg_nspi_timer","MAC Rx nspi bus timer. In unit of 256 core clock cycles. Zero==disable""", 0xffff, 0x20, "cfg")
   RDW_DEF_FLD( 0x48185, "",15,0, "", "" )
   RDW_DEF("hi", 0x4a185, "red_hi5_cfg_eg_nspi_timer","MAC Rx nspi bus timer. In unit of 256 core clock cycles. Zero==disable""", 0xffff, 0x20, "cfg")
   RDW_DEF_FLD( 0x4a185, "",15,0, "", "" )
   RDW_DEF("hi", 0x4c185, "red_hi6_cfg_eg_nspi_timer","MAC Rx nspi bus timer. In unit of 256 core clock cycles. Zero==disable""", 0xffff, 0x20, "cfg")
   RDW_DEF_FLD( 0x4c185, "",15,0, "", "" )
   RDW_DEF("hi", 0x4e185, "red_hi7_cfg_eg_nspi_timer","MAC Rx nspi bus timer. In unit of 256 core clock cycles. Zero==disable""", 0xffff, 0x20, "cfg")
   RDW_DEF_FLD( 0x4e185, "",15,0, "", "" )


   RDW_DEF("hi", 0x40186, "red_hi0_sta_rx_runt_pkt_size","", 0xff, 0x0, "sta")
   RDW_DEF_FLD( 0x40186, "",7,0, "size of the rx runt packet received""", "" )
   RDW_DEF("hi", 0x42186, "red_hi1_sta_rx_runt_pkt_size","", 0xff, 0x0, "sta")
   RDW_DEF_FLD( 0x42186, "",7,0, "size of the rx runt packet received""", "" )
   RDW_DEF("hi", 0x44186, "red_hi2_sta_rx_runt_pkt_size","", 0xff, 0x0, "sta")
   RDW_DEF_FLD( 0x44186, "",7,0, "size of the rx runt packet received""", "" )
   RDW_DEF("hi", 0x46186, "red_hi3_sta_rx_runt_pkt_size","", 0xff, 0x0, "sta")
   RDW_DEF_FLD( 0x46186, "",7,0, "size of the rx runt packet received""", "" )
   RDW_DEF("hi", 0x48186, "red_hi4_sta_rx_runt_pkt_size","", 0xff, 0x0, "sta")
   RDW_DEF_FLD( 0x48186, "",7,0, "size of the rx runt packet received""", "" )
   RDW_DEF("hi", 0x4a186, "red_hi5_sta_rx_runt_pkt_size","", 0xff, 0x0, "sta")
   RDW_DEF_FLD( 0x4a186, "",7,0, "size of the rx runt packet received""", "" )
   RDW_DEF("hi", 0x4c186, "red_hi6_sta_rx_runt_pkt_size","", 0xff, 0x0, "sta")
   RDW_DEF_FLD( 0x4c186, "",7,0, "size of the rx runt packet received""", "" )
   RDW_DEF("hi", 0x4e186, "red_hi7_sta_rx_runt_pkt_size","", 0xff, 0x0, "sta")
   RDW_DEF_FLD( 0x4e186, "",7,0, "size of the rx runt packet received""", "" )


   RDW_DEF("hi", 0x40187, "red_hi0_cnt_rx_runt_pkt_drop","", 0xff, 0x0, "cnt")
   RDW_DEF_FLD( 0x40187, "",7,0, "rx runt packet drop""", "" )
   RDW_DEF("hi", 0x42187, "red_hi1_cnt_rx_runt_pkt_drop","", 0xff, 0x0, "cnt")
   RDW_DEF_FLD( 0x42187, "",7,0, "rx runt packet drop""", "" )
   RDW_DEF("hi", 0x44187, "red_hi2_cnt_rx_runt_pkt_drop","", 0xff, 0x0, "cnt")
   RDW_DEF_FLD( 0x44187, "",7,0, "rx runt packet drop""", "" )
   RDW_DEF("hi", 0x46187, "red_hi3_cnt_rx_runt_pkt_drop","", 0xff, 0x0, "cnt")
   RDW_DEF_FLD( 0x46187, "",7,0, "rx runt packet drop""", "" )
   RDW_DEF("hi", 0x48187, "red_hi4_cnt_rx_runt_pkt_drop","", 0xff, 0x0, "cnt")
   RDW_DEF_FLD( 0x48187, "",7,0, "rx runt packet drop""", "" )
   RDW_DEF("hi", 0x4a187, "red_hi5_cnt_rx_runt_pkt_drop","", 0xff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4a187, "",7,0, "rx runt packet drop""", "" )
   RDW_DEF("hi", 0x4c187, "red_hi6_cnt_rx_runt_pkt_drop","", 0xff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4c187, "",7,0, "rx runt packet drop""", "" )
   RDW_DEF("hi", 0x4e187, "red_hi7_cnt_rx_runt_pkt_drop","", 0xff, 0x0, "cnt")
   RDW_DEF_FLD( 0x4e187, "",7,0, "rx runt packet drop""", "" )


   RDW_DEF("hi", 0x40188, "red_hi0_cfg_etherchannel","", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x40188, "nif_map0",3,0, "one-hot encodes nif ports that are included in an etherchannel""", "" )
   RDW_DEF_FLD( 0x40188, "nif_map1",7,4, "one-hot encodes nif ports that are included in an etherchannel""", "" )
   RDW_DEF("hi", 0x42188, "red_hi1_cfg_etherchannel","", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x42188, "nif_map0",3,0, "one-hot encodes nif ports that are included in an etherchannel""", "" )
   RDW_DEF_FLD( 0x42188, "nif_map1",7,4, "one-hot encodes nif ports that are included in an etherchannel""", "" )
   RDW_DEF("hi", 0x44188, "red_hi2_cfg_etherchannel","", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x44188, "nif_map0",3,0, "one-hot encodes nif ports that are included in an etherchannel""", "" )
   RDW_DEF_FLD( 0x44188, "nif_map1",7,4, "one-hot encodes nif ports that are included in an etherchannel""", "" )
   RDW_DEF("hi", 0x46188, "red_hi3_cfg_etherchannel","", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x46188, "nif_map0",3,0, "one-hot encodes nif ports that are included in an etherchannel""", "" )
   RDW_DEF_FLD( 0x46188, "nif_map1",7,4, "one-hot encodes nif ports that are included in an etherchannel""", "" )
   RDW_DEF("hi", 0x48188, "red_hi4_cfg_etherchannel","", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x48188, "nif_map0",3,0, "one-hot encodes nif ports that are included in an etherchannel""", "" )
   RDW_DEF_FLD( 0x48188, "nif_map1",7,4, "one-hot encodes nif ports that are included in an etherchannel""", "" )
   RDW_DEF("hi", 0x4a188, "red_hi5_cfg_etherchannel","", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a188, "nif_map0",3,0, "one-hot encodes nif ports that are included in an etherchannel""", "" )
   RDW_DEF_FLD( 0x4a188, "nif_map1",7,4, "one-hot encodes nif ports that are included in an etherchannel""", "" )
   RDW_DEF("hi", 0x4c188, "red_hi6_cfg_etherchannel","", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c188, "nif_map0",3,0, "one-hot encodes nif ports that are included in an etherchannel""", "" )
   RDW_DEF_FLD( 0x4c188, "nif_map1",7,4, "one-hot encodes nif ports that are included in an etherchannel""", "" )
   RDW_DEF("hi", 0x4e188, "red_hi7_cfg_etherchannel","", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e188, "nif_map0",3,0, "one-hot encodes nif ports that are included in an etherchannel""", "" )
   RDW_DEF_FLD( 0x4e188, "nif_map1",7,4, "one-hot encodes nif ports that are included in an etherchannel""", "" )


   RDW_DEF("hi", 0x40189, "red_hi0_cfg","global configuration for Redwood""", 0x1, 0x1, "cfg")
   RDW_DEF_FLD( 0x40189, "drop_on_err",0,0, "when set, error packets will be dropped.\nOtherwise error packets will be forwarded to the ci interface""", "" )
   RDW_DEF("hi", 0x42189, "red_hi1_cfg","global configuration for Redwood""", 0x1, 0x1, "cfg")
   RDW_DEF_FLD( 0x42189, "drop_on_err",0,0, "when set, error packets will be dropped.\nOtherwise error packets will be forwarded to the ci interface""", "" )
   RDW_DEF("hi", 0x44189, "red_hi2_cfg","global configuration for Redwood""", 0x1, 0x1, "cfg")
   RDW_DEF_FLD( 0x44189, "drop_on_err",0,0, "when set, error packets will be dropped.\nOtherwise error packets will be forwarded to the ci interface""", "" )
   RDW_DEF("hi", 0x46189, "red_hi3_cfg","global configuration for Redwood""", 0x1, 0x1, "cfg")
   RDW_DEF_FLD( 0x46189, "drop_on_err",0,0, "when set, error packets will be dropped.\nOtherwise error packets will be forwarded to the ci interface""", "" )
   RDW_DEF("hi", 0x48189, "red_hi4_cfg","global configuration for Redwood""", 0x1, 0x1, "cfg")
   RDW_DEF_FLD( 0x48189, "drop_on_err",0,0, "when set, error packets will be dropped.\nOtherwise error packets will be forwarded to the ci interface""", "" )
   RDW_DEF("hi", 0x4a189, "red_hi5_cfg","global configuration for Redwood""", 0x1, 0x1, "cfg")
   RDW_DEF_FLD( 0x4a189, "drop_on_err",0,0, "when set, error packets will be dropped.\nOtherwise error packets will be forwarded to the ci interface""", "" )
   RDW_DEF("hi", 0x4c189, "red_hi6_cfg","global configuration for Redwood""", 0x1, 0x1, "cfg")
   RDW_DEF_FLD( 0x4c189, "drop_on_err",0,0, "when set, error packets will be dropped.\nOtherwise error packets will be forwarded to the ci interface""", "" )
   RDW_DEF("hi", 0x4e189, "red_hi7_cfg","global configuration for Redwood""", 0x1, 0x1, "cfg")
   RDW_DEF_FLD( 0x4e189, "drop_on_err",0,0, "when set, error packets will be dropped.\nOtherwise error packets will be forwarded to the ci interface""", "" )


   RDW_DEF("hi", 0x4018a, "red_hi0_cfg_eth_type_fcoe","", 0xffff, 0x8906, "cfg")
   RDW_DEF_FLD( 0x4018a, "",15,0, "ethertype for fcoe packets""", "" )
   RDW_DEF("hi", 0x4218a, "red_hi1_cfg_eth_type_fcoe","", 0xffff, 0x8906, "cfg")
   RDW_DEF_FLD( 0x4218a, "",15,0, "ethertype for fcoe packets""", "" )
   RDW_DEF("hi", 0x4418a, "red_hi2_cfg_eth_type_fcoe","", 0xffff, 0x8906, "cfg")
   RDW_DEF_FLD( 0x4418a, "",15,0, "ethertype for fcoe packets""", "" )
   RDW_DEF("hi", 0x4618a, "red_hi3_cfg_eth_type_fcoe","", 0xffff, 0x8906, "cfg")
   RDW_DEF_FLD( 0x4618a, "",15,0, "ethertype for fcoe packets""", "" )
   RDW_DEF("hi", 0x4818a, "red_hi4_cfg_eth_type_fcoe","", 0xffff, 0x8906, "cfg")
   RDW_DEF_FLD( 0x4818a, "",15,0, "ethertype for fcoe packets""", "" )
   RDW_DEF("hi", 0x4a18a, "red_hi5_cfg_eth_type_fcoe","", 0xffff, 0x8906, "cfg")
   RDW_DEF_FLD( 0x4a18a, "",15,0, "ethertype for fcoe packets""", "" )
   RDW_DEF("hi", 0x4c18a, "red_hi6_cfg_eth_type_fcoe","", 0xffff, 0x8906, "cfg")
   RDW_DEF_FLD( 0x4c18a, "",15,0, "ethertype for fcoe packets""", "" )
   RDW_DEF("hi", 0x4e18a, "red_hi7_cfg_eth_type_fcoe","", 0xffff, 0x8906, "cfg")
   RDW_DEF_FLD( 0x4e18a, "",15,0, "ethertype for fcoe packets""", "" )


   RDW_DEF("hi", 0x4018b, "red_hi0_cfg_eth_type_vntag","", 0xffff, 0x564e, "cfg")
   RDW_DEF_FLD( 0x4018b, "",15,0, "ethertype for vntag packets""", "" )
   RDW_DEF("hi", 0x4218b, "red_hi1_cfg_eth_type_vntag","", 0xffff, 0x564e, "cfg")
   RDW_DEF_FLD( 0x4218b, "",15,0, "ethertype for vntag packets""", "" )
   RDW_DEF("hi", 0x4418b, "red_hi2_cfg_eth_type_vntag","", 0xffff, 0x564e, "cfg")
   RDW_DEF_FLD( 0x4418b, "",15,0, "ethertype for vntag packets""", "" )
   RDW_DEF("hi", 0x4618b, "red_hi3_cfg_eth_type_vntag","", 0xffff, 0x564e, "cfg")
   RDW_DEF_FLD( 0x4618b, "",15,0, "ethertype for vntag packets""", "" )
   RDW_DEF("hi", 0x4818b, "red_hi4_cfg_eth_type_vntag","", 0xffff, 0x564e, "cfg")
   RDW_DEF_FLD( 0x4818b, "",15,0, "ethertype for vntag packets""", "" )
   RDW_DEF("hi", 0x4a18b, "red_hi5_cfg_eth_type_vntag","", 0xffff, 0x564e, "cfg")
   RDW_DEF_FLD( 0x4a18b, "",15,0, "ethertype for vntag packets""", "" )
   RDW_DEF("hi", 0x4c18b, "red_hi6_cfg_eth_type_vntag","", 0xffff, 0x564e, "cfg")
   RDW_DEF_FLD( 0x4c18b, "",15,0, "ethertype for vntag packets""", "" )
   RDW_DEF("hi", 0x4e18b, "red_hi7_cfg_eth_type_vntag","", 0xffff, 0x564e, "cfg")
   RDW_DEF_FLD( 0x4e18b, "",15,0, "ethertype for vntag packets""", "" )


   RDW_DEF("hi", 0x4018c, "red_hi0_cfg_eth_type_stag","", 0xffff, 0x88a8, "cfg")
   RDW_DEF_FLD( 0x4018c, "",15,0, "ethertype for stag packets""", "" )
   RDW_DEF("hi", 0x4218c, "red_hi1_cfg_eth_type_stag","", 0xffff, 0x88a8, "cfg")
   RDW_DEF_FLD( 0x4218c, "",15,0, "ethertype for stag packets""", "" )
   RDW_DEF("hi", 0x4418c, "red_hi2_cfg_eth_type_stag","", 0xffff, 0x88a8, "cfg")
   RDW_DEF_FLD( 0x4418c, "",15,0, "ethertype for stag packets""", "" )
   RDW_DEF("hi", 0x4618c, "red_hi3_cfg_eth_type_stag","", 0xffff, 0x88a8, "cfg")
   RDW_DEF_FLD( 0x4618c, "",15,0, "ethertype for stag packets""", "" )
   RDW_DEF("hi", 0x4818c, "red_hi4_cfg_eth_type_stag","", 0xffff, 0x88a8, "cfg")
   RDW_DEF_FLD( 0x4818c, "",15,0, "ethertype for stag packets""", "" )
   RDW_DEF("hi", 0x4a18c, "red_hi5_cfg_eth_type_stag","", 0xffff, 0x88a8, "cfg")
   RDW_DEF_FLD( 0x4a18c, "",15,0, "ethertype for stag packets""", "" )
   RDW_DEF("hi", 0x4c18c, "red_hi6_cfg_eth_type_stag","", 0xffff, 0x88a8, "cfg")
   RDW_DEF_FLD( 0x4c18c, "",15,0, "ethertype for stag packets""", "" )
   RDW_DEF("hi", 0x4e18c, "red_hi7_cfg_eth_type_stag","", 0xffff, 0x88a8, "cfg")
   RDW_DEF_FLD( 0x4e18c, "",15,0, "ethertype for stag packets""", "" )


   RDW_DEF("hi", 0x4018d, "red_hi0_cfg_eth_type_cmd","", 0xffff, 0x8850, "cfg")
   RDW_DEF_FLD( 0x4018d, "",15,0, "cisco metadata ethertype""", "" )
   RDW_DEF("hi", 0x4218d, "red_hi1_cfg_eth_type_cmd","", 0xffff, 0x8850, "cfg")
   RDW_DEF_FLD( 0x4218d, "",15,0, "cisco metadata ethertype""", "" )
   RDW_DEF("hi", 0x4418d, "red_hi2_cfg_eth_type_cmd","", 0xffff, 0x8850, "cfg")
   RDW_DEF_FLD( 0x4418d, "",15,0, "cisco metadata ethertype""", "" )
   RDW_DEF("hi", 0x4618d, "red_hi3_cfg_eth_type_cmd","", 0xffff, 0x8850, "cfg")
   RDW_DEF_FLD( 0x4618d, "",15,0, "cisco metadata ethertype""", "" )
   RDW_DEF("hi", 0x4818d, "red_hi4_cfg_eth_type_cmd","", 0xffff, 0x8850, "cfg")
   RDW_DEF_FLD( 0x4818d, "",15,0, "cisco metadata ethertype""", "" )
   RDW_DEF("hi", 0x4a18d, "red_hi5_cfg_eth_type_cmd","", 0xffff, 0x8850, "cfg")
   RDW_DEF_FLD( 0x4a18d, "",15,0, "cisco metadata ethertype""", "" )
   RDW_DEF("hi", 0x4c18d, "red_hi6_cfg_eth_type_cmd","", 0xffff, 0x8850, "cfg")
   RDW_DEF_FLD( 0x4c18d, "",15,0, "cisco metadata ethertype""", "" )
   RDW_DEF("hi", 0x4e18d, "red_hi7_cfg_eth_type_cmd","", 0xffff, 0x8850, "cfg")
   RDW_DEF_FLD( 0x4e18d, "",15,0, "cisco metadata ethertype""", "" )


   RDW_DEF("hi", 0x4018e, "red_hi0_cfg_eth_type_cmtag","", 0xffff, 0x8904, "cfg")
   RDW_DEF_FLD( 0x4018e, "",15,0, "cmtag (RLT) tag ethertype""", "" )
   RDW_DEF("hi", 0x4218e, "red_hi1_cfg_eth_type_cmtag","", 0xffff, 0x8904, "cfg")
   RDW_DEF_FLD( 0x4218e, "",15,0, "cmtag (RLT) tag ethertype""", "" )
   RDW_DEF("hi", 0x4418e, "red_hi2_cfg_eth_type_cmtag","", 0xffff, 0x8904, "cfg")
   RDW_DEF_FLD( 0x4418e, "",15,0, "cmtag (RLT) tag ethertype""", "" )
   RDW_DEF("hi", 0x4618e, "red_hi3_cfg_eth_type_cmtag","", 0xffff, 0x8904, "cfg")
   RDW_DEF_FLD( 0x4618e, "",15,0, "cmtag (RLT) tag ethertype""", "" )
   RDW_DEF("hi", 0x4818e, "red_hi4_cfg_eth_type_cmtag","", 0xffff, 0x8904, "cfg")
   RDW_DEF_FLD( 0x4818e, "",15,0, "cmtag (RLT) tag ethertype""", "" )
   RDW_DEF("hi", 0x4a18e, "red_hi5_cfg_eth_type_cmtag","", 0xffff, 0x8904, "cfg")
   RDW_DEF_FLD( 0x4a18e, "",15,0, "cmtag (RLT) tag ethertype""", "" )
   RDW_DEF("hi", 0x4c18e, "red_hi6_cfg_eth_type_cmtag","", 0xffff, 0x8904, "cfg")
   RDW_DEF_FLD( 0x4c18e, "",15,0, "cmtag (RLT) tag ethertype""", "" )
   RDW_DEF("hi", 0x4e18e, "red_hi7_cfg_eth_type_cmtag","", 0xffff, 0x8904, "cfg")
   RDW_DEF_FLD( 0x4e18e, "",15,0, "cmtag (RLT) tag ethertype""", "" )


   RDW_DEF("hi", 0x4018f, "red_hi0_cfg_max_cmd_size","", 0xff, 0x4, "cfg")
   RDW_DEF_FLD( 0x4018f, "",7,0, "maximum cmd size in words""", "" )
   RDW_DEF("hi", 0x4218f, "red_hi1_cfg_max_cmd_size","", 0xff, 0x4, "cfg")
   RDW_DEF_FLD( 0x4218f, "",7,0, "maximum cmd size in words""", "" )
   RDW_DEF("hi", 0x4418f, "red_hi2_cfg_max_cmd_size","", 0xff, 0x4, "cfg")
   RDW_DEF_FLD( 0x4418f, "",7,0, "maximum cmd size in words""", "" )
   RDW_DEF("hi", 0x4618f, "red_hi3_cfg_max_cmd_size","", 0xff, 0x4, "cfg")
   RDW_DEF_FLD( 0x4618f, "",7,0, "maximum cmd size in words""", "" )
   RDW_DEF("hi", 0x4818f, "red_hi4_cfg_max_cmd_size","", 0xff, 0x4, "cfg")
   RDW_DEF_FLD( 0x4818f, "",7,0, "maximum cmd size in words""", "" )
   RDW_DEF("hi", 0x4a18f, "red_hi5_cfg_max_cmd_size","", 0xff, 0x4, "cfg")
   RDW_DEF_FLD( 0x4a18f, "",7,0, "maximum cmd size in words""", "" )
   RDW_DEF("hi", 0x4c18f, "red_hi6_cfg_max_cmd_size","", 0xff, 0x4, "cfg")
   RDW_DEF_FLD( 0x4c18f, "",7,0, "maximum cmd size in words""", "" )
   RDW_DEF("hi", 0x4e18f, "red_hi7_cfg_max_cmd_size","", 0xff, 0x4, "cfg")
   RDW_DEF_FLD( 0x4e18f, "",7,0, "maximum cmd size in words""", "" )


   RDW_DEF("hi", 0x40190, "red_hi0_cfg_debug_port","", 0x3f, 0x0, "cfg")
   RDW_DEF_FLD( 0x40190, "en",0,0, "enable debug port""", "" )
   RDW_DEF_FLD( 0x40190, "select",3,1, "which debug port to select""", "" )
   RDW_DEF_FLD( 0x40190, "fin_enable",4,4, "enable the fin  for debug""", "" )
   RDW_DEF_FLD( 0x40190, "fout_enable",5,5, "enable the fout for debug""", "" )
   RDW_DEF("hi", 0x42190, "red_hi1_cfg_debug_port","", 0x3f, 0x0, "cfg")
   RDW_DEF_FLD( 0x42190, "en",0,0, "enable debug port""", "" )
   RDW_DEF_FLD( 0x42190, "select",3,1, "which debug port to select""", "" )
   RDW_DEF_FLD( 0x42190, "fin_enable",4,4, "enable the fin  for debug""", "" )
   RDW_DEF_FLD( 0x42190, "fout_enable",5,5, "enable the fout for debug""", "" )
   RDW_DEF("hi", 0x44190, "red_hi2_cfg_debug_port","", 0x3f, 0x0, "cfg")
   RDW_DEF_FLD( 0x44190, "en",0,0, "enable debug port""", "" )
   RDW_DEF_FLD( 0x44190, "select",3,1, "which debug port to select""", "" )
   RDW_DEF_FLD( 0x44190, "fin_enable",4,4, "enable the fin  for debug""", "" )
   RDW_DEF_FLD( 0x44190, "fout_enable",5,5, "enable the fout for debug""", "" )
   RDW_DEF("hi", 0x46190, "red_hi3_cfg_debug_port","", 0x3f, 0x0, "cfg")
   RDW_DEF_FLD( 0x46190, "en",0,0, "enable debug port""", "" )
   RDW_DEF_FLD( 0x46190, "select",3,1, "which debug port to select""", "" )
   RDW_DEF_FLD( 0x46190, "fin_enable",4,4, "enable the fin  for debug""", "" )
   RDW_DEF_FLD( 0x46190, "fout_enable",5,5, "enable the fout for debug""", "" )
   RDW_DEF("hi", 0x48190, "red_hi4_cfg_debug_port","", 0x3f, 0x0, "cfg")
   RDW_DEF_FLD( 0x48190, "en",0,0, "enable debug port""", "" )
   RDW_DEF_FLD( 0x48190, "select",3,1, "which debug port to select""", "" )
   RDW_DEF_FLD( 0x48190, "fin_enable",4,4, "enable the fin  for debug""", "" )
   RDW_DEF_FLD( 0x48190, "fout_enable",5,5, "enable the fout for debug""", "" )
   RDW_DEF("hi", 0x4a190, "red_hi5_cfg_debug_port","", 0x3f, 0x0, "cfg")
   RDW_DEF_FLD( 0x4a190, "en",0,0, "enable debug port""", "" )
   RDW_DEF_FLD( 0x4a190, "select",3,1, "which debug port to select""", "" )
   RDW_DEF_FLD( 0x4a190, "fin_enable",4,4, "enable the fin  for debug""", "" )
   RDW_DEF_FLD( 0x4a190, "fout_enable",5,5, "enable the fout for debug""", "" )
   RDW_DEF("hi", 0x4c190, "red_hi6_cfg_debug_port","", 0x3f, 0x0, "cfg")
   RDW_DEF_FLD( 0x4c190, "en",0,0, "enable debug port""", "" )
   RDW_DEF_FLD( 0x4c190, "select",3,1, "which debug port to select""", "" )
   RDW_DEF_FLD( 0x4c190, "fin_enable",4,4, "enable the fin  for debug""", "" )
   RDW_DEF_FLD( 0x4c190, "fout_enable",5,5, "enable the fout for debug""", "" )
   RDW_DEF("hi", 0x4e190, "red_hi7_cfg_debug_port","", 0x3f, 0x0, "cfg")
   RDW_DEF_FLD( 0x4e190, "en",0,0, "enable debug port""", "" )
   RDW_DEF_FLD( 0x4e190, "select",3,1, "which debug port to select""", "" )
   RDW_DEF_FLD( 0x4e190, "fin_enable",4,4, "enable the fin  for debug""", "" )
   RDW_DEF_FLD( 0x4e190, "fout_enable",5,5, "enable the fout for debug""", "" )


   RDW_DEF("hi", 0x40194, "red_hi0_dhs_fin","dhs frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x40194, "_00",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x40195, "red_hi0_dhs_fin","dhs frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x40195, "_01",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x40196, "red_hi0_dhs_fin","dhs frame in""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x40196, "_02",5,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x42194, "red_hi1_dhs_fin","dhs frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x42194, "_00",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x42195, "red_hi1_dhs_fin","dhs frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x42195, "_01",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x42196, "red_hi1_dhs_fin","dhs frame in""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x42196, "_02",5,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x44194, "red_hi2_dhs_fin","dhs frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x44194, "_00",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x44195, "red_hi2_dhs_fin","dhs frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x44195, "_01",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x44196, "red_hi2_dhs_fin","dhs frame in""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x44196, "_02",5,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x46194, "red_hi3_dhs_fin","dhs frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x46194, "_00",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x46195, "red_hi3_dhs_fin","dhs frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x46195, "_01",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x46196, "red_hi3_dhs_fin","dhs frame in""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x46196, "_02",5,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x48194, "red_hi4_dhs_fin","dhs frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x48194, "_00",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x48195, "red_hi4_dhs_fin","dhs frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x48195, "_01",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x48196, "red_hi4_dhs_fin","dhs frame in""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x48196, "_02",5,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x4a194, "red_hi5_dhs_fin","dhs frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x4a194, "_00",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x4a195, "red_hi5_dhs_fin","dhs frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x4a195, "_01",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x4a196, "red_hi5_dhs_fin","dhs frame in""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x4a196, "_02",5,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x4c194, "red_hi6_dhs_fin","dhs frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x4c194, "_00",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x4c195, "red_hi6_dhs_fin","dhs frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x4c195, "_01",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x4c196, "red_hi6_dhs_fin","dhs frame in""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x4c196, "_02",5,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x4e194, "red_hi7_dhs_fin","dhs frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x4e194, "_00",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x4e195, "red_hi7_dhs_fin","dhs frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x4e195, "_01",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x4e196, "red_hi7_dhs_fin","dhs frame in""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x4e196, "_02",5,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )


   RDW_DEF("hi", 0x40198, "red_hi0_dhs_fout","dhs frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x40198, "_00",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x40199, "red_hi0_dhs_fout","dhs frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x40199, "_01",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x4019a, "red_hi0_dhs_fout","dhs frame out""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x4019a, "_02",5,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x42198, "red_hi1_dhs_fout","dhs frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x42198, "_00",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x42199, "red_hi1_dhs_fout","dhs frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x42199, "_01",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x4219a, "red_hi1_dhs_fout","dhs frame out""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x4219a, "_02",5,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x44198, "red_hi2_dhs_fout","dhs frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x44198, "_00",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x44199, "red_hi2_dhs_fout","dhs frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x44199, "_01",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x4419a, "red_hi2_dhs_fout","dhs frame out""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x4419a, "_02",5,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x46198, "red_hi3_dhs_fout","dhs frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x46198, "_00",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x46199, "red_hi3_dhs_fout","dhs frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x46199, "_01",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x4619a, "red_hi3_dhs_fout","dhs frame out""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x4619a, "_02",5,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x48198, "red_hi4_dhs_fout","dhs frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x48198, "_00",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x48199, "red_hi4_dhs_fout","dhs frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x48199, "_01",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x4819a, "red_hi4_dhs_fout","dhs frame out""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x4819a, "_02",5,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x4a198, "red_hi5_dhs_fout","dhs frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x4a198, "_00",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x4a199, "red_hi5_dhs_fout","dhs frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x4a199, "_01",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x4a19a, "red_hi5_dhs_fout","dhs frame out""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x4a19a, "_02",5,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x4c198, "red_hi6_dhs_fout","dhs frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x4c198, "_00",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x4c199, "red_hi6_dhs_fout","dhs frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x4c199, "_01",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x4c19a, "red_hi6_dhs_fout","dhs frame out""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x4c19a, "_02",5,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x4e198, "red_hi7_dhs_fout","dhs frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x4e198, "_00",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x4e199, "red_hi7_dhs_fout","dhs frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x4e199, "_01",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("hi", 0x4e19a, "red_hi7_dhs_fout","dhs frame out""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x4e19a, "_02",5,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )


   RDW_DEF("hi", 0x4019b, "red_hi0_hi_version","", 0xffffffff, 0x71002, "cfg")
   RDW_DEF_FLD( 0x4019b, "",31,0, "date version of misc block""", "" )
   RDW_DEF("hi", 0x4219b, "red_hi1_hi_version","", 0xffffffff, 0x71002, "cfg")
   RDW_DEF_FLD( 0x4219b, "",31,0, "date version of misc block""", "" )
   RDW_DEF("hi", 0x4419b, "red_hi2_hi_version","", 0xffffffff, 0x71002, "cfg")
   RDW_DEF_FLD( 0x4419b, "",31,0, "date version of misc block""", "" )
   RDW_DEF("hi", 0x4619b, "red_hi3_hi_version","", 0xffffffff, 0x71002, "cfg")
   RDW_DEF_FLD( 0x4619b, "",31,0, "date version of misc block""", "" )
   RDW_DEF("hi", 0x4819b, "red_hi4_hi_version","", 0xffffffff, 0x71002, "cfg")
   RDW_DEF_FLD( 0x4819b, "",31,0, "date version of misc block""", "" )
   RDW_DEF("hi", 0x4a19b, "red_hi5_hi_version","", 0xffffffff, 0x71002, "cfg")
   RDW_DEF_FLD( 0x4a19b, "",31,0, "date version of misc block""", "" )
   RDW_DEF("hi", 0x4c19b, "red_hi6_hi_version","", 0xffffffff, 0x71002, "cfg")
   RDW_DEF_FLD( 0x4c19b, "",31,0, "date version of misc block""", "" )
   RDW_DEF("hi", 0x4e19b, "red_hi7_hi_version","", 0xffffffff, 0x71002, "cfg")
   RDW_DEF_FLD( 0x4e19b, "",31,0, "date version of misc block""", "" )


   RDW_DEF("hi", 0x4019c, "red_hi0_sta_spare2","", 0xffffffff, 0x71002, "sta")
   RDW_DEF_FLD( 0x4019c, "",31,0, "", "" )
   RDW_DEF("hi", 0x4219c, "red_hi1_sta_spare2","", 0xffffffff, 0x71002, "sta")
   RDW_DEF_FLD( 0x4219c, "",31,0, "", "" )
   RDW_DEF("hi", 0x4419c, "red_hi2_sta_spare2","", 0xffffffff, 0x71002, "sta")
   RDW_DEF_FLD( 0x4419c, "",31,0, "", "" )
   RDW_DEF("hi", 0x4619c, "red_hi3_sta_spare2","", 0xffffffff, 0x71002, "sta")
   RDW_DEF_FLD( 0x4619c, "",31,0, "", "" )
   RDW_DEF("hi", 0x4819c, "red_hi4_sta_spare2","", 0xffffffff, 0x71002, "sta")
   RDW_DEF_FLD( 0x4819c, "",31,0, "", "" )
   RDW_DEF("hi", 0x4a19c, "red_hi5_sta_spare2","", 0xffffffff, 0x71002, "sta")
   RDW_DEF_FLD( 0x4a19c, "",31,0, "", "" )
   RDW_DEF("hi", 0x4c19c, "red_hi6_sta_spare2","", 0xffffffff, 0x71002, "sta")
   RDW_DEF_FLD( 0x4c19c, "",31,0, "", "" )
   RDW_DEF("hi", 0x4e19c, "red_hi7_sta_spare2","", 0xffffffff, 0x71002, "sta")
   RDW_DEF_FLD( 0x4e19c, "",31,0, "", "" )


   RDW_DEF("ni", 0x50000, "red_ni0_mac_cfg","MAC config""", 0xffffffff, 0xc803740c, "cfg")
   RDW_DEF_FLD( 0x50000, "tx_ipg_length",6,0, "ipg in 8 bit units""", "" )
   RDW_DEF_FLD( 0x50000, "enable_rx",7,7, "enable receive""", "" )
   RDW_DEF_FLD( 0x50000, "enable_tx",8,8, "enable transmit""", "" )
   RDW_DEF_FLD( 0x50000, "mac_mode",9,9, "set to 0 for LAN mode, 1 for WAN mode""", "" )
   RDW_DEF_FLD( 0x50000, "promis_en",10,10, "enable mac promiscous operation""", "" )
   RDW_DEF_FLD( 0x50000, "pad_en",11,11, "enable frame padding""", "" )
   RDW_DEF_FLD( 0x50000, "crc_fwd",12,12, "set to 1 to forward CRC with frame""", "" )
   RDW_DEF_FLD( 0x50000, "pause_fwd",13,13, "set to 1 to forward pause frames to user application""", "" )
   RDW_DEF_FLD( 0x50000, "pause_ignore",14,14, "set to 1 to ignore pause frames""", "" )
   RDW_DEF_FLD( 0x50000, "tx_addr_ins",15,15, "transmit MAC address insertion""", "" )
   RDW_DEF_FLD( 0x50000, "cmd_frm_ena",16,16, "when set, all command frames are accepted""", "" )
   RDW_DEF_FLD( 0x50000, "rx_err_frm_disc",17,17, "when set, errored frames are discarded""", "" )
   RDW_DEF_FLD( 0x50000, "force_send_idle",18,18, "Force continous idle generation""", "" )
   RDW_DEF_FLD( 0x50000, "force_send_rf",19,19, "Force continous rf generation""", "" )
   RDW_DEF_FLD( 0x50000, "no_lgth_check",20,20, "when set to 1, payload length check is disabled""", "" )
   RDW_DEF_FLD( 0x50000, "tx_scramble_en",21,21, "when set to 1, enable tx scrambler""", "" )
   RDW_DEF_FLD( 0x50000, "tx_dynamic_map_en",22,22, "when set to 1, enable tx lane dynamic mapping""", "" )
   RDW_DEF_FLD( 0x50000, "rx_scramble_en",23,23, "when set to 1, enable rx scrambler""", "" )
   RDW_DEF_FLD( 0x50000, "rx_dynamic_map_en",24,24, "when set to 1, enable rx lane dynamic mapping""", "" )
   RDW_DEF_FLD( 0x50000, "rx0_lane_map",26,25, "rx lane0 mapping""", "" )
   RDW_DEF_FLD( 0x50000, "rx1_lane_map",28,27, "rx lane1 mapping""", "" )
   RDW_DEF_FLD( 0x50000, "rx2_lane_map",30,29, "rx lane2 mapping""", "" )
   RDW_DEF_FLD( 0x50000, "rx3_lane_map_00",31,31, "rx lane3 mapping""", "" )
   RDW_DEF("ni", 0x50001, "red_ni0_mac_cfg","MAC config""", 0x1, 0x1, "cfg")
   RDW_DEF_FLD( 0x50001, "rx3_lane_map_01",0,0, "rx lane3 mapping""", "" )
   RDW_DEF("ni", 0x52000, "red_ni1_mac_cfg","MAC config""", 0xffffffff, 0xc803740c, "cfg")
   RDW_DEF_FLD( 0x52000, "tx_ipg_length",6,0, "ipg in 8 bit units""", "" )
   RDW_DEF_FLD( 0x52000, "enable_rx",7,7, "enable receive""", "" )
   RDW_DEF_FLD( 0x52000, "enable_tx",8,8, "enable transmit""", "" )
   RDW_DEF_FLD( 0x52000, "mac_mode",9,9, "set to 0 for LAN mode, 1 for WAN mode""", "" )
   RDW_DEF_FLD( 0x52000, "promis_en",10,10, "enable mac promiscous operation""", "" )
   RDW_DEF_FLD( 0x52000, "pad_en",11,11, "enable frame padding""", "" )
   RDW_DEF_FLD( 0x52000, "crc_fwd",12,12, "set to 1 to forward CRC with frame""", "" )
   RDW_DEF_FLD( 0x52000, "pause_fwd",13,13, "set to 1 to forward pause frames to user application""", "" )
   RDW_DEF_FLD( 0x52000, "pause_ignore",14,14, "set to 1 to ignore pause frames""", "" )
   RDW_DEF_FLD( 0x52000, "tx_addr_ins",15,15, "transmit MAC address insertion""", "" )
   RDW_DEF_FLD( 0x52000, "cmd_frm_ena",16,16, "when set, all command frames are accepted""", "" )
   RDW_DEF_FLD( 0x52000, "rx_err_frm_disc",17,17, "when set, errored frames are discarded""", "" )
   RDW_DEF_FLD( 0x52000, "force_send_idle",18,18, "Force continous idle generation""", "" )
   RDW_DEF_FLD( 0x52000, "force_send_rf",19,19, "Force continous rf generation""", "" )
   RDW_DEF_FLD( 0x52000, "no_lgth_check",20,20, "when set to 1, payload length check is disabled""", "" )
   RDW_DEF_FLD( 0x52000, "tx_scramble_en",21,21, "when set to 1, enable tx scrambler""", "" )
   RDW_DEF_FLD( 0x52000, "tx_dynamic_map_en",22,22, "when set to 1, enable tx lane dynamic mapping""", "" )
   RDW_DEF_FLD( 0x52000, "rx_scramble_en",23,23, "when set to 1, enable rx scrambler""", "" )
   RDW_DEF_FLD( 0x52000, "rx_dynamic_map_en",24,24, "when set to 1, enable rx lane dynamic mapping""", "" )
   RDW_DEF_FLD( 0x52000, "rx0_lane_map",26,25, "rx lane0 mapping""", "" )
   RDW_DEF_FLD( 0x52000, "rx1_lane_map",28,27, "rx lane1 mapping""", "" )
   RDW_DEF_FLD( 0x52000, "rx2_lane_map",30,29, "rx lane2 mapping""", "" )
   RDW_DEF_FLD( 0x52000, "rx3_lane_map_00",31,31, "rx lane3 mapping""", "" )
   RDW_DEF("ni", 0x52001, "red_ni1_mac_cfg","MAC config""", 0x1, 0x1, "cfg")
   RDW_DEF_FLD( 0x52001, "rx3_lane_map_01",0,0, "rx lane3 mapping""", "" )
   RDW_DEF("ni", 0x54000, "red_ni2_mac_cfg","MAC config""", 0xffffffff, 0xc803740c, "cfg")
   RDW_DEF_FLD( 0x54000, "tx_ipg_length",6,0, "ipg in 8 bit units""", "" )
   RDW_DEF_FLD( 0x54000, "enable_rx",7,7, "enable receive""", "" )
   RDW_DEF_FLD( 0x54000, "enable_tx",8,8, "enable transmit""", "" )
   RDW_DEF_FLD( 0x54000, "mac_mode",9,9, "set to 0 for LAN mode, 1 for WAN mode""", "" )
   RDW_DEF_FLD( 0x54000, "promis_en",10,10, "enable mac promiscous operation""", "" )
   RDW_DEF_FLD( 0x54000, "pad_en",11,11, "enable frame padding""", "" )
   RDW_DEF_FLD( 0x54000, "crc_fwd",12,12, "set to 1 to forward CRC with frame""", "" )
   RDW_DEF_FLD( 0x54000, "pause_fwd",13,13, "set to 1 to forward pause frames to user application""", "" )
   RDW_DEF_FLD( 0x54000, "pause_ignore",14,14, "set to 1 to ignore pause frames""", "" )
   RDW_DEF_FLD( 0x54000, "tx_addr_ins",15,15, "transmit MAC address insertion""", "" )
   RDW_DEF_FLD( 0x54000, "cmd_frm_ena",16,16, "when set, all command frames are accepted""", "" )
   RDW_DEF_FLD( 0x54000, "rx_err_frm_disc",17,17, "when set, errored frames are discarded""", "" )
   RDW_DEF_FLD( 0x54000, "force_send_idle",18,18, "Force continous idle generation""", "" )
   RDW_DEF_FLD( 0x54000, "force_send_rf",19,19, "Force continous rf generation""", "" )
   RDW_DEF_FLD( 0x54000, "no_lgth_check",20,20, "when set to 1, payload length check is disabled""", "" )
   RDW_DEF_FLD( 0x54000, "tx_scramble_en",21,21, "when set to 1, enable tx scrambler""", "" )
   RDW_DEF_FLD( 0x54000, "tx_dynamic_map_en",22,22, "when set to 1, enable tx lane dynamic mapping""", "" )
   RDW_DEF_FLD( 0x54000, "rx_scramble_en",23,23, "when set to 1, enable rx scrambler""", "" )
   RDW_DEF_FLD( 0x54000, "rx_dynamic_map_en",24,24, "when set to 1, enable rx lane dynamic mapping""", "" )
   RDW_DEF_FLD( 0x54000, "rx0_lane_map",26,25, "rx lane0 mapping""", "" )
   RDW_DEF_FLD( 0x54000, "rx1_lane_map",28,27, "rx lane1 mapping""", "" )
   RDW_DEF_FLD( 0x54000, "rx2_lane_map",30,29, "rx lane2 mapping""", "" )
   RDW_DEF_FLD( 0x54000, "rx3_lane_map_00",31,31, "rx lane3 mapping""", "" )
   RDW_DEF("ni", 0x54001, "red_ni2_mac_cfg","MAC config""", 0x1, 0x1, "cfg")
   RDW_DEF_FLD( 0x54001, "rx3_lane_map_01",0,0, "rx lane3 mapping""", "" )
   RDW_DEF("ni", 0x56000, "red_ni3_mac_cfg","MAC config""", 0xffffffff, 0xc803740c, "cfg")
   RDW_DEF_FLD( 0x56000, "tx_ipg_length",6,0, "ipg in 8 bit units""", "" )
   RDW_DEF_FLD( 0x56000, "enable_rx",7,7, "enable receive""", "" )
   RDW_DEF_FLD( 0x56000, "enable_tx",8,8, "enable transmit""", "" )
   RDW_DEF_FLD( 0x56000, "mac_mode",9,9, "set to 0 for LAN mode, 1 for WAN mode""", "" )
   RDW_DEF_FLD( 0x56000, "promis_en",10,10, "enable mac promiscous operation""", "" )
   RDW_DEF_FLD( 0x56000, "pad_en",11,11, "enable frame padding""", "" )
   RDW_DEF_FLD( 0x56000, "crc_fwd",12,12, "set to 1 to forward CRC with frame""", "" )
   RDW_DEF_FLD( 0x56000, "pause_fwd",13,13, "set to 1 to forward pause frames to user application""", "" )
   RDW_DEF_FLD( 0x56000, "pause_ignore",14,14, "set to 1 to ignore pause frames""", "" )
   RDW_DEF_FLD( 0x56000, "tx_addr_ins",15,15, "transmit MAC address insertion""", "" )
   RDW_DEF_FLD( 0x56000, "cmd_frm_ena",16,16, "when set, all command frames are accepted""", "" )
   RDW_DEF_FLD( 0x56000, "rx_err_frm_disc",17,17, "when set, errored frames are discarded""", "" )
   RDW_DEF_FLD( 0x56000, "force_send_idle",18,18, "Force continous idle generation""", "" )
   RDW_DEF_FLD( 0x56000, "force_send_rf",19,19, "Force continous rf generation""", "" )
   RDW_DEF_FLD( 0x56000, "no_lgth_check",20,20, "when set to 1, payload length check is disabled""", "" )
   RDW_DEF_FLD( 0x56000, "tx_scramble_en",21,21, "when set to 1, enable tx scrambler""", "" )
   RDW_DEF_FLD( 0x56000, "tx_dynamic_map_en",22,22, "when set to 1, enable tx lane dynamic mapping""", "" )
   RDW_DEF_FLD( 0x56000, "rx_scramble_en",23,23, "when set to 1, enable rx scrambler""", "" )
   RDW_DEF_FLD( 0x56000, "rx_dynamic_map_en",24,24, "when set to 1, enable rx lane dynamic mapping""", "" )
   RDW_DEF_FLD( 0x56000, "rx0_lane_map",26,25, "rx lane0 mapping""", "" )
   RDW_DEF_FLD( 0x56000, "rx1_lane_map",28,27, "rx lane1 mapping""", "" )
   RDW_DEF_FLD( 0x56000, "rx2_lane_map",30,29, "rx lane2 mapping""", "" )
   RDW_DEF_FLD( 0x56000, "rx3_lane_map_00",31,31, "rx lane3 mapping""", "" )
   RDW_DEF("ni", 0x56001, "red_ni3_mac_cfg","MAC config""", 0x1, 0x1, "cfg")
   RDW_DEF_FLD( 0x56001, "rx3_lane_map_01",0,0, "rx lane3 mapping""", "" )


   RDW_DEF("ni", 0x50002, "red_ni0_mac_cfg_ext","MAC extend config""", 0x3fff, 0x20e4, "cfg")
   RDW_DEF_FLD( 0x50002, "tx0_lane_map",1,0, "tx lane0 mapping""", "" )
   RDW_DEF_FLD( 0x50002, "tx1_lane_map",3,2, "tx lane1 mapping""", "" )
   RDW_DEF_FLD( 0x50002, "tx2_lane_map",5,4, "tx lane2 mapping""", "" )
   RDW_DEF_FLD( 0x50002, "tx3_lane_map",7,6, "tx lane3 mapping""", "" )
   RDW_DEF_FLD( 0x50002, "tx_err_chg_dis",8,8, "disable tx error byte replacement for abort packets""", "" )
   RDW_DEF_FLD( 0x50002, "tx_flush",9,9, "enable tx flush for the MAC, this bit should combine with\nconfig bit force_send_idle to flush the packets""", "" )
   RDW_DEF_FLD( 0x50002, "tx_no_drop_on_fault",10,10, "when asserts, dont drop packets when link fault is received,\nset to zero to get the default behavior of vendor MAC""", "" )
   RDW_DEF_FLD( 0x50002, "tx_stop_on_fault",11,11, "when asserts, stop tx when link fault is received until software\nprogram this bit to zero""", "" )
   RDW_DEF_FLD( 0x50002, "force_deskew_err",12,12, "when asserts, force error to deskew to re-deskew after this bit\nis set to 0""", "" )
   RDW_DEF_FLD( 0x50002, "rx_inrange_chk_en",13,13, "when asserts, rx payload lenth is checked if length field is valid""", "" )
   RDW_DEF("ni", 0x52002, "red_ni1_mac_cfg_ext","MAC extend config""", 0x3fff, 0x20e4, "cfg")
   RDW_DEF_FLD( 0x52002, "tx0_lane_map",1,0, "tx lane0 mapping""", "" )
   RDW_DEF_FLD( 0x52002, "tx1_lane_map",3,2, "tx lane1 mapping""", "" )
   RDW_DEF_FLD( 0x52002, "tx2_lane_map",5,4, "tx lane2 mapping""", "" )
   RDW_DEF_FLD( 0x52002, "tx3_lane_map",7,6, "tx lane3 mapping""", "" )
   RDW_DEF_FLD( 0x52002, "tx_err_chg_dis",8,8, "disable tx error byte replacement for abort packets""", "" )
   RDW_DEF_FLD( 0x52002, "tx_flush",9,9, "enable tx flush for the MAC, this bit should combine with\nconfig bit force_send_idle to flush the packets""", "" )
   RDW_DEF_FLD( 0x52002, "tx_no_drop_on_fault",10,10, "when asserts, dont drop packets when link fault is received,\nset to zero to get the default behavior of vendor MAC""", "" )
   RDW_DEF_FLD( 0x52002, "tx_stop_on_fault",11,11, "when asserts, stop tx when link fault is received until software\nprogram this bit to zero""", "" )
   RDW_DEF_FLD( 0x52002, "force_deskew_err",12,12, "when asserts, force error to deskew to re-deskew after this bit\nis set to 0""", "" )
   RDW_DEF_FLD( 0x52002, "rx_inrange_chk_en",13,13, "when asserts, rx payload lenth is checked if length field is valid""", "" )
   RDW_DEF("ni", 0x54002, "red_ni2_mac_cfg_ext","MAC extend config""", 0x3fff, 0x20e4, "cfg")
   RDW_DEF_FLD( 0x54002, "tx0_lane_map",1,0, "tx lane0 mapping""", "" )
   RDW_DEF_FLD( 0x54002, "tx1_lane_map",3,2, "tx lane1 mapping""", "" )
   RDW_DEF_FLD( 0x54002, "tx2_lane_map",5,4, "tx lane2 mapping""", "" )
   RDW_DEF_FLD( 0x54002, "tx3_lane_map",7,6, "tx lane3 mapping""", "" )
   RDW_DEF_FLD( 0x54002, "tx_err_chg_dis",8,8, "disable tx error byte replacement for abort packets""", "" )
   RDW_DEF_FLD( 0x54002, "tx_flush",9,9, "enable tx flush for the MAC, this bit should combine with\nconfig bit force_send_idle to flush the packets""", "" )
   RDW_DEF_FLD( 0x54002, "tx_no_drop_on_fault",10,10, "when asserts, dont drop packets when link fault is received,\nset to zero to get the default behavior of vendor MAC""", "" )
   RDW_DEF_FLD( 0x54002, "tx_stop_on_fault",11,11, "when asserts, stop tx when link fault is received until software\nprogram this bit to zero""", "" )
   RDW_DEF_FLD( 0x54002, "force_deskew_err",12,12, "when asserts, force error to deskew to re-deskew after this bit\nis set to 0""", "" )
   RDW_DEF_FLD( 0x54002, "rx_inrange_chk_en",13,13, "when asserts, rx payload lenth is checked if length field is valid""", "" )
   RDW_DEF("ni", 0x56002, "red_ni3_mac_cfg_ext","MAC extend config""", 0x3fff, 0x20e4, "cfg")
   RDW_DEF_FLD( 0x56002, "tx0_lane_map",1,0, "tx lane0 mapping""", "" )
   RDW_DEF_FLD( 0x56002, "tx1_lane_map",3,2, "tx lane1 mapping""", "" )
   RDW_DEF_FLD( 0x56002, "tx2_lane_map",5,4, "tx lane2 mapping""", "" )
   RDW_DEF_FLD( 0x56002, "tx3_lane_map",7,6, "tx lane3 mapping""", "" )
   RDW_DEF_FLD( 0x56002, "tx_err_chg_dis",8,8, "disable tx error byte replacement for abort packets""", "" )
   RDW_DEF_FLD( 0x56002, "tx_flush",9,9, "enable tx flush for the MAC, this bit should combine with\nconfig bit force_send_idle to flush the packets""", "" )
   RDW_DEF_FLD( 0x56002, "tx_no_drop_on_fault",10,10, "when asserts, dont drop packets when link fault is received,\nset to zero to get the default behavior of vendor MAC""", "" )
   RDW_DEF_FLD( 0x56002, "tx_stop_on_fault",11,11, "when asserts, stop tx when link fault is received until software\nprogram this bit to zero""", "" )
   RDW_DEF_FLD( 0x56002, "force_deskew_err",12,12, "when asserts, force error to deskew to re-deskew after this bit\nis set to 0""", "" )
   RDW_DEF_FLD( 0x56002, "rx_inrange_chk_en",13,13, "when asserts, rx payload lenth is checked if length field is valid""", "" )


   RDW_DEF("ni", 0x50003, "red_ni0_mac_addr_hi","", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x50003, "",15,0, "mac address bits 42:32""", "" )
   RDW_DEF("ni", 0x52003, "red_ni1_mac_addr_hi","", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x52003, "",15,0, "mac address bits 42:32""", "" )
   RDW_DEF("ni", 0x54003, "red_ni2_mac_addr_hi","", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x54003, "",15,0, "mac address bits 42:32""", "" )
   RDW_DEF("ni", 0x56003, "red_ni3_mac_addr_hi","", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x56003, "",15,0, "mac address bits 42:32""", "" )


   RDW_DEF("ni", 0x50004, "red_ni0_mac_addr_lo","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x50004, "",31,0, "mac address bits 31:0""", "" )
   RDW_DEF("ni", 0x52004, "red_ni1_mac_addr_lo","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x52004, "",31,0, "mac address bits 31:0""", "" )
   RDW_DEF("ni", 0x54004, "red_ni2_mac_addr_lo","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x54004, "",31,0, "mac address bits 31:0""", "" )
   RDW_DEF("ni", 0x56004, "red_ni3_mac_addr_lo","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x56004, "",31,0, "mac address bits 31:0""", "" )


   RDW_DEF("ni", 0x50005, "red_ni0_mac_frm_length_max","", 0x7fff, 0x5ee, "cfg")
   RDW_DEF_FLD( 0x50005, "",14,0, " maximum supported frame length""", "" )
   RDW_DEF("ni", 0x52005, "red_ni1_mac_frm_length_max","", 0x7fff, 0x5ee, "cfg")
   RDW_DEF_FLD( 0x52005, "",14,0, " maximum supported frame length""", "" )
   RDW_DEF("ni", 0x54005, "red_ni2_mac_frm_length_max","", 0x7fff, 0x5ee, "cfg")
   RDW_DEF_FLD( 0x54005, "",14,0, " maximum supported frame length""", "" )
   RDW_DEF("ni", 0x56005, "red_ni3_mac_frm_length_max","", 0x7fff, 0x5ee, "cfg")
   RDW_DEF_FLD( 0x56005, "",14,0, " maximum supported frame length""", "" )


   RDW_DEF("ni", 0x50006, "red_ni0_mac_pause_quant","", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x50006, "",15,0, "pause quanta when transmitting pause frames""", "" )
   RDW_DEF("ni", 0x52006, "red_ni1_mac_pause_quant","", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x52006, "",15,0, "pause quanta when transmitting pause frames""", "" )
   RDW_DEF("ni", 0x54006, "red_ni2_mac_pause_quant","", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x54006, "",15,0, "pause quanta when transmitting pause frames""", "" )
   RDW_DEF("ni", 0x56006, "red_ni3_mac_pause_quant","", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x56006, "",15,0, "pause quanta when transmitting pause frames""", "" )


   RDW_DEF("ni", 0x50007, "red_ni0_mac_rx_section","", 0xffffffff, 0x80000, "cfg")
   RDW_DEF_FLD( 0x50007, "e",15,0, "receive fifo section emtpy thresold""", "" )
   RDW_DEF_FLD( 0x50007, "",31,16, "receive fifo section available thresold""", "" )
   RDW_DEF("ni", 0x52007, "red_ni1_mac_rx_section","", 0xffffffff, 0x80000, "cfg")
   RDW_DEF_FLD( 0x52007, "e",15,0, "receive fifo section emtpy thresold""", "" )
   RDW_DEF_FLD( 0x52007, "",31,16, "receive fifo section available thresold""", "" )
   RDW_DEF("ni", 0x54007, "red_ni2_mac_rx_section","", 0xffffffff, 0x80000, "cfg")
   RDW_DEF_FLD( 0x54007, "e",15,0, "receive fifo section emtpy thresold""", "" )
   RDW_DEF_FLD( 0x54007, "",31,16, "receive fifo section available thresold""", "" )
   RDW_DEF("ni", 0x56007, "red_ni3_mac_rx_section","", 0xffffffff, 0x80000, "cfg")
   RDW_DEF_FLD( 0x56007, "e",15,0, "receive fifo section emtpy thresold""", "" )
   RDW_DEF_FLD( 0x56007, "",31,16, "receive fifo section available thresold""", "" )


   RDW_DEF("ni", 0x50008, "red_ni0_mac_tx_section","", 0xffffffff, 0x80004, "cfg")
   RDW_DEF_FLD( 0x50008, "e",15,0, "transmit fifo section empty thresold""", "" )
   RDW_DEF_FLD( 0x50008, "",31,16, "transmit fifo section available thresold""", "" )
   RDW_DEF("ni", 0x52008, "red_ni1_mac_tx_section","", 0xffffffff, 0x80004, "cfg")
   RDW_DEF_FLD( 0x52008, "e",15,0, "transmit fifo section empty thresold""", "" )
   RDW_DEF_FLD( 0x52008, "",31,16, "transmit fifo section available thresold""", "" )
   RDW_DEF("ni", 0x54008, "red_ni2_mac_tx_section","", 0xffffffff, 0x80004, "cfg")
   RDW_DEF_FLD( 0x54008, "e",15,0, "transmit fifo section empty thresold""", "" )
   RDW_DEF_FLD( 0x54008, "",31,16, "transmit fifo section available thresold""", "" )
   RDW_DEF("ni", 0x56008, "red_ni3_mac_tx_section","", 0xffffffff, 0x80004, "cfg")
   RDW_DEF_FLD( 0x56008, "e",15,0, "transmit fifo section empty thresold""", "" )
   RDW_DEF_FLD( 0x56008, "",31,16, "transmit fifo section available thresold""", "" )


   RDW_DEF("ni", 0x50009, "red_ni0_mac_diag","", 0x7ffff, 0x800, "cfg")
   RDW_DEF_FLD( 0x50009, "ins_cont_err",0,0, "insert continous disparity """, "" )
   RDW_DEF_FLD( 0x50009, "ins_disp_err",4,1, "insert disparity error""", "" )
   RDW_DEF_FLD( 0x50009, "ins_inv_code",8,5, "insert invalid code """, "" )
   RDW_DEF_FLD( 0x50009, "inv_code",18,9, "invalid code to insert""", "" )
   RDW_DEF("ni", 0x52009, "red_ni1_mac_diag","", 0x7ffff, 0x800, "cfg")
   RDW_DEF_FLD( 0x52009, "ins_cont_err",0,0, "insert continous disparity """, "" )
   RDW_DEF_FLD( 0x52009, "ins_disp_err",4,1, "insert disparity error""", "" )
   RDW_DEF_FLD( 0x52009, "ins_inv_code",8,5, "insert invalid code """, "" )
   RDW_DEF_FLD( 0x52009, "inv_code",18,9, "invalid code to insert""", "" )
   RDW_DEF("ni", 0x54009, "red_ni2_mac_diag","", 0x7ffff, 0x800, "cfg")
   RDW_DEF_FLD( 0x54009, "ins_cont_err",0,0, "insert continous disparity """, "" )
   RDW_DEF_FLD( 0x54009, "ins_disp_err",4,1, "insert disparity error""", "" )
   RDW_DEF_FLD( 0x54009, "ins_inv_code",8,5, "insert invalid code """, "" )
   RDW_DEF_FLD( 0x54009, "inv_code",18,9, "invalid code to insert""", "" )
   RDW_DEF("ni", 0x56009, "red_ni3_mac_diag","", 0x7ffff, 0x800, "cfg")
   RDW_DEF_FLD( 0x56009, "ins_cont_err",0,0, "insert continous disparity """, "" )
   RDW_DEF_FLD( 0x56009, "ins_disp_err",4,1, "insert disparity error""", "" )
   RDW_DEF_FLD( 0x56009, "ins_inv_code",8,5, "insert invalid code """, "" )
   RDW_DEF_FLD( 0x56009, "inv_code",18,9, "invalid code to insert""", "" )


   RDW_DEF("ni", 0x5000a, "red_ni0_mac_user_pause","", 0xffffffff, RDW_MAC_USER_PAUSE_DFLT, "cfg")
   RDW_DEF_FLD( 0x5000a, "op",15,0, "op to send for user pause""", "" )
   RDW_DEF_FLD( 0x5000a, "type",31,16, "type field for user pause""", "" )
   RDW_DEF("ni", 0x5000b, "red_ni0_mac_user_pause","", 0x3, 0x1, "cfg")
   RDW_DEF_FLD( 0x5000b, "mcast_ena",0,0, "enable multicast reception of user pause frames""", "" )
   RDW_DEF_FLD( 0x5000b, "ucast_ena",1,1, "enable unicast reception of user pause frames""", "" )
   RDW_DEF("ni", 0x5200a, "red_ni1_mac_user_pause","", 0xffffffff, RDW_MAC_USER_PAUSE_DFLT, "cfg")
   RDW_DEF_FLD( 0x5200a, "op",15,0, "op to send for user pause""", "" )
   RDW_DEF_FLD( 0x5200a, "type",31,16, "type field for user pause""", "" )
   RDW_DEF("ni", 0x5200b, "red_ni1_mac_user_pause","", 0x3, 0x1, "cfg")
   RDW_DEF_FLD( 0x5200b, "mcast_ena",0,0, "enable multicast reception of user pause frames""", "" )
   RDW_DEF_FLD( 0x5200b, "ucast_ena",1,1, "enable unicast reception of user pause frames""", "" )
   RDW_DEF("ni", 0x5400a, "red_ni2_mac_user_pause","", 0xffffffff, RDW_MAC_USER_PAUSE_DFLT, "cfg")
   RDW_DEF_FLD( 0x5400a, "op",15,0, "op to send for user pause""", "" )
   RDW_DEF_FLD( 0x5400a, "type",31,16, "type field for user pause""", "" )
   RDW_DEF("ni", 0x5400b, "red_ni2_mac_user_pause","", 0x3, 0x1, "cfg")
   RDW_DEF_FLD( 0x5400b, "mcast_ena",0,0, "enable multicast reception of user pause frames""", "" )
   RDW_DEF_FLD( 0x5400b, "ucast_ena",1,1, "enable unicast reception of user pause frames""", "" )
   RDW_DEF("ni", 0x5600a, "red_ni3_mac_user_pause","", 0xffffffff, RDW_MAC_USER_PAUSE_DFLT, "cfg")
   RDW_DEF_FLD( 0x5600a, "op",15,0, "op to send for user pause""", "" )
   RDW_DEF_FLD( 0x5600a, "type",31,16, "type field for user pause""", "" )
   RDW_DEF("ni", 0x5600b, "red_ni3_mac_user_pause","", 0x3, 0x1, "cfg")
   RDW_DEF_FLD( 0x5600b, "mcast_ena",0,0, "enable multicast reception of user pause frames""", "" )
   RDW_DEF_FLD( 0x5600b, "ucast_ena",1,1, "enable unicast reception of user pause frames""", "" )


   RDW_DEF("ni", 0x5000c, "red_ni0_mac_user_pause_mcast_hi","", 0xffff, RDW_MAC_USER_PAUSE_MCAST_HI_DFLT, "cfg")
   RDW_DEF_FLD( 0x5000c, "",15,0, "bits 47:32 of multicast address for user pause frame""", "" )
   RDW_DEF("ni", 0x5200c, "red_ni1_mac_user_pause_mcast_hi","", 0xffff, RDW_MAC_USER_PAUSE_MCAST_HI_DFLT, "cfg")
   RDW_DEF_FLD( 0x5200c, "",15,0, "bits 47:32 of multicast address for user pause frame""", "" )
   RDW_DEF("ni", 0x5400c, "red_ni2_mac_user_pause_mcast_hi","", 0xffff, RDW_MAC_USER_PAUSE_MCAST_HI_DFLT, "cfg")
   RDW_DEF_FLD( 0x5400c, "",15,0, "bits 47:32 of multicast address for user pause frame""", "" )
   RDW_DEF("ni", 0x5600c, "red_ni3_mac_user_pause_mcast_hi","", 0xffff, RDW_MAC_USER_PAUSE_MCAST_HI_DFLT, "cfg")
   RDW_DEF_FLD( 0x5600c, "",15,0, "bits 47:32 of multicast address for user pause frame""", "" )

   RDW_DEF("ni", 0x5000d, "red_ni0_mac_user_pause_mcast_lo","", 0xffffffff, RDW_MAC_USER_PAUSE_MCAST_DFLT, "cfg")
   RDW_DEF_FLD( 0x5000d, "",31,0, "bits 31:0  of multicast address for user pause frame""", "" )
   RDW_DEF("ni", 0x5200d, "red_ni1_mac_user_pause_mcast_lo","", 0xffffffff, RDW_MAC_USER_PAUSE_MCAST_DFLT, "cfg")
   RDW_DEF_FLD( 0x5200d, "",31,0, "bits 31:0  of multicast address for user pause frame""", "" )
   RDW_DEF("ni", 0x5400d, "red_ni2_mac_user_pause_mcast_lo","", 0xffffffff, RDW_MAC_USER_PAUSE_MCAST_DFLT, "cfg")
   RDW_DEF_FLD( 0x5400d, "",31,0, "bits 31:0  of multicast address for user pause frame""", "" )
   RDW_DEF("ni", 0x5600d, "red_ni3_mac_user_pause_mcast_lo","", 0xffffffff, RDW_MAC_USER_PAUSE_MCAST_DFLT, "cfg")
   RDW_DEF_FLD( 0x5600d, "",31,0, "bits 31:0  of multicast address for user pause frame""", "" )


   RDW_DEF("ni", 0x5000e, "red_ni0_mac_ext_lpbk","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x5000e, "",3,0, " enable external loopback for 10-bit data""", "" )
   RDW_DEF("ni", 0x5200e, "red_ni1_mac_ext_lpbk","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x5200e, "",3,0, " enable external loopback for 10-bit data""", "" )
   RDW_DEF("ni", 0x5400e, "red_ni2_mac_ext_lpbk","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x5400e, "",3,0, " enable external loopback for 10-bit data""", "" )
   RDW_DEF("ni", 0x5600e, "red_ni3_mac_ext_lpbk","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x5600e, "",3,0, " enable external loopback for 10-bit data""", "" )


   RDW_DEF("ni", 0x5000f, "red_ni0_mac_status","MAC status""", 0x7, 0x0, "sta")
   RDW_DEF_FLD( 0x5000f, "loc_fault",0,0, "local fault detected""", "" )
   RDW_DEF_FLD( 0x5000f, "rem_fault",1,1, "remote fault detected""", "" )
   RDW_DEF_FLD( 0x5000f, "pause_on",2,2, "pause pending indication""", "" )
   RDW_DEF("ni", 0x5200f, "red_ni1_mac_status","MAC status""", 0x7, 0x0, "sta")
   RDW_DEF_FLD( 0x5200f, "loc_fault",0,0, "local fault detected""", "" )
   RDW_DEF_FLD( 0x5200f, "rem_fault",1,1, "remote fault detected""", "" )
   RDW_DEF_FLD( 0x5200f, "pause_on",2,2, "pause pending indication""", "" )
   RDW_DEF("ni", 0x5400f, "red_ni2_mac_status","MAC status""", 0x7, 0x0, "sta")
   RDW_DEF_FLD( 0x5400f, "loc_fault",0,0, "local fault detected""", "" )
   RDW_DEF_FLD( 0x5400f, "rem_fault",1,1, "remote fault detected""", "" )
   RDW_DEF_FLD( 0x5400f, "pause_on",2,2, "pause pending indication""", "" )
   RDW_DEF("ni", 0x5600f, "red_ni3_mac_status","MAC status""", 0x7, 0x0, "sta")
   RDW_DEF_FLD( 0x5600f, "loc_fault",0,0, "local fault detected""", "" )
   RDW_DEF_FLD( 0x5600f, "rem_fault",1,1, "remote fault detected""", "" )
   RDW_DEF_FLD( 0x5600f, "pause_on",2,2, "pause pending indication""", "" )


   RDW_DEF("ni", 0x50010, "red_ni0_mac_pcs_status"," XGXS PCS status""", 0x3fffff, 0x0, "sta")
   RDW_DEF_FLD( 0x50010, "align_done",0,0, "alignment complete""", "" )
   RDW_DEF_FLD( 0x50010, "match_fault",1,1, "receive rate matching error""", "" )
   RDW_DEF_FLD( 0x50010, "disp_err",5,2, "disparity error""", "" )
   RDW_DEF_FLD( 0x50010, "char_err",9,6, "character error""", "" )
   RDW_DEF_FLD( 0x50010, "cg_align",13,10, "code group alignment indication""", "" )
   RDW_DEF_FLD( 0x50010, "sync",17,14, "lane syncronization""", "" )
   RDW_DEF_FLD( 0x50010, "pat",21,18, "comma detection indication""", "" )
   RDW_DEF("ni", 0x52010, "red_ni1_mac_pcs_status"," XGXS PCS status""", 0x3fffff, 0x0, "sta")
   RDW_DEF_FLD( 0x52010, "align_done",0,0, "alignment complete""", "" )
   RDW_DEF_FLD( 0x52010, "match_fault",1,1, "receive rate matching error""", "" )
   RDW_DEF_FLD( 0x52010, "disp_err",5,2, "disparity error""", "" )
   RDW_DEF_FLD( 0x52010, "char_err",9,6, "character error""", "" )
   RDW_DEF_FLD( 0x52010, "cg_align",13,10, "code group alignment indication""", "" )
   RDW_DEF_FLD( 0x52010, "sync",17,14, "lane syncronization""", "" )
   RDW_DEF_FLD( 0x52010, "pat",21,18, "comma detection indication""", "" )
   RDW_DEF("ni", 0x54010, "red_ni2_mac_pcs_status"," XGXS PCS status""", 0x3fffff, 0x0, "sta")
   RDW_DEF_FLD( 0x54010, "align_done",0,0, "alignment complete""", "" )
   RDW_DEF_FLD( 0x54010, "match_fault",1,1, "receive rate matching error""", "" )
   RDW_DEF_FLD( 0x54010, "disp_err",5,2, "disparity error""", "" )
   RDW_DEF_FLD( 0x54010, "char_err",9,6, "character error""", "" )
   RDW_DEF_FLD( 0x54010, "cg_align",13,10, "code group alignment indication""", "" )
   RDW_DEF_FLD( 0x54010, "sync",17,14, "lane syncronization""", "" )
   RDW_DEF_FLD( 0x54010, "pat",21,18, "comma detection indication""", "" )
   RDW_DEF("ni", 0x56010, "red_ni3_mac_pcs_status"," XGXS PCS status""", 0x3fffff, 0x0, "sta")
   RDW_DEF_FLD( 0x56010, "align_done",0,0, "alignment complete""", "" )
   RDW_DEF_FLD( 0x56010, "match_fault",1,1, "receive rate matching error""", "" )
   RDW_DEF_FLD( 0x56010, "disp_err",5,2, "disparity error""", "" )
   RDW_DEF_FLD( 0x56010, "char_err",9,6, "character error""", "" )
   RDW_DEF_FLD( 0x56010, "cg_align",13,10, "code group alignment indication""", "" )
   RDW_DEF_FLD( 0x56010, "sync",17,14, "lane syncronization""", "" )
   RDW_DEF_FLD( 0x56010, "pat",21,18, "comma detection indication""", "" )


   RDW_DEF("ni", 0x50011, "red_ni0_mac_cnt_xgbe_stat_p0_tx_octets_ov_inc","total tx octets overflow counter""", 0xf, 0x0, "cnt")
   RDW_DEF_FLD( 0x50011, "",3,0, "total tx octets overflow counter""", "" )
   RDW_DEF("ni", 0x52011, "red_ni1_mac_cnt_xgbe_stat_p0_tx_octets_ov_inc","total tx octets overflow counter""", 0xf, 0x0, "cnt")
   RDW_DEF_FLD( 0x52011, "",3,0, "total tx octets overflow counter""", "" )
   RDW_DEF("ni", 0x54011, "red_ni2_mac_cnt_xgbe_stat_p0_tx_octets_ov_inc","total tx octets overflow counter""", 0xf, 0x0, "cnt")
   RDW_DEF_FLD( 0x54011, "",3,0, "total tx octets overflow counter""", "" )
   RDW_DEF("ni", 0x56011, "red_ni3_mac_cnt_xgbe_stat_p0_tx_octets_ov_inc","total tx octets overflow counter""", 0xf, 0x0, "cnt")
   RDW_DEF_FLD( 0x56011, "",3,0, "total tx octets overflow counter""", "" )


   RDW_DEF("ni", 0x50012, "red_ni0_mac_cnt_xgbe_stat_p0_rx_octets_ov_inc","total rx octets overflow counter""", 0xf, 0x0, "cnt")
   RDW_DEF_FLD( 0x50012, "",3,0, "total rx octets overflow counter""", "" )
   RDW_DEF("ni", 0x52012, "red_ni1_mac_cnt_xgbe_stat_p0_rx_octets_ov_inc","total rx octets overflow counter""", 0xf, 0x0, "cnt")
   RDW_DEF_FLD( 0x52012, "",3,0, "total rx octets overflow counter""", "" )
   RDW_DEF("ni", 0x54012, "red_ni2_mac_cnt_xgbe_stat_p0_rx_octets_ov_inc","total rx octets overflow counter""", 0xf, 0x0, "cnt")
   RDW_DEF_FLD( 0x54012, "",3,0, "total rx octets overflow counter""", "" )
   RDW_DEF("ni", 0x56012, "red_ni3_mac_cnt_xgbe_stat_p0_rx_octets_ov_inc","total rx octets overflow counter""", 0xf, 0x0, "cnt")
   RDW_DEF_FLD( 0x56012, "",3,0, "total rx octets overflow counter""", "" )


   RDW_DEF("ni", 0x50013, "red_ni0_mac_cnt_xgbe_stat_p0_tx_octetsok_ov_inc","total good tx octets overflow counter""", 0xf, 0x0, "cnt")
   RDW_DEF_FLD( 0x50013, "",3,0, "total good tx octets overflow counter""", "" )
   RDW_DEF("ni", 0x52013, "red_ni1_mac_cnt_xgbe_stat_p0_tx_octetsok_ov_inc","total good tx octets overflow counter""", 0xf, 0x0, "cnt")
   RDW_DEF_FLD( 0x52013, "",3,0, "total good tx octets overflow counter""", "" )
   RDW_DEF("ni", 0x54013, "red_ni2_mac_cnt_xgbe_stat_p0_tx_octetsok_ov_inc","total good tx octets overflow counter""", 0xf, 0x0, "cnt")
   RDW_DEF_FLD( 0x54013, "",3,0, "total good tx octets overflow counter""", "" )
   RDW_DEF("ni", 0x56013, "red_ni3_mac_cnt_xgbe_stat_p0_tx_octetsok_ov_inc","total good tx octets overflow counter""", 0xf, 0x0, "cnt")
   RDW_DEF_FLD( 0x56013, "",3,0, "total good tx octets overflow counter""", "" )


   RDW_DEF("ni", 0x50014, "red_ni0_mac_cnt_xgbe_stat_p0_rx_octetsok_ov_inc","total good rx octets overflow counter""", 0xf, 0x0, "cnt")
   RDW_DEF_FLD( 0x50014, "",3,0, "total good rx octets overflow counter""", "" )
   RDW_DEF("ni", 0x52014, "red_ni1_mac_cnt_xgbe_stat_p0_rx_octetsok_ov_inc","total good rx octets overflow counter""", 0xf, 0x0, "cnt")
   RDW_DEF_FLD( 0x52014, "",3,0, "total good rx octets overflow counter""", "" )
   RDW_DEF("ni", 0x54014, "red_ni2_mac_cnt_xgbe_stat_p0_rx_octetsok_ov_inc","total good rx octets overflow counter""", 0xf, 0x0, "cnt")
   RDW_DEF_FLD( 0x54014, "",3,0, "total good rx octets overflow counter""", "" )
   RDW_DEF("ni", 0x56014, "red_ni3_mac_cnt_xgbe_stat_p0_rx_octetsok_ov_inc","total good rx octets overflow counter""", 0xf, 0x0, "cnt")
   RDW_DEF_FLD( 0x56014, "",3,0, "total good rx octets overflow counter""", "" )


   RDW_DEF("ni", 0x50015, "red_ni0_mac_sta_dskwdbg_stm","", 0x7fff, 0x0, "sta")
   RDW_DEF_FLD( 0x50015, "",14,0, "xgxs deskew debug status""", "" )
   RDW_DEF("ni", 0x52015, "red_ni1_mac_sta_dskwdbg_stm","", 0x7fff, 0x0, "sta")
   RDW_DEF_FLD( 0x52015, "",14,0, "xgxs deskew debug status""", "" )
   RDW_DEF("ni", 0x54015, "red_ni2_mac_sta_dskwdbg_stm","", 0x7fff, 0x0, "sta")
   RDW_DEF_FLD( 0x54015, "",14,0, "xgxs deskew debug status""", "" )
   RDW_DEF("ni", 0x56015, "red_ni3_mac_sta_dskwdbg_stm","", 0x7fff, 0x0, "sta")
   RDW_DEF_FLD( 0x56015, "",14,0, "xgxs deskew debug status""", "" )


   RDW_DEF("ni", 0x50016, "red_ni0_sw_rst","", 0x3ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x50016, "port",0,0, "port reset, resets port logic, mac, xgxs, gearboxes and dividers""", "" )
   RDW_DEF_FLD( 0x50016, "xgxs",1,1, "mac reset, resets rx and tx xgxs """, "" )
   RDW_DEF_FLD( 0x50016, "mac",2,2, "mac reset, resets rx and tx mac """, "" )
   RDW_DEF_FLD( 0x50016, "gbox_rx",6,3, "10b->20b converter reset - one per lane""", "" )
   RDW_DEF_FLD( 0x50016, "gbox_tx",10,7, "20b->10b converter reset - one per lane""", "" )
   RDW_DEF_FLD( 0x50016, "clkdiv_rx",14,11, "reset the clock rx serdes clock dividers - one per lane""", "" )
   RDW_DEF_FLD( 0x50016, "clkdiv_tx",15,15, "reset the clock divider for the tx serdes clock divider""", "" )
   RDW_DEF_FLD( 0x50016, "reset_10b20b",16,16, "10b20b reset in pad""", "" )
   RDW_DEF_FLD( 0x50016, "stat",17,17, "reset the stats logic""", "" )
   RDW_DEF("ni", 0x52016, "red_ni1_sw_rst","", 0x3ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x52016, "port",0,0, "port reset, resets port logic, mac, xgxs, gearboxes and dividers""", "" )
   RDW_DEF_FLD( 0x52016, "xgxs",1,1, "mac reset, resets rx and tx xgxs """, "" )
   RDW_DEF_FLD( 0x52016, "mac",2,2, "mac reset, resets rx and tx mac """, "" )
   RDW_DEF_FLD( 0x52016, "gbox_rx",6,3, "10b->20b converter reset - one per lane""", "" )
   RDW_DEF_FLD( 0x52016, "gbox_tx",10,7, "20b->10b converter reset - one per lane""", "" )
   RDW_DEF_FLD( 0x52016, "clkdiv_rx",14,11, "reset the clock rx serdes clock dividers - one per lane""", "" )
   RDW_DEF_FLD( 0x52016, "clkdiv_tx",15,15, "reset the clock divider for the tx serdes clock divider""", "" )
   RDW_DEF_FLD( 0x52016, "reset_10b20b",16,16, "10b20b reset in pad""", "" )
   RDW_DEF_FLD( 0x52016, "stat",17,17, "reset the stats logic""", "" )
   RDW_DEF("ni", 0x54016, "red_ni2_sw_rst","", 0x3ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x54016, "port",0,0, "port reset, resets port logic, mac, xgxs, gearboxes and dividers""", "" )
   RDW_DEF_FLD( 0x54016, "xgxs",1,1, "mac reset, resets rx and tx xgxs """, "" )
   RDW_DEF_FLD( 0x54016, "mac",2,2, "mac reset, resets rx and tx mac """, "" )
   RDW_DEF_FLD( 0x54016, "gbox_rx",6,3, "10b->20b converter reset - one per lane""", "" )
   RDW_DEF_FLD( 0x54016, "gbox_tx",10,7, "20b->10b converter reset - one per lane""", "" )
   RDW_DEF_FLD( 0x54016, "clkdiv_rx",14,11, "reset the clock rx serdes clock dividers - one per lane""", "" )
   RDW_DEF_FLD( 0x54016, "clkdiv_tx",15,15, "reset the clock divider for the tx serdes clock divider""", "" )
   RDW_DEF_FLD( 0x54016, "reset_10b20b",16,16, "10b20b reset in pad""", "" )
   RDW_DEF_FLD( 0x54016, "stat",17,17, "reset the stats logic""", "" )
   RDW_DEF("ni", 0x56016, "red_ni3_sw_rst","", 0x3ffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x56016, "port",0,0, "port reset, resets port logic, mac, xgxs, gearboxes and dividers""", "" )
   RDW_DEF_FLD( 0x56016, "xgxs",1,1, "mac reset, resets rx and tx xgxs """, "" )
   RDW_DEF_FLD( 0x56016, "mac",2,2, "mac reset, resets rx and tx mac """, "" )
   RDW_DEF_FLD( 0x56016, "gbox_rx",6,3, "10b->20b converter reset - one per lane""", "" )
   RDW_DEF_FLD( 0x56016, "gbox_tx",10,7, "20b->10b converter reset - one per lane""", "" )
   RDW_DEF_FLD( 0x56016, "clkdiv_rx",14,11, "reset the clock rx serdes clock dividers - one per lane""", "" )
   RDW_DEF_FLD( 0x56016, "clkdiv_tx",15,15, "reset the clock divider for the tx serdes clock divider""", "" )
   RDW_DEF_FLD( 0x56016, "reset_10b20b",16,16, "10b20b reset in pad""", "" )
   RDW_DEF_FLD( 0x56016, "stat",17,17, "reset the stats logic""", "" )


   RDW_DEF("ni", 0x50017, "red_ni0_pkt_lpbk","", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x50017, "",0,0, "packet based loopback enable""", "" )
   RDW_DEF("ni", 0x52017, "red_ni1_pkt_lpbk","", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x52017, "",0,0, "packet based loopback enable""", "" )
   RDW_DEF("ni", 0x54017, "red_ni2_pkt_lpbk","", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x54017, "",0,0, "packet based loopback enable""", "" )
   RDW_DEF("ni", 0x56017, "red_ni3_pkt_lpbk","", 0x1, 0x0, "cfg")
   RDW_DEF_FLD( 0x56017, "",0,0, "packet based loopback enable""", "" )


   RDW_DEF("ni", 0x50018, "red_ni0_ignore_rx_sig_strength","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x50018, "L0",0,0, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x50018, "L1",1,1, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x50018, "L2",2,2, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x50018, "L3",3,3, "ignore_rx_sig_strength""", "" )
   RDW_DEF("ni", 0x52018, "red_ni1_ignore_rx_sig_strength","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x52018, "L0",0,0, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x52018, "L1",1,1, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x52018, "L2",2,2, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x52018, "L3",3,3, "ignore_rx_sig_strength""", "" )
   RDW_DEF("ni", 0x54018, "red_ni2_ignore_rx_sig_strength","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x54018, "L0",0,0, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x54018, "L1",1,1, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x54018, "L2",2,2, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x54018, "L3",3,3, "ignore_rx_sig_strength""", "" )
   RDW_DEF("ni", 0x56018, "red_ni3_ignore_rx_sig_strength","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x56018, "L0",0,0, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x56018, "L1",1,1, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x56018, "L2",2,2, "ignore_rx_sig_strength""", "" )
   RDW_DEF_FLD( 0x56018, "L3",3,3, "ignore_rx_sig_strength""", "" )


   RDW_DEF("ni", 0x50019, "red_ni0_port_cfg","", 0x1f, 0x0, "cfg")
   RDW_DEF_FLD( 0x50019, "mc_msb",1,0, " upper two bits 14 bit dst_vif to check for multicast lookup""", "" )
   RDW_DEF_FLD( 0x50019, "cmtag_version",3,2, "CMTAG version input to the parser""", "" )
   RDW_DEF_FLD( 0x50019, "tx_err_en",4,4, " when set, any errors will be forwarded to the link,\nresulting in the error code being inserted in the packet""", "" )
   RDW_DEF("ni", 0x52019, "red_ni1_port_cfg","", 0x1f, 0x0, "cfg")
   RDW_DEF_FLD( 0x52019, "mc_msb",1,0, " upper two bits 14 bit dst_vif to check for multicast lookup""", "" )
   RDW_DEF_FLD( 0x52019, "cmtag_version",3,2, "CMTAG version input to the parser""", "" )
   RDW_DEF_FLD( 0x52019, "tx_err_en",4,4, " when set, any errors will be forwarded to the link,\nresulting in the error code being inserted in the packet""", "" )
   RDW_DEF("ni", 0x54019, "red_ni2_port_cfg","", 0x1f, 0x0, "cfg")
   RDW_DEF_FLD( 0x54019, "mc_msb",1,0, " upper two bits 14 bit dst_vif to check for multicast lookup""", "" )
   RDW_DEF_FLD( 0x54019, "cmtag_version",3,2, "CMTAG version input to the parser""", "" )
   RDW_DEF_FLD( 0x54019, "tx_err_en",4,4, " when set, any errors will be forwarded to the link,\nresulting in the error code being inserted in the packet""", "" )
   RDW_DEF("ni", 0x56019, "red_ni3_port_cfg","", 0x1f, 0x0, "cfg")
   RDW_DEF_FLD( 0x56019, "mc_msb",1,0, " upper two bits 14 bit dst_vif to check for multicast lookup""", "" )
   RDW_DEF_FLD( 0x56019, "cmtag_version",3,2, "CMTAG version input to the parser""", "" )
   RDW_DEF_FLD( 0x56019, "tx_err_en",4,4, " when set, any errors will be forwarded to the link,\nresulting in the error code being inserted in the packet""", "" )


   RDW_DEF("ni", 0x5001a, "red_ni0_fcoe_qtag_rx","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x5001a, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x5001a, "default_dp",3,3, "", "" )
   RDW_DEF("ni", 0x5201a, "red_ni1_fcoe_qtag_rx","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x5201a, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x5201a, "default_dp",3,3, "", "" )
   RDW_DEF("ni", 0x5401a, "red_ni2_fcoe_qtag_rx","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x5401a, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x5401a, "default_dp",3,3, "", "" )
   RDW_DEF("ni", 0x5601a, "red_ni3_fcoe_qtag_rx","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x5601a, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x5601a, "default_dp",3,3, "", "" )


   RDW_DEF("ni", 0x5001b, "red_ni0_fcoe_rx_default_vntag","", 0x7ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5001b, "",10,0, "fcoe forwarding vector to use when ce packets are received\nbit 0:  forward to hif 0\nbit 1:  forward to hif 1\nbit 2:  forward to hif 2\nbit 3:  forward to hif 3\nbit 4:  forward to hif 4\nbit 5:  forward to hif 5\nbit 6:  forward to hif 6\nbit 7:  forward to hif 7\nbit 8:  forward to bif\nbit 9:  forward to cif\nbit 10: multicast drop ok \nIf this register is programmed to zero, and a fcoe ce packet is \nreceived, the hardware will drop the packet and increment the \nCNT_EXPECTED_DROP counter. """, "" )
   RDW_DEF("ni", 0x5201b, "red_ni1_fcoe_rx_default_vntag","", 0x7ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5201b, "",10,0, "fcoe forwarding vector to use when ce packets are received\nbit 0:  forward to hif 0\nbit 1:  forward to hif 1\nbit 2:  forward to hif 2\nbit 3:  forward to hif 3\nbit 4:  forward to hif 4\nbit 5:  forward to hif 5\nbit 6:  forward to hif 6\nbit 7:  forward to hif 7\nbit 8:  forward to bif\nbit 9:  forward to cif\nbit 10: multicast drop ok \nIf this register is programmed to zero, and a fcoe ce packet is \nreceived, the hardware will drop the packet and increment the \nCNT_EXPECTED_DROP counter. """, "" )
   RDW_DEF("ni", 0x5401b, "red_ni2_fcoe_rx_default_vntag","", 0x7ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5401b, "",10,0, "fcoe forwarding vector to use when ce packets are received\nbit 0:  forward to hif 0\nbit 1:  forward to hif 1\nbit 2:  forward to hif 2\nbit 3:  forward to hif 3\nbit 4:  forward to hif 4\nbit 5:  forward to hif 5\nbit 6:  forward to hif 6\nbit 7:  forward to hif 7\nbit 8:  forward to bif\nbit 9:  forward to cif\nbit 10: multicast drop ok \nIf this register is programmed to zero, and a fcoe ce packet is \nreceived, the hardware will drop the packet and increment the \nCNT_EXPECTED_DROP counter. """, "" )
   RDW_DEF("ni", 0x5601b, "red_ni3_fcoe_rx_default_vntag","", 0x7ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5601b, "",10,0, "fcoe forwarding vector to use when ce packets are received\nbit 0:  forward to hif 0\nbit 1:  forward to hif 1\nbit 2:  forward to hif 2\nbit 3:  forward to hif 3\nbit 4:  forward to hif 4\nbit 5:  forward to hif 5\nbit 6:  forward to hif 6\nbit 7:  forward to hif 7\nbit 8:  forward to bif\nbit 9:  forward to cif\nbit 10: multicast drop ok \nIf this register is programmed to zero, and a fcoe ce packet is \nreceived, the hardware will drop the packet and increment the \nCNT_EXPECTED_DROP counter. """, "" )


   RDW_DEF("ni", 0x5001c, "red_ni0_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5001c, "",31,0, "", "" )
   RDW_DEF("ni", 0x5201c, "red_ni1_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5201c, "",31,0, "", "" )
   RDW_DEF("ni", 0x5401c, "red_ni2_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5401c, "",31,0, "", "" )
   RDW_DEF("ni", 0x5601c, "red_ni3_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5601c, "",31,0, "", "" )


   RDW_DEF("ni", 0x5001d, "red_ni0_non_fcoe_qtag_rx","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x5001d, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x5001d, "default_dp",3,3, "", "" )
   RDW_DEF("ni", 0x5201d, "red_ni1_non_fcoe_qtag_rx","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x5201d, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x5201d, "default_dp",3,3, "", "" )
   RDW_DEF("ni", 0x5401d, "red_ni2_non_fcoe_qtag_rx","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x5401d, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x5401d, "default_dp",3,3, "", "" )
   RDW_DEF("ni", 0x5601d, "red_ni3_non_fcoe_qtag_rx","", 0xf, 0x0, "cfg")
   RDW_DEF_FLD( 0x5601d, "default_cos",2,0, "", "" )
   RDW_DEF_FLD( 0x5601d, "default_dp",3,3, "", "" )


   RDW_DEF("ni", 0x5001e, "red_ni0_non_fcoe_rx_default_vntag","", 0x7ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5001e, "",10,0, "non_fcoe forwarding vector to use when ce packets are received\nbit 0:  forward to hif 0\nbit 1:  forward to hif 1\nbit 2:  forward to hif 2\nbit 3:  forward to hif 3\nbit 4:  forward to hif 4\nbit 5:  forward to hif 5\nbit 6:  forward to hif 6\nbit 7:  forward to hif 7\nbit 8:  forward to bif\nbit 9:  forward to cif\nbit 10: multicast drop ok \nIf this register is programmed to zero, and a non_fcoe ce packet is \nreceived, the hardware will drop the packet and increment the \nCNT_EXPECTED_DROP counter. """, "" )
   RDW_DEF("ni", 0x5201e, "red_ni1_non_fcoe_rx_default_vntag","", 0x7ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5201e, "",10,0, "non_fcoe forwarding vector to use when ce packets are received\nbit 0:  forward to hif 0\nbit 1:  forward to hif 1\nbit 2:  forward to hif 2\nbit 3:  forward to hif 3\nbit 4:  forward to hif 4\nbit 5:  forward to hif 5\nbit 6:  forward to hif 6\nbit 7:  forward to hif 7\nbit 8:  forward to bif\nbit 9:  forward to cif\nbit 10: multicast drop ok \nIf this register is programmed to zero, and a non_fcoe ce packet is \nreceived, the hardware will drop the packet and increment the \nCNT_EXPECTED_DROP counter. """, "" )
   RDW_DEF("ni", 0x5401e, "red_ni2_non_fcoe_rx_default_vntag","", 0x7ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5401e, "",10,0, "non_fcoe forwarding vector to use when ce packets are received\nbit 0:  forward to hif 0\nbit 1:  forward to hif 1\nbit 2:  forward to hif 2\nbit 3:  forward to hif 3\nbit 4:  forward to hif 4\nbit 5:  forward to hif 5\nbit 6:  forward to hif 6\nbit 7:  forward to hif 7\nbit 8:  forward to bif\nbit 9:  forward to cif\nbit 10: multicast drop ok \nIf this register is programmed to zero, and a non_fcoe ce packet is \nreceived, the hardware will drop the packet and increment the \nCNT_EXPECTED_DROP counter. """, "" )
   RDW_DEF("ni", 0x5601e, "red_ni3_non_fcoe_rx_default_vntag","", 0x7ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5601e, "",10,0, "non_fcoe forwarding vector to use when ce packets are received\nbit 0:  forward to hif 0\nbit 1:  forward to hif 1\nbit 2:  forward to hif 2\nbit 3:  forward to hif 3\nbit 4:  forward to hif 4\nbit 5:  forward to hif 5\nbit 6:  forward to hif 6\nbit 7:  forward to hif 7\nbit 8:  forward to bif\nbit 9:  forward to cif\nbit 10: multicast drop ok \nIf this register is programmed to zero, and a non_fcoe ce packet is \nreceived, the hardware will drop the packet and increment the \nCNT_EXPECTED_DROP counter. """, "" )


   RDW_DEF("ni", 0x5001f, "red_ni0_non_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5001f, "",31,0, "", "" )
   RDW_DEF("ni", 0x5201f, "red_ni1_non_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5201f, "",31,0, "", "" )
   RDW_DEF("ni", 0x5401f, "red_ni2_non_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5401f, "",31,0, "", "" )
   RDW_DEF("ni", 0x5601f, "red_ni3_non_fcoe_cos2q_map","", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5601f, "",31,0, "", "" )


   RDW_DEF("ni", 0x50020, "red_ni0_flow_control_q2cos_map","q to cos mapping for flow control generated from the NR block""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x50020, "",31,0, "", "" )
   RDW_DEF("ni", 0x52020, "red_ni1_flow_control_q2cos_map","q to cos mapping for flow control generated from the NR block""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x52020, "",31,0, "", "" )
   RDW_DEF("ni", 0x54020, "red_ni2_flow_control_q2cos_map","q to cos mapping for flow control generated from the NR block""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x54020, "",31,0, "", "" )
   RDW_DEF("ni", 0x56020, "red_ni3_flow_control_q2cos_map","q to cos mapping for flow control generated from the NR block""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x56020, "",31,0, "", "" )


   RDW_DEF("ni", 0x50021, "red_ni0_flow_control_cos2q_map","cos to q mapping for flow control sent to the HR block""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x50021, "",31,0, "", "" )
   RDW_DEF("ni", 0x52021, "red_ni1_flow_control_cos2q_map","cos to q mapping for flow control sent to the HR block""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x52021, "",31,0, "", "" )
   RDW_DEF("ni", 0x54021, "red_ni2_flow_control_cos2q_map","cos to q mapping for flow control sent to the HR block""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x54021, "",31,0, "", "" )
   RDW_DEF("ni", 0x56021, "red_ni3_flow_control_cos2q_map","cos to q mapping for flow control sent to the HR block""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x56021, "",31,0, "", "" )


   RDW_DEF("ni", 0x50022, "red_ni0_cfg_pause","pause configuration""", 0xffffff, 0xc00000, "cfg")
   RDW_DEF_FLD( 0x50022, "tx_wfc_en",0,0, "word flow control tx en""", "" )
   RDW_DEF_FLD( 0x50022, "tx_pfc_en",1,1, "802.3x pause tx en""", "" )
   RDW_DEF_FLD( 0x50022, "tx_cfc_en",9,2, "priority pause tx en""", "" )
   RDW_DEF_FLD( 0x50022, "rx_wfc_en",10,10, "word flow control rx en""", "" )
   RDW_DEF_FLD( 0x50022, "rx_pfc_en",11,11, "802.3x pause rx en""", "" )
   RDW_DEF_FLD( 0x50022, "rx_cfc_en",19,12, "priority pause rx en""", "" )
   RDW_DEF_FLD( 0x50022, "fc_timer_only",20,20, "xoff timer sample mode only""", "" )
   RDW_DEF_FLD( 0x50022, "rx_ucast_en",21,21, "rx ucast pause enable""", "" )
   RDW_DEF_FLD( 0x50022, "rx_mc_drop_en",22,22, "rx mc control frame enable""", "" )
   RDW_DEF_FLD( 0x50022, "seq_type",23,23, "seq type for special control word""", "" )
   RDW_DEF("ni", 0x52022, "red_ni1_cfg_pause","pause configuration""", 0xffffff, 0xc00000, "cfg")
   RDW_DEF_FLD( 0x52022, "tx_wfc_en",0,0, "word flow control tx en""", "" )
   RDW_DEF_FLD( 0x52022, "tx_pfc_en",1,1, "802.3x pause tx en""", "" )
   RDW_DEF_FLD( 0x52022, "tx_cfc_en",9,2, "priority pause tx en""", "" )
   RDW_DEF_FLD( 0x52022, "rx_wfc_en",10,10, "word flow control rx en""", "" )
   RDW_DEF_FLD( 0x52022, "rx_pfc_en",11,11, "802.3x pause rx en""", "" )
   RDW_DEF_FLD( 0x52022, "rx_cfc_en",19,12, "priority pause rx en""", "" )
   RDW_DEF_FLD( 0x52022, "fc_timer_only",20,20, "xoff timer sample mode only""", "" )
   RDW_DEF_FLD( 0x52022, "rx_ucast_en",21,21, "rx ucast pause enable""", "" )
   RDW_DEF_FLD( 0x52022, "rx_mc_drop_en",22,22, "rx mc control frame enable""", "" )
   RDW_DEF_FLD( 0x52022, "seq_type",23,23, "seq type for special control word""", "" )
   RDW_DEF("ni", 0x54022, "red_ni2_cfg_pause","pause configuration""", 0xffffff, 0xc00000, "cfg")
   RDW_DEF_FLD( 0x54022, "tx_wfc_en",0,0, "word flow control tx en""", "" )
   RDW_DEF_FLD( 0x54022, "tx_pfc_en",1,1, "802.3x pause tx en""", "" )
   RDW_DEF_FLD( 0x54022, "tx_cfc_en",9,2, "priority pause tx en""", "" )
   RDW_DEF_FLD( 0x54022, "rx_wfc_en",10,10, "word flow control rx en""", "" )
   RDW_DEF_FLD( 0x54022, "rx_pfc_en",11,11, "802.3x pause rx en""", "" )
   RDW_DEF_FLD( 0x54022, "rx_cfc_en",19,12, "priority pause rx en""", "" )
   RDW_DEF_FLD( 0x54022, "fc_timer_only",20,20, "xoff timer sample mode only""", "" )
   RDW_DEF_FLD( 0x54022, "rx_ucast_en",21,21, "rx ucast pause enable""", "" )
   RDW_DEF_FLD( 0x54022, "rx_mc_drop_en",22,22, "rx mc control frame enable""", "" )
   RDW_DEF_FLD( 0x54022, "seq_type",23,23, "seq type for special control word""", "" )
   RDW_DEF("ni", 0x56022, "red_ni3_cfg_pause","pause configuration""", 0xffffff, 0xc00000, "cfg")
   RDW_DEF_FLD( 0x56022, "tx_wfc_en",0,0, "word flow control tx en""", "" )
   RDW_DEF_FLD( 0x56022, "tx_pfc_en",1,1, "802.3x pause tx en""", "" )
   RDW_DEF_FLD( 0x56022, "tx_cfc_en",9,2, "priority pause tx en""", "" )
   RDW_DEF_FLD( 0x56022, "rx_wfc_en",10,10, "word flow control rx en""", "" )
   RDW_DEF_FLD( 0x56022, "rx_pfc_en",11,11, "802.3x pause rx en""", "" )
   RDW_DEF_FLD( 0x56022, "rx_cfc_en",19,12, "priority pause rx en""", "" )
   RDW_DEF_FLD( 0x56022, "fc_timer_only",20,20, "xoff timer sample mode only""", "" )
   RDW_DEF_FLD( 0x56022, "rx_ucast_en",21,21, "rx ucast pause enable""", "" )
   RDW_DEF_FLD( 0x56022, "rx_mc_drop_en",22,22, "rx mc control frame enable""", "" )
   RDW_DEF_FLD( 0x56022, "seq_type",23,23, "seq type for special control word""", "" )


   RDW_DEF("ni", 0x50023, "red_ni0_cfg_pause_cfc_opcode","", 0xffff, 0x101, "cfg")
   RDW_DEF_FLD( 0x50023, "",15,0, "priority pause op code""", "" )
   RDW_DEF("ni", 0x52023, "red_ni1_cfg_pause_cfc_opcode","", 0xffff, 0x101, "cfg")
   RDW_DEF_FLD( 0x52023, "",15,0, "priority pause op code""", "" )
   RDW_DEF("ni", 0x54023, "red_ni2_cfg_pause_cfc_opcode","", 0xffff, 0x101, "cfg")
   RDW_DEF_FLD( 0x54023, "",15,0, "priority pause op code""", "" )
   RDW_DEF("ni", 0x56023, "red_ni3_cfg_pause_cfc_opcode","", 0xffff, 0x101, "cfg")
   RDW_DEF_FLD( 0x56023, "",15,0, "priority pause op code""", "" )


   RDW_DEF("ni", 0x50024, "red_ni0_cfg_pause_time","", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x50024, "",15,0, "802.3x pause tx time""", "" )
   RDW_DEF("ni", 0x52024, "red_ni1_cfg_pause_time","", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x52024, "",15,0, "802.3x pause tx time""", "" )
   RDW_DEF("ni", 0x54024, "red_ni2_cfg_pause_time","", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x54024, "",15,0, "802.3x pause tx time""", "" )
   RDW_DEF("ni", 0x56024, "red_ni3_cfg_pause_time","", 0xffff, 0xffff, "cfg")
   RDW_DEF_FLD( 0x56024, "",15,0, "802.3x pause tx time""", "" )


   RDW_DEF("ni", 0x50025, "red_ni0_cfg_pause_sample_timer","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x50025, "",19,0, "xoff timer sample period""", "" )
   RDW_DEF("ni", 0x52025, "red_ni1_cfg_pause_sample_timer","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x52025, "",19,0, "xoff timer sample period""", "" )
   RDW_DEF("ni", 0x54025, "red_ni2_cfg_pause_sample_timer","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x54025, "",19,0, "xoff timer sample period""", "" )
   RDW_DEF("ni", 0x56025, "red_ni3_cfg_pause_sample_timer","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x56025, "",19,0, "xoff timer sample period""", "" )


   RDW_DEF("ni", 0x50026, "red_ni0_cfg_pause_fc_limit","pause configuration""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x50026, "",19,0, "xoff timer sample rate limit""", "" )
   RDW_DEF("ni", 0x52026, "red_ni1_cfg_pause_fc_limit","pause configuration""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x52026, "",19,0, "xoff timer sample rate limit""", "" )
   RDW_DEF("ni", 0x54026, "red_ni2_cfg_pause_fc_limit","pause configuration""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x54026, "",19,0, "xoff timer sample rate limit""", "" )
   RDW_DEF("ni", 0x56026, "red_ni3_cfg_pause_fc_limit","pause configuration""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x56026, "",19,0, "xoff timer sample rate limit""", "" )


   RDW_DEF("ni", 0x50027, "red_ni0_cfg_pause_0_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x50027, "",3,0, "priority pause class 0 tx time""", "" )
   RDW_DEF("ni", 0x52027, "red_ni1_cfg_pause_0_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x52027, "",3,0, "priority pause class 0 tx time""", "" )
   RDW_DEF("ni", 0x54027, "red_ni2_cfg_pause_0_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x54027, "",3,0, "priority pause class 0 tx time""", "" )
   RDW_DEF("ni", 0x56027, "red_ni3_cfg_pause_0_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x56027, "",3,0, "priority pause class 0 tx time""", "" )


   RDW_DEF("ni", 0x50028, "red_ni0_cfg_pause_1_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x50028, "",3,0, "priority pause class 1 tx time""", "" )
   RDW_DEF("ni", 0x52028, "red_ni1_cfg_pause_1_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x52028, "",3,0, "priority pause class 1 tx time""", "" )
   RDW_DEF("ni", 0x54028, "red_ni2_cfg_pause_1_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x54028, "",3,0, "priority pause class 1 tx time""", "" )
   RDW_DEF("ni", 0x56028, "red_ni3_cfg_pause_1_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x56028, "",3,0, "priority pause class 1 tx time""", "" )


   RDW_DEF("ni", 0x50029, "red_ni0_cfg_pause_2_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x50029, "",3,0, "priority pause class 2 tx time""", "" )
   RDW_DEF("ni", 0x52029, "red_ni1_cfg_pause_2_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x52029, "",3,0, "priority pause class 2 tx time""", "" )
   RDW_DEF("ni", 0x54029, "red_ni2_cfg_pause_2_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x54029, "",3,0, "priority pause class 2 tx time""", "" )
   RDW_DEF("ni", 0x56029, "red_ni3_cfg_pause_2_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x56029, "",3,0, "priority pause class 2 tx time""", "" )


   RDW_DEF("ni", 0x5002a, "red_ni0_cfg_pause_3_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x5002a, "",3,0, "priority pause class 3 tx time""", "" )
   RDW_DEF("ni", 0x5202a, "red_ni1_cfg_pause_3_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x5202a, "",3,0, "priority pause class 3 tx time""", "" )
   RDW_DEF("ni", 0x5402a, "red_ni2_cfg_pause_3_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x5402a, "",3,0, "priority pause class 3 tx time""", "" )
   RDW_DEF("ni", 0x5602a, "red_ni3_cfg_pause_3_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x5602a, "",3,0, "priority pause class 3 tx time""", "" )


   RDW_DEF("ni", 0x5002b, "red_ni0_cfg_pause_4_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x5002b, "",3,0, "priority pause class 4 tx time""", "" )
   RDW_DEF("ni", 0x5202b, "red_ni1_cfg_pause_4_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x5202b, "",3,0, "priority pause class 4 tx time""", "" )
   RDW_DEF("ni", 0x5402b, "red_ni2_cfg_pause_4_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x5402b, "",3,0, "priority pause class 4 tx time""", "" )
   RDW_DEF("ni", 0x5602b, "red_ni3_cfg_pause_4_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x5602b, "",3,0, "priority pause class 4 tx time""", "" )


   RDW_DEF("ni", 0x5002c, "red_ni0_cfg_pause_5_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x5002c, "",3,0, "priority pause class 5 tx time""", "" )
   RDW_DEF("ni", 0x5202c, "red_ni1_cfg_pause_5_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x5202c, "",3,0, "priority pause class 5 tx time""", "" )
   RDW_DEF("ni", 0x5402c, "red_ni2_cfg_pause_5_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x5402c, "",3,0, "priority pause class 5 tx time""", "" )
   RDW_DEF("ni", 0x5602c, "red_ni3_cfg_pause_5_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x5602c, "",3,0, "priority pause class 5 tx time""", "" )


   RDW_DEF("ni", 0x5002d, "red_ni0_cfg_pause_6_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x5002d, "",3,0, "priority pause class 6 tx time""", "" )
   RDW_DEF("ni", 0x5202d, "red_ni1_cfg_pause_6_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x5202d, "",3,0, "priority pause class 6 tx time""", "" )
   RDW_DEF("ni", 0x5402d, "red_ni2_cfg_pause_6_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x5402d, "",3,0, "priority pause class 6 tx time""", "" )
   RDW_DEF("ni", 0x5602d, "red_ni3_cfg_pause_6_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x5602d, "",3,0, "priority pause class 6 tx time""", "" )


   RDW_DEF("ni", 0x5002e, "red_ni0_cfg_pause_7_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x5002e, "",3,0, "priority pause class 7 tx time""", "" )
   RDW_DEF("ni", 0x5202e, "red_ni1_cfg_pause_7_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x5202e, "",3,0, "priority pause class 7 tx time""", "" )
   RDW_DEF("ni", 0x5402e, "red_ni2_cfg_pause_7_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x5402e, "",3,0, "priority pause class 7 tx time""", "" )
   RDW_DEF("ni", 0x5602e, "red_ni3_cfg_pause_7_time","", 0xf, 0xf, "cfg")
   RDW_DEF_FLD( 0x5602e, "",3,0, "priority pause class 7 tx time""", "" )


   RDW_DEF("ni", 0x5002f, "red_ni0_cfg_pause_time_unit","", 0xffff, 0x13, "cfg")
   RDW_DEF_FLD( 0x5002f, "",15,0, "pause time unit for 512 bit time\nvalue = INT(51.2/core_clock_cycle_time(ns))""", "" )
   RDW_DEF("ni", 0x5202f, "red_ni1_cfg_pause_time_unit","", 0xffff, 0x13, "cfg")
   RDW_DEF_FLD( 0x5202f, "",15,0, "pause time unit for 512 bit time\nvalue = INT(51.2/core_clock_cycle_time(ns))""", "" )
   RDW_DEF("ni", 0x5402f, "red_ni2_cfg_pause_time_unit","", 0xffff, 0x13, "cfg")
   RDW_DEF_FLD( 0x5402f, "",15,0, "pause time unit for 512 bit time\nvalue = INT(51.2/core_clock_cycle_time(ns))""", "" )
   RDW_DEF("ni", 0x5602f, "red_ni3_cfg_pause_time_unit","", 0xffff, 0x13, "cfg")
   RDW_DEF_FLD( 0x5602f, "",15,0, "pause time unit for 512 bit time\nvalue = INT(51.2/core_clock_cycle_time(ns))""", "" )


   RDW_DEF("ni", 0x50030, "red_ni0_cfg_pause_frac_time","", 0xff, 0x33, "cfg")
   RDW_DEF_FLD( 0x50030, "",7,0, "fractional portion of time unit\nvalue = FRAC(51.2/core_clock_cycle_time(ns))*256""", "" )
   RDW_DEF("ni", 0x52030, "red_ni1_cfg_pause_frac_time","", 0xff, 0x33, "cfg")
   RDW_DEF_FLD( 0x52030, "",7,0, "fractional portion of time unit\nvalue = FRAC(51.2/core_clock_cycle_time(ns))*256""", "" )
   RDW_DEF("ni", 0x54030, "red_ni2_cfg_pause_frac_time","", 0xff, 0x33, "cfg")
   RDW_DEF_FLD( 0x54030, "",7,0, "fractional portion of time unit\nvalue = FRAC(51.2/core_clock_cycle_time(ns))*256""", "" )
   RDW_DEF("ni", 0x56030, "red_ni3_cfg_pause_frac_time","", 0xff, 0x33, "cfg")
   RDW_DEF_FLD( 0x56030, "",7,0, "fractional portion of time unit\nvalue = FRAC(51.2/core_clock_cycle_time(ns))*256""", "" )


   RDW_DEF("ni", 0x50031, "red_ni0_cfg_rma_sa_hi","pause sa[47:32]""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x50031, "",15,0, "rx sa[47:32]""", "" )
   RDW_DEF("ni", 0x52031, "red_ni1_cfg_rma_sa_hi","pause sa[47:32]""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x52031, "",15,0, "rx sa[47:32]""", "" )
   RDW_DEF("ni", 0x54031, "red_ni2_cfg_rma_sa_hi","pause sa[47:32]""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x54031, "",15,0, "rx sa[47:32]""", "" )
   RDW_DEF("ni", 0x56031, "red_ni3_cfg_rma_sa_hi","pause sa[47:32]""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x56031, "",15,0, "rx sa[47:32]""", "" )


   RDW_DEF("ni", 0x50032, "red_ni0_cfg_rma_sa_lo","pause sa[31:0]""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x50032, "",31,0, "rx sa[31:0]""", "" )
   RDW_DEF("ni", 0x52032, "red_ni1_cfg_rma_sa_lo","pause sa[31:0]""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x52032, "",31,0, "rx sa[31:0]""", "" )
   RDW_DEF("ni", 0x54032, "red_ni2_cfg_rma_sa_lo","pause sa[31:0]""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x54032, "",31,0, "rx sa[31:0]""", "" )
   RDW_DEF("ni", 0x56032, "red_ni3_cfg_rma_sa_lo","pause sa[31:0]""", 0xffffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x56032, "",31,0, "rx sa[31:0]""", "" )


   RDW_DEF("ni", 0x50033, "red_ni0_cfg_code_pause","code for wfc pause""", 0xff, 0x9c, "cfg")
   RDW_DEF_FLD( 0x50033, "",7,0, "pause K character""", "" )
   RDW_DEF("ni", 0x52033, "red_ni1_cfg_code_pause","code for wfc pause""", 0xff, 0x9c, "cfg")
   RDW_DEF_FLD( 0x52033, "",7,0, "pause K character""", "" )
   RDW_DEF("ni", 0x54033, "red_ni2_cfg_code_pause","code for wfc pause""", 0xff, 0x9c, "cfg")
   RDW_DEF_FLD( 0x54033, "",7,0, "pause K character""", "" )
   RDW_DEF("ni", 0x56033, "red_ni3_cfg_code_pause","code for wfc pause""", 0xff, 0x9c, "cfg")
   RDW_DEF_FLD( 0x56033, "",7,0, "pause K character""", "" )


   RDW_DEF("ni", 0x50034, "red_ni0_cfg_code_pause_sub","code for wfc pause""", 0xff, 0xdc, "cfg")
   RDW_DEF_FLD( 0x50034, "",7,0, "pause code sub field""", "" )
   RDW_DEF("ni", 0x52034, "red_ni1_cfg_code_pause_sub","code for wfc pause""", 0xff, 0xdc, "cfg")
   RDW_DEF_FLD( 0x52034, "",7,0, "pause code sub field""", "" )
   RDW_DEF("ni", 0x54034, "red_ni2_cfg_code_pause_sub","code for wfc pause""", 0xff, 0xdc, "cfg")
   RDW_DEF_FLD( 0x54034, "",7,0, "pause code sub field""", "" )
   RDW_DEF("ni", 0x56034, "red_ni3_cfg_code_pause_sub","code for wfc pause""", 0xff, 0xdc, "cfg")
   RDW_DEF_FLD( 0x56034, "",7,0, "pause code sub field""", "" )


   RDW_DEF("ni", 0x50035, "red_ni0_hif0_fwd_range","forward to hif0 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x50035, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x50035, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x52035, "red_ni1_hif0_fwd_range","forward to hif0 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x52035, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x52035, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x54035, "red_ni2_hif0_fwd_range","forward to hif0 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x54035, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x54035, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x56035, "red_ni3_hif0_fwd_range","forward to hif0 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x56035, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x56035, "max_dst_vif",29,16, "", "" )


   RDW_DEF("ni", 0x50036, "red_ni0_hif1_fwd_range","forward to hif1 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x50036, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x50036, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x52036, "red_ni1_hif1_fwd_range","forward to hif1 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x52036, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x52036, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x54036, "red_ni2_hif1_fwd_range","forward to hif1 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x54036, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x54036, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x56036, "red_ni3_hif1_fwd_range","forward to hif1 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x56036, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x56036, "max_dst_vif",29,16, "", "" )


   RDW_DEF("ni", 0x50037, "red_ni0_hif2_fwd_range","forward to hif2 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x50037, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x50037, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x52037, "red_ni1_hif2_fwd_range","forward to hif2 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x52037, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x52037, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x54037, "red_ni2_hif2_fwd_range","forward to hif2 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x54037, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x54037, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x56037, "red_ni3_hif2_fwd_range","forward to hif2 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x56037, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x56037, "max_dst_vif",29,16, "", "" )


   RDW_DEF("ni", 0x50038, "red_ni0_hif3_fwd_range","forward to hif3 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x50038, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x50038, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x52038, "red_ni1_hif3_fwd_range","forward to hif3 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x52038, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x52038, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x54038, "red_ni2_hif3_fwd_range","forward to hif3 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x54038, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x54038, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x56038, "red_ni3_hif3_fwd_range","forward to hif3 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x56038, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x56038, "max_dst_vif",29,16, "", "" )


   RDW_DEF("ni", 0x50039, "red_ni0_hif4_fwd_range","forward to hif4 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x50039, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x50039, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x52039, "red_ni1_hif4_fwd_range","forward to hif4 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x52039, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x52039, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x54039, "red_ni2_hif4_fwd_range","forward to hif4 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x54039, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x54039, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x56039, "red_ni3_hif4_fwd_range","forward to hif4 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x56039, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x56039, "max_dst_vif",29,16, "", "" )


   RDW_DEF("ni", 0x5003a, "red_ni0_hif5_fwd_range","forward to hif5 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5003a, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x5003a, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x5203a, "red_ni1_hif5_fwd_range","forward to hif5 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5203a, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x5203a, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x5403a, "red_ni2_hif5_fwd_range","forward to hif5 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5403a, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x5403a, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x5603a, "red_ni3_hif5_fwd_range","forward to hif5 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5603a, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x5603a, "max_dst_vif",29,16, "", "" )


   RDW_DEF("ni", 0x5003b, "red_ni0_hif6_fwd_range","forward to hif6 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5003b, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x5003b, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x5203b, "red_ni1_hif6_fwd_range","forward to hif6 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5203b, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x5203b, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x5403b, "red_ni2_hif6_fwd_range","forward to hif6 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5403b, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x5403b, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x5603b, "red_ni3_hif6_fwd_range","forward to hif6 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5603b, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x5603b, "max_dst_vif",29,16, "", "" )


   RDW_DEF("ni", 0x5003c, "red_ni0_hif7_fwd_range","forward to hif7 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5003c, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x5003c, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x5203c, "red_ni1_hif7_fwd_range","forward to hif7 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5203c, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x5203c, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x5403c, "red_ni2_hif7_fwd_range","forward to hif7 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5403c, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x5403c, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x5603c, "red_ni3_hif7_fwd_range","forward to hif7 if min_dst_vif <= dvif <= max_dst_vif""", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5603c, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x5603c, "max_dst_vif",29,16, "", "" )


   RDW_DEF("ni", 0x5003d, "red_ni0_bif_fwd_range","", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5003d, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x5003d, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x5203d, "red_ni1_bif_fwd_range","", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5203d, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x5203d, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x5403d, "red_ni2_bif_fwd_range","", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5403d, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x5403d, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x5603d, "red_ni3_bif_fwd_range","", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5603d, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x5603d, "max_dst_vif",29,16, "", "" )


   RDW_DEF("ni", 0x5003e, "red_ni0_cif_fwd_range","", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5003e, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x5003e, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x5203e, "red_ni1_cif_fwd_range","", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5203e, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x5203e, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x5403e, "red_ni2_cif_fwd_range","", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5403e, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x5403e, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x5603e, "red_ni3_cif_fwd_range","", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5603e, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x5603e, "max_dst_vif",29,16, "", "" )


   RDW_DEF("ni", 0x5003f, "red_ni0_drop_fwd_range","", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5003f, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x5003f, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x5203f, "red_ni1_drop_fwd_range","", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5203f, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x5203f, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x5403f, "red_ni2_drop_fwd_range","", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5403f, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x5403f, "max_dst_vif",29,16, "", "" )
   RDW_DEF("ni", 0x5603f, "red_ni3_drop_fwd_range","", 0x3fff3fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x5603f, "min_dst_vif",13,0, "", "" )
   RDW_DEF_FLD( 0x5603f, "max_dst_vif",29,16, "", "" )


   RDW_DEF("ni", 0x50040, "red_ni0_intr","interrupt register""", 0x3fffff, 0x0, "int")
   RDW_DEF_FLD( 0x50040, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x50040, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x50040, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x50040, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x50040, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x50040, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x50040, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x50040, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x50040, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x50040, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x50040, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x50040, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x50040, "fwd_table_miss",18,18, "incorrect dvif msb caused multicast packet to drop""", "" )
   RDW_DEF_FLD( 0x50040, "fwd_table_empty",19,19, "multicast forwarding vector was empty, packet is dropped""", "" )
   RDW_DEF_FLD( 0x50040, "ucast_range_check",20,20, "incoming dvif did not match any vif range""", "" )
   RDW_DEF_FLD( 0x50040, "rx_prsr_l2_err",21,21, "rx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("ni", 0x52040, "red_ni1_intr","interrupt register""", 0x3fffff, 0x0, "int")
   RDW_DEF_FLD( 0x52040, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x52040, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x52040, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x52040, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x52040, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x52040, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x52040, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x52040, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x52040, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x52040, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x52040, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x52040, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x52040, "fwd_table_miss",18,18, "incorrect dvif msb caused multicast packet to drop""", "" )
   RDW_DEF_FLD( 0x52040, "fwd_table_empty",19,19, "multicast forwarding vector was empty, packet is dropped""", "" )
   RDW_DEF_FLD( 0x52040, "ucast_range_check",20,20, "incoming dvif did not match any vif range""", "" )
   RDW_DEF_FLD( 0x52040, "rx_prsr_l2_err",21,21, "rx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("ni", 0x54040, "red_ni2_intr","interrupt register""", 0x3fffff, 0x0, "int")
   RDW_DEF_FLD( 0x54040, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x54040, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x54040, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x54040, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x54040, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x54040, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x54040, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x54040, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x54040, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x54040, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x54040, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x54040, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x54040, "fwd_table_miss",18,18, "incorrect dvif msb caused multicast packet to drop""", "" )
   RDW_DEF_FLD( 0x54040, "fwd_table_empty",19,19, "multicast forwarding vector was empty, packet is dropped""", "" )
   RDW_DEF_FLD( 0x54040, "ucast_range_check",20,20, "incoming dvif did not match any vif range""", "" )
   RDW_DEF_FLD( 0x54040, "rx_prsr_l2_err",21,21, "rx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("ni", 0x56040, "red_ni3_intr","interrupt register""", 0x3fffff, 0x0, "int")
   RDW_DEF_FLD( 0x56040, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x56040, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x56040, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x56040, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x56040, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x56040, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x56040, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x56040, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x56040, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x56040, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x56040, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x56040, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x56040, "fwd_table_miss",18,18, "incorrect dvif msb caused multicast packet to drop""", "" )
   RDW_DEF_FLD( 0x56040, "fwd_table_empty",19,19, "multicast forwarding vector was empty, packet is dropped""", "" )
   RDW_DEF_FLD( 0x56040, "ucast_range_check",20,20, "incoming dvif did not match any vif range""", "" )
   RDW_DEF_FLD( 0x56040, "rx_prsr_l2_err",21,21, "rx parser asserted the info2_hdr_err""", "" )


   RDW_DEF("ni", 0x50041, "red_ni0_intr_msk","interrupt register""", 0x3fffff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x50041, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x50041, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x50041, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x50041, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x50041, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x50041, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x50041, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x50041, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x50041, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x50041, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x50041, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x50041, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x50041, "fwd_table_miss",18,18, "incorrect dvif msb caused multicast packet to drop""", "" )
   RDW_DEF_FLD( 0x50041, "fwd_table_empty",19,19, "multicast forwarding vector was empty, packet is dropped""", "" )
   RDW_DEF_FLD( 0x50041, "ucast_range_check",20,20, "incoming dvif did not match any vif range""", "" )
   RDW_DEF_FLD( 0x50041, "rx_prsr_l2_err",21,21, "rx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("ni", 0x52041, "red_ni1_intr_msk","interrupt register""", 0x3fffff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x52041, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x52041, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x52041, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x52041, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x52041, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x52041, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x52041, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x52041, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x52041, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x52041, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x52041, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x52041, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x52041, "fwd_table_miss",18,18, "incorrect dvif msb caused multicast packet to drop""", "" )
   RDW_DEF_FLD( 0x52041, "fwd_table_empty",19,19, "multicast forwarding vector was empty, packet is dropped""", "" )
   RDW_DEF_FLD( 0x52041, "ucast_range_check",20,20, "incoming dvif did not match any vif range""", "" )
   RDW_DEF_FLD( 0x52041, "rx_prsr_l2_err",21,21, "rx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("ni", 0x54041, "red_ni2_intr_msk","interrupt register""", 0x3fffff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x54041, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x54041, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x54041, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x54041, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x54041, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x54041, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x54041, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x54041, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x54041, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x54041, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x54041, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x54041, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x54041, "fwd_table_miss",18,18, "incorrect dvif msb caused multicast packet to drop""", "" )
   RDW_DEF_FLD( 0x54041, "fwd_table_empty",19,19, "multicast forwarding vector was empty, packet is dropped""", "" )
   RDW_DEF_FLD( 0x54041, "ucast_range_check",20,20, "incoming dvif did not match any vif range""", "" )
   RDW_DEF_FLD( 0x54041, "rx_prsr_l2_err",21,21, "rx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("ni", 0x56041, "red_ni3_intr_msk","interrupt register""", 0x3fffff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x56041, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x56041, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x56041, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x56041, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x56041, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x56041, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x56041, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x56041, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x56041, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x56041, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x56041, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x56041, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x56041, "fwd_table_miss",18,18, "incorrect dvif msb caused multicast packet to drop""", "" )
   RDW_DEF_FLD( 0x56041, "fwd_table_empty",19,19, "multicast forwarding vector was empty, packet is dropped""", "" )
   RDW_DEF_FLD( 0x56041, "ucast_range_check",20,20, "incoming dvif did not match any vif range""", "" )
   RDW_DEF_FLD( 0x56041, "rx_prsr_l2_err",21,21, "rx parser asserted the info2_hdr_err""", "" )


   RDW_DEF("ni", 0x50042, "red_ni0_intr_tst","interrupt register""", 0x3fffff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x50042, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x50042, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x50042, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x50042, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x50042, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x50042, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x50042, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x50042, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x50042, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x50042, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x50042, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x50042, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x50042, "fwd_table_miss",18,18, "incorrect dvif msb caused multicast packet to drop""", "" )
   RDW_DEF_FLD( 0x50042, "fwd_table_empty",19,19, "multicast forwarding vector was empty, packet is dropped""", "" )
   RDW_DEF_FLD( 0x50042, "ucast_range_check",20,20, "incoming dvif did not match any vif range""", "" )
   RDW_DEF_FLD( 0x50042, "rx_prsr_l2_err",21,21, "rx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("ni", 0x52042, "red_ni1_intr_tst","interrupt register""", 0x3fffff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x52042, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x52042, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x52042, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x52042, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x52042, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x52042, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x52042, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x52042, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x52042, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x52042, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x52042, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x52042, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x52042, "fwd_table_miss",18,18, "incorrect dvif msb caused multicast packet to drop""", "" )
   RDW_DEF_FLD( 0x52042, "fwd_table_empty",19,19, "multicast forwarding vector was empty, packet is dropped""", "" )
   RDW_DEF_FLD( 0x52042, "ucast_range_check",20,20, "incoming dvif did not match any vif range""", "" )
   RDW_DEF_FLD( 0x52042, "rx_prsr_l2_err",21,21, "rx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("ni", 0x54042, "red_ni2_intr_tst","interrupt register""", 0x3fffff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x54042, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x54042, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x54042, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x54042, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x54042, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x54042, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x54042, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x54042, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x54042, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x54042, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x54042, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x54042, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x54042, "fwd_table_miss",18,18, "incorrect dvif msb caused multicast packet to drop""", "" )
   RDW_DEF_FLD( 0x54042, "fwd_table_empty",19,19, "multicast forwarding vector was empty, packet is dropped""", "" )
   RDW_DEF_FLD( 0x54042, "ucast_range_check",20,20, "incoming dvif did not match any vif range""", "" )
   RDW_DEF_FLD( 0x54042, "rx_prsr_l2_err",21,21, "rx parser asserted the info2_hdr_err""", "" )
   RDW_DEF("ni", 0x56042, "red_ni3_intr_tst","interrupt register""", 0x3fffff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x56042, "aligned",0,0, "When asserts, XAUI lanes are aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x56042, "not_aligned",1,1, "When asserts, XAUI lanes are not aligned, set on transition""", "" )
   RDW_DEF_FLD( 0x56042, "loc_fault",2,2, "When asserts, local fault link signaling is received\nthis can be either local_fault from PHY or PCS alignment logic""", "" )
   RDW_DEF_FLD( 0x56042, "rem_fault",3,3, "When asserts, received remote fault from remote link partner""", "" )
   RDW_DEF_FLD( 0x56042, "synced",7,4, "When asserts, lanes are synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x56042, "not_synced",11,8, "When asserts, lane are not synchronized, set on transition\nbit 0 : lane 0\nbit 1 : lane 1\nbit 2 : lane 2\nbit 3 : lane 3""", "" )
   RDW_DEF_FLD( 0x56042, "rx_oversize",12,12, "When asserts, MAC receives oversize packets""", "" )
   RDW_DEF_FLD( 0x56042, "rx_undersize",13,13, "When asserts, MAC receives undersize packets""", "" )
   RDW_DEF_FLD( 0x56042, "rx_pkt_crc_err",14,14, "receive packet crc error""", "" )
   RDW_DEF_FLD( 0x56042, "rx_pkt_err",15,15, "receive packet error""", "" )
   RDW_DEF_FLD( 0x56042, "rx_fifo_ovfl",16,16, "receive fifo overflow""", "" )
   RDW_DEF_FLD( 0x56042, "tx_pkt_err",17,17, "tranmit packet error""", "" )
   RDW_DEF_FLD( 0x56042, "fwd_table_miss",18,18, "incorrect dvif msb caused multicast packet to drop""", "" )
   RDW_DEF_FLD( 0x56042, "fwd_table_empty",19,19, "multicast forwarding vector was empty, packet is dropped""", "" )
   RDW_DEF_FLD( 0x56042, "ucast_range_check",20,20, "incoming dvif did not match any vif range""", "" )
   RDW_DEF_FLD( 0x56042, "rx_prsr_l2_err",21,21, "rx parser asserted the info2_hdr_err""", "" )


   RDW_DEF("ni", 0x50043, "red_ni0_cnt_rx_mc_drop","count for mac control frame drops""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x50043, "",31,0, "count for dropped mac control pkt""", "" )
   RDW_DEF("ni", 0x52043, "red_ni1_cnt_rx_mc_drop","count for mac control frame drops""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x52043, "",31,0, "count for dropped mac control pkt""", "" )
   RDW_DEF("ni", 0x54043, "red_ni2_cnt_rx_mc_drop","count for mac control frame drops""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x54043, "",31,0, "count for dropped mac control pkt""", "" )
   RDW_DEF("ni", 0x56043, "red_ni3_cnt_rx_mc_drop","count for mac control frame drops""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x56043, "",31,0, "count for dropped mac control pkt""", "" )


   RDW_DEF("ni", 0x50044, "red_ni0_cnt_mcst_fwd_table_miss_drop","counts packets that are dropped based on incorrect 2 msb dvif """, 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x50044, "",31,0, "", "" )
   RDW_DEF("ni", 0x52044, "red_ni1_cnt_mcst_fwd_table_miss_drop","counts packets that are dropped based on incorrect 2 msb dvif """, 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x52044, "",31,0, "", "" )
   RDW_DEF("ni", 0x54044, "red_ni2_cnt_mcst_fwd_table_miss_drop","counts packets that are dropped based on incorrect 2 msb dvif """, 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x54044, "",31,0, "", "" )
   RDW_DEF("ni", 0x56044, "red_ni3_cnt_mcst_fwd_table_miss_drop","counts packets that are dropped based on incorrect 2 msb dvif """, 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x56044, "",31,0, "", "" )


   RDW_DEF("ni", 0x50045, "red_ni0_cnt_mcst_fwd_table_empty_drop","counts packets that are dropped based on an empty multicast forwarding vector""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x50045, "",31,0, "", "" )
   RDW_DEF("ni", 0x52045, "red_ni1_cnt_mcst_fwd_table_empty_drop","counts packets that are dropped based on an empty multicast forwarding vector""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x52045, "",31,0, "", "" )
   RDW_DEF("ni", 0x54045, "red_ni2_cnt_mcst_fwd_table_empty_drop","counts packets that are dropped based on an empty multicast forwarding vector""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x54045, "",31,0, "", "" )
   RDW_DEF("ni", 0x56045, "red_ni3_cnt_mcst_fwd_table_empty_drop","counts packets that are dropped based on an empty multicast forwarding vector""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x56045, "",31,0, "", "" )


   RDW_DEF("ni", 0x50046, "red_ni0_cnt_ucst_range_check_drop","counts packets that are dropped based on an empty unicast range check""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x50046, "",31,0, "", "" )
   RDW_DEF("ni", 0x52046, "red_ni1_cnt_ucst_range_check_drop","counts packets that are dropped based on an empty unicast range check""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x52046, "",31,0, "", "" )
   RDW_DEF("ni", 0x54046, "red_ni2_cnt_ucst_range_check_drop","counts packets that are dropped based on an empty unicast range check""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x54046, "",31,0, "", "" )
   RDW_DEF("ni", 0x56046, "red_ni3_cnt_ucst_range_check_drop","counts packets that are dropped based on an empty unicast range check""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x56046, "",31,0, "", "" )


   RDW_DEF("ni", 0x50047, "red_ni0_cnt_expected_drop","counts packets that are dropped based on an drop range check""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x50047, "",31,0, "", "" )
   RDW_DEF("ni", 0x52047, "red_ni1_cnt_expected_drop","counts packets that are dropped based on an drop range check""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x52047, "",31,0, "", "" )
   RDW_DEF("ni", 0x54047, "red_ni2_cnt_expected_drop","counts packets that are dropped based on an drop range check""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x54047, "",31,0, "", "" )
   RDW_DEF("ni", 0x56047, "red_ni3_cnt_expected_drop","counts packets that are dropped based on an drop range check""", 0xffffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x56047, "",31,0, "", "" )


   RDW_DEF("ni", 0x50048, "red_ni0_class_xoff","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x50048, "inc_sel0",4,0, "mux sel""", "" )
   RDW_DEF_FLD( 0x50048, "inc_sel1",9,5, "mux sel""", "" )
   RDW_DEF_FLD( 0x50048, "duration_inc_sel0",14,10, "mux sel""", "" )
   RDW_DEF_FLD( 0x50048, "duration_inc_sel1",19,15, "mux sel""", "" )
   RDW_DEF("ni", 0x52048, "red_ni1_class_xoff","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x52048, "inc_sel0",4,0, "mux sel""", "" )
   RDW_DEF_FLD( 0x52048, "inc_sel1",9,5, "mux sel""", "" )
   RDW_DEF_FLD( 0x52048, "duration_inc_sel0",14,10, "mux sel""", "" )
   RDW_DEF_FLD( 0x52048, "duration_inc_sel1",19,15, "mux sel""", "" )
   RDW_DEF("ni", 0x54048, "red_ni2_class_xoff","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x54048, "inc_sel0",4,0, "mux sel""", "" )
   RDW_DEF_FLD( 0x54048, "inc_sel1",9,5, "mux sel""", "" )
   RDW_DEF_FLD( 0x54048, "duration_inc_sel0",14,10, "mux sel""", "" )
   RDW_DEF_FLD( 0x54048, "duration_inc_sel1",19,15, "mux sel""", "" )
   RDW_DEF("ni", 0x56048, "red_ni3_class_xoff","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x56048, "inc_sel0",4,0, "mux sel""", "" )
   RDW_DEF_FLD( 0x56048, "inc_sel1",9,5, "mux sel""", "" )
   RDW_DEF_FLD( 0x56048, "duration_inc_sel0",14,10, "mux sel""", "" )
   RDW_DEF_FLD( 0x56048, "duration_inc_sel1",19,15, "mux sel""", "" )


   RDW_DEF("ni", 0x50049, "red_ni0_CNT_class_xoff_cnt0","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x50049, "",15,0, "tx xon->xoff counter""", "" )
   RDW_DEF("ni", 0x52049, "red_ni1_CNT_class_xoff_cnt0","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x52049, "",15,0, "tx xon->xoff counter""", "" )
   RDW_DEF("ni", 0x54049, "red_ni2_CNT_class_xoff_cnt0","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x54049, "",15,0, "tx xon->xoff counter""", "" )
   RDW_DEF("ni", 0x56049, "red_ni3_CNT_class_xoff_cnt0","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x56049, "",15,0, "tx xon->xoff counter""", "" )


   RDW_DEF("ni", 0x5004a, "red_ni0_CNT_class_xoff_cnt1","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x5004a, "",15,0, "tx xon->xoff counter""", "" )
   RDW_DEF("ni", 0x5204a, "red_ni1_CNT_class_xoff_cnt1","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x5204a, "",15,0, "tx xon->xoff counter""", "" )
   RDW_DEF("ni", 0x5404a, "red_ni2_CNT_class_xoff_cnt1","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x5404a, "",15,0, "tx xon->xoff counter""", "" )
   RDW_DEF("ni", 0x5604a, "red_ni3_CNT_class_xoff_cnt1","xon->xoff counter""", 0xffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x5604a, "",15,0, "tx xon->xoff counter""", "" )


   RDW_DEF("ni", 0x5004b, "red_ni0_CNT_class_xoff_duration_cnt0","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x5004b, "",23,0, "tx xon->xoff counter""", "" )
   RDW_DEF("ni", 0x5204b, "red_ni1_CNT_class_xoff_duration_cnt0","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x5204b, "",23,0, "tx xon->xoff counter""", "" )
   RDW_DEF("ni", 0x5404b, "red_ni2_CNT_class_xoff_duration_cnt0","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x5404b, "",23,0, "tx xon->xoff counter""", "" )
   RDW_DEF("ni", 0x5604b, "red_ni3_CNT_class_xoff_duration_cnt0","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x5604b, "",23,0, "tx xon->xoff counter""", "" )


   RDW_DEF("ni", 0x5004c, "red_ni0_CNT_class_xoff_duration_cnt1","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x5004c, "",23,0, "tx xon->xoff counter""", "" )
   RDW_DEF("ni", 0x5204c, "red_ni1_CNT_class_xoff_duration_cnt1","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x5204c, "",23,0, "tx xon->xoff counter""", "" )
   RDW_DEF("ni", 0x5404c, "red_ni2_CNT_class_xoff_duration_cnt1","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x5404c, "",23,0, "tx xon->xoff counter""", "" )
   RDW_DEF("ni", 0x5604c, "red_ni3_CNT_class_xoff_duration_cnt1","duration counter""", 0xffffff, 0x0, "cnt")
   RDW_DEF_FLD( 0x5604c, "",23,0, "tx xon->xoff counter""", "" )


   RDW_DEF("ni", 0x5004d, "red_ni0_STA_tx_class_xoff","STA for tx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x5004d, "",8,0, "STA for tx class xon/xoff state""", "" )
   RDW_DEF("ni", 0x5204d, "red_ni1_STA_tx_class_xoff","STA for tx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x5204d, "",8,0, "STA for tx class xon/xoff state""", "" )
   RDW_DEF("ni", 0x5404d, "red_ni2_STA_tx_class_xoff","STA for tx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x5404d, "",8,0, "STA for tx class xon/xoff state""", "" )
   RDW_DEF("ni", 0x5604d, "red_ni3_STA_tx_class_xoff","STA for tx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x5604d, "",8,0, "STA for tx class xon/xoff state""", "" )


   RDW_DEF("ni", 0x5004e, "red_ni0_STA_rx_class_xoff","STA for rx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x5004e, "",8,0, "STA for rx class xon/xoff state""", "" )
   RDW_DEF("ni", 0x5204e, "red_ni1_STA_rx_class_xoff","STA for rx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x5204e, "",8,0, "STA for rx class xon/xoff state""", "" )
   RDW_DEF("ni", 0x5404e, "red_ni2_STA_rx_class_xoff","STA for rx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x5404e, "",8,0, "STA for rx class xon/xoff state""", "" )
   RDW_DEF("ni", 0x5604e, "red_ni3_STA_rx_class_xoff","STA for rx xoff""", 0x1ff, 0x0, "sta")
   RDW_DEF_FLD( 0x5604e, "",8,0, "STA for rx class xon/xoff state""", "" )


    RDW_DEF_DHS("ni", 0x50050, "red_ni0_dhs_rx_fcoe_cnt_00", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x50050, "_00",31,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("ni", 0x50051, "red_ni0_dhs_rx_fcoe_cnt_01", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x50051, "_01",3,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("ni", 0x52050, "red_ni1_dhs_rx_fcoe_cnt_00", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x52050, "_00",31,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("ni", 0x52051, "red_ni1_dhs_rx_fcoe_cnt_01", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x52051, "_01",3,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("ni", 0x54050, "red_ni2_dhs_rx_fcoe_cnt_00", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x54050, "_00",31,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("ni", 0x54051, "red_ni2_dhs_rx_fcoe_cnt_01", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x54051, "_01",3,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("ni", 0x56050, "red_ni3_dhs_rx_fcoe_cnt_00", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x56050, "_00",31,0,"fcoe/non fcoe counts.\n","" )
    RDW_DEF_DHS("ni", 0x56051, "red_ni3_dhs_rx_fcoe_cnt_01", "count number of fcoe/non fcoe frames/bytes received on this port""", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x56051, "_01",3,0,"fcoe/non fcoe counts.\n","" )


   RDW_DEF("ni", 0x50058, "red_ni0_sta_stat_upper","upper 4 bits of the dhs_mac_stat""", 0xf, 0x0, "sta")
   RDW_DEF_FLD( 0x50058, "",3,0, "SW can read this after reading the dhs_mac_stat or dhs_fcoe_count to get the\nupper 4 bits of the stats. Other wise the 2nd dhs read will\nget the latest value of the dhs""", "" )
   RDW_DEF("ni", 0x52058, "red_ni1_sta_stat_upper","upper 4 bits of the dhs_mac_stat""", 0xf, 0x0, "sta")
   RDW_DEF_FLD( 0x52058, "",3,0, "SW can read this after reading the dhs_mac_stat or dhs_fcoe_count to get the\nupper 4 bits of the stats. Other wise the 2nd dhs read will\nget the latest value of the dhs""", "" )
   RDW_DEF("ni", 0x54058, "red_ni2_sta_stat_upper","upper 4 bits of the dhs_mac_stat""", 0xf, 0x0, "sta")
   RDW_DEF_FLD( 0x54058, "",3,0, "SW can read this after reading the dhs_mac_stat or dhs_fcoe_count to get the\nupper 4 bits of the stats. Other wise the 2nd dhs read will\nget the latest value of the dhs""", "" )
   RDW_DEF("ni", 0x56058, "red_ni3_sta_stat_upper","upper 4 bits of the dhs_mac_stat""", 0xf, 0x0, "sta")
   RDW_DEF_FLD( 0x56058, "",3,0, "SW can read this after reading the dhs_mac_stat or dhs_fcoe_count to get the\nupper 4 bits of the stats. Other wise the 2nd dhs read will\nget the latest value of the dhs""", "" )


    RDW_DEF_DHS("ni", 0x50080, "red_ni0_dhs_mac_stat_00", "", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x50080, "_00",31,0," access to rmon stats","" )
    RDW_DEF_DHS("ni", 0x50081, "red_ni0_dhs_mac_stat_01", "", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x50081, "_01",3,0," access to rmon stats","" )
    RDW_DEF_DHS("ni", 0x52080, "red_ni1_dhs_mac_stat_00", "", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x52080, "_00",31,0," access to rmon stats","" )
    RDW_DEF_DHS("ni", 0x52081, "red_ni1_dhs_mac_stat_01", "", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x52081, "_01",3,0," access to rmon stats","" )
    RDW_DEF_DHS("ni", 0x54080, "red_ni2_dhs_mac_stat_00", "", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x54080, "_00",31,0," access to rmon stats","" )
    RDW_DEF_DHS("ni", 0x54081, "red_ni2_dhs_mac_stat_01", "", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x54081, "_01",3,0," access to rmon stats","" )
    RDW_DEF_DHS("ni", 0x56080, "red_ni3_dhs_mac_stat_00", "", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x56080, "_00",31,0," access to rmon stats","" )
    RDW_DEF_DHS("ni", 0x56081, "red_ni3_dhs_mac_stat_01", "", 0xf, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x56081, "_01",3,0," access to rmon stats","" )


    RDW_DEF_DHS("ni", 0x50100, "red_ni0_dhs_mdio", "mdio reg""", 0xffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x50100, "",15,0,"mdio access","" )
    RDW_DEF_DHS("ni", 0x52100, "red_ni1_dhs_mdio", "mdio reg""", 0xffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x52100, "",15,0,"mdio access","" )
    RDW_DEF_DHS("ni", 0x54100, "red_ni2_dhs_mdio", "mdio reg""", 0xffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x54100, "",15,0,"mdio access","" )
    RDW_DEF_DHS("ni", 0x56100, "red_ni3_dhs_mdio", "mdio reg""", 0xffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x56100, "",15,0,"mdio access","" )


   RDW_DEF("ni", 0x50104, "red_ni0_mdio_master","", 0x1ffff, 0x16404, "cfg")
   RDW_DEF_FLD( 0x50104, "clk_hold",7,0, "clock control - hold time""", "" )
   RDW_DEF_FLD( 0x50104, "clk_div",15,8, "clock control - clock divide time""", "" )
   RDW_DEF_FLD( 0x50104, "sw_rst",16,16, "When asserts, reset the MDIO logic""", "" )
   RDW_DEF("ni", 0x52104, "red_ni1_mdio_master","", 0x1ffff, 0x16404, "cfg")
   RDW_DEF_FLD( 0x52104, "clk_hold",7,0, "clock control - hold time""", "" )
   RDW_DEF_FLD( 0x52104, "clk_div",15,8, "clock control - clock divide time""", "" )
   RDW_DEF_FLD( 0x52104, "sw_rst",16,16, "When asserts, reset the MDIO logic""", "" )
   RDW_DEF("ni", 0x54104, "red_ni2_mdio_master","", 0x1ffff, 0x16404, "cfg")
   RDW_DEF_FLD( 0x54104, "clk_hold",7,0, "clock control - hold time""", "" )
   RDW_DEF_FLD( 0x54104, "clk_div",15,8, "clock control - clock divide time""", "" )
   RDW_DEF_FLD( 0x54104, "sw_rst",16,16, "When asserts, reset the MDIO logic""", "" )
   RDW_DEF("ni", 0x56104, "red_ni3_mdio_master","", 0x1ffff, 0x16404, "cfg")
   RDW_DEF_FLD( 0x56104, "clk_hold",7,0, "clock control - hold time""", "" )
   RDW_DEF_FLD( 0x56104, "clk_div",15,8, "clock control - clock divide time""", "" )
   RDW_DEF_FLD( 0x56104, "sw_rst",16,16, "When asserts, reset the MDIO logic""", "" )


   RDW_DEF("ni", 0x50105, "red_ni0_cfg_eg_nspi_timer","MAC Rx nspi bus timer. In unit of 256 core clock cycles. Zero==disable""", 0xffff, 0x20, "cfg")
   RDW_DEF_FLD( 0x50105, "",15,0, "", "" )
   RDW_DEF("ni", 0x52105, "red_ni1_cfg_eg_nspi_timer","MAC Rx nspi bus timer. In unit of 256 core clock cycles. Zero==disable""", 0xffff, 0x20, "cfg")
   RDW_DEF_FLD( 0x52105, "",15,0, "", "" )
   RDW_DEF("ni", 0x54105, "red_ni2_cfg_eg_nspi_timer","MAC Rx nspi bus timer. In unit of 256 core clock cycles. Zero==disable""", 0xffff, 0x20, "cfg")
   RDW_DEF_FLD( 0x54105, "",15,0, "", "" )
   RDW_DEF("ni", 0x56105, "red_ni3_cfg_eg_nspi_timer","MAC Rx nspi bus timer. In unit of 256 core clock cycles. Zero==disable""", 0xffff, 0x20, "cfg")
   RDW_DEF_FLD( 0x56105, "",15,0, "", "" )


   RDW_DEF("ni", 0x50106, "red_ni0_cfg","global configuration for Redwood""", 0x1, 0x1, "cfg")
   RDW_DEF_FLD( 0x50106, "drop_on_err",0,0, "when set, error packets will be dropped.\nOtherwise error packets will be forwarded to the ci interface""", "" )
   RDW_DEF("ni", 0x52106, "red_ni1_cfg","global configuration for Redwood""", 0x1, 0x1, "cfg")
   RDW_DEF_FLD( 0x52106, "drop_on_err",0,0, "when set, error packets will be dropped.\nOtherwise error packets will be forwarded to the ci interface""", "" )
   RDW_DEF("ni", 0x54106, "red_ni2_cfg","global configuration for Redwood""", 0x1, 0x1, "cfg")
   RDW_DEF_FLD( 0x54106, "drop_on_err",0,0, "when set, error packets will be dropped.\nOtherwise error packets will be forwarded to the ci interface""", "" )
   RDW_DEF("ni", 0x56106, "red_ni3_cfg","global configuration for Redwood""", 0x1, 0x1, "cfg")
   RDW_DEF_FLD( 0x56106, "drop_on_err",0,0, "when set, error packets will be dropped.\nOtherwise error packets will be forwarded to the ci interface""", "" )


   RDW_DEF("ni", 0x50107, "red_ni0_cfg_eth_type_fcoe","", 0xffff, 0x8906, "cfg")
   RDW_DEF_FLD( 0x50107, "",15,0, "ethertype for fcoe packets""", "" )
   RDW_DEF("ni", 0x52107, "red_ni1_cfg_eth_type_fcoe","", 0xffff, 0x8906, "cfg")
   RDW_DEF_FLD( 0x52107, "",15,0, "ethertype for fcoe packets""", "" )
   RDW_DEF("ni", 0x54107, "red_ni2_cfg_eth_type_fcoe","", 0xffff, 0x8906, "cfg")
   RDW_DEF_FLD( 0x54107, "",15,0, "ethertype for fcoe packets""", "" )
   RDW_DEF("ni", 0x56107, "red_ni3_cfg_eth_type_fcoe","", 0xffff, 0x8906, "cfg")
   RDW_DEF_FLD( 0x56107, "",15,0, "ethertype for fcoe packets""", "" )


   RDW_DEF("ni", 0x50108, "red_ni0_cfg_eth_type_vntag","", 0xffff, 0x564e, "cfg")
   RDW_DEF_FLD( 0x50108, "",15,0, "ethertype for vntag packets""", "" )
   RDW_DEF("ni", 0x52108, "red_ni1_cfg_eth_type_vntag","", 0xffff, 0x564e, "cfg")
   RDW_DEF_FLD( 0x52108, "",15,0, "ethertype for vntag packets""", "" )
   RDW_DEF("ni", 0x54108, "red_ni2_cfg_eth_type_vntag","", 0xffff, 0x564e, "cfg")
   RDW_DEF_FLD( 0x54108, "",15,0, "ethertype for vntag packets""", "" )
   RDW_DEF("ni", 0x56108, "red_ni3_cfg_eth_type_vntag","", 0xffff, 0x564e, "cfg")
   RDW_DEF_FLD( 0x56108, "",15,0, "ethertype for vntag packets""", "" )


   RDW_DEF("ni", 0x50109, "red_ni0_cfg_eth_type_stag","", 0xffff, 0x88a8, "cfg")
   RDW_DEF_FLD( 0x50109, "",15,0, "ethertype for stag packets""", "" )
   RDW_DEF("ni", 0x52109, "red_ni1_cfg_eth_type_stag","", 0xffff, 0x88a8, "cfg")
   RDW_DEF_FLD( 0x52109, "",15,0, "ethertype for stag packets""", "" )
   RDW_DEF("ni", 0x54109, "red_ni2_cfg_eth_type_stag","", 0xffff, 0x88a8, "cfg")
   RDW_DEF_FLD( 0x54109, "",15,0, "ethertype for stag packets""", "" )
   RDW_DEF("ni", 0x56109, "red_ni3_cfg_eth_type_stag","", 0xffff, 0x88a8, "cfg")
   RDW_DEF_FLD( 0x56109, "",15,0, "ethertype for stag packets""", "" )


   RDW_DEF("ni", 0x5010a, "red_ni0_cfg_eth_type_cmd","", 0xffff, 0x8850, "cfg")
   RDW_DEF_FLD( 0x5010a, "",15,0, "cisco metadata ethertype""", "" )
   RDW_DEF("ni", 0x5210a, "red_ni1_cfg_eth_type_cmd","", 0xffff, 0x8850, "cfg")
   RDW_DEF_FLD( 0x5210a, "",15,0, "cisco metadata ethertype""", "" )
   RDW_DEF("ni", 0x5410a, "red_ni2_cfg_eth_type_cmd","", 0xffff, 0x8850, "cfg")
   RDW_DEF_FLD( 0x5410a, "",15,0, "cisco metadata ethertype""", "" )
   RDW_DEF("ni", 0x5610a, "red_ni3_cfg_eth_type_cmd","", 0xffff, 0x8850, "cfg")
   RDW_DEF_FLD( 0x5610a, "",15,0, "cisco metadata ethertype""", "" )


   RDW_DEF("ni", 0x5010b, "red_ni0_cfg_eth_type_cmtag","", 0xffff, 0x8904, "cfg")
   RDW_DEF_FLD( 0x5010b, "",15,0, "cmtag (RLT) tag ethertype""", "" )
   RDW_DEF("ni", 0x5210b, "red_ni1_cfg_eth_type_cmtag","", 0xffff, 0x8904, "cfg")
   RDW_DEF_FLD( 0x5210b, "",15,0, "cmtag (RLT) tag ethertype""", "" )
   RDW_DEF("ni", 0x5410b, "red_ni2_cfg_eth_type_cmtag","", 0xffff, 0x8904, "cfg")
   RDW_DEF_FLD( 0x5410b, "",15,0, "cmtag (RLT) tag ethertype""", "" )
   RDW_DEF("ni", 0x5610b, "red_ni3_cfg_eth_type_cmtag","", 0xffff, 0x8904, "cfg")
   RDW_DEF_FLD( 0x5610b, "",15,0, "cmtag (RLT) tag ethertype""", "" )


   RDW_DEF("ni", 0x5010c, "red_ni0_cfg_max_cmd_size","", 0xff, 0x4, "cfg")
   RDW_DEF_FLD( 0x5010c, "",7,0, "maximum cmd size in words""", "" )
   RDW_DEF("ni", 0x5210c, "red_ni1_cfg_max_cmd_size","", 0xff, 0x4, "cfg")
   RDW_DEF_FLD( 0x5210c, "",7,0, "maximum cmd size in words""", "" )
   RDW_DEF("ni", 0x5410c, "red_ni2_cfg_max_cmd_size","", 0xff, 0x4, "cfg")
   RDW_DEF_FLD( 0x5410c, "",7,0, "maximum cmd size in words""", "" )
   RDW_DEF("ni", 0x5610c, "red_ni3_cfg_max_cmd_size","", 0xff, 0x4, "cfg")
   RDW_DEF_FLD( 0x5610c, "",7,0, "maximum cmd size in words""", "" )


   RDW_DEF("ni", 0x5010d, "red_ni0_cfg_debug_port","", 0x3f, 0x0, "cfg")
   RDW_DEF_FLD( 0x5010d, "en",0,0, "enable debug port""", "" )
   RDW_DEF_FLD( 0x5010d, "select",3,1, "which debug port to select""", "" )
   RDW_DEF_FLD( 0x5010d, "fin_enable",4,4, "enable the fin  for debug""", "" )
   RDW_DEF_FLD( 0x5010d, "fout_enable",5,5, "enable the fout for debug""", "" )
   RDW_DEF("ni", 0x5210d, "red_ni1_cfg_debug_port","", 0x3f, 0x0, "cfg")
   RDW_DEF_FLD( 0x5210d, "en",0,0, "enable debug port""", "" )
   RDW_DEF_FLD( 0x5210d, "select",3,1, "which debug port to select""", "" )
   RDW_DEF_FLD( 0x5210d, "fin_enable",4,4, "enable the fin  for debug""", "" )
   RDW_DEF_FLD( 0x5210d, "fout_enable",5,5, "enable the fout for debug""", "" )
   RDW_DEF("ni", 0x5410d, "red_ni2_cfg_debug_port","", 0x3f, 0x0, "cfg")
   RDW_DEF_FLD( 0x5410d, "en",0,0, "enable debug port""", "" )
   RDW_DEF_FLD( 0x5410d, "select",3,1, "which debug port to select""", "" )
   RDW_DEF_FLD( 0x5410d, "fin_enable",4,4, "enable the fin  for debug""", "" )
   RDW_DEF_FLD( 0x5410d, "fout_enable",5,5, "enable the fout for debug""", "" )
   RDW_DEF("ni", 0x5610d, "red_ni3_cfg_debug_port","", 0x3f, 0x0, "cfg")
   RDW_DEF_FLD( 0x5610d, "en",0,0, "enable debug port""", "" )
   RDW_DEF_FLD( 0x5610d, "select",3,1, "which debug port to select""", "" )
   RDW_DEF_FLD( 0x5610d, "fin_enable",4,4, "enable the fin  for debug""", "" )
   RDW_DEF_FLD( 0x5610d, "fout_enable",5,5, "enable the fout for debug""", "" )


   RDW_DEF("ni", 0x50110, "red_ni0_dhs_fin","dhs frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x50110, "_00",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("ni", 0x50111, "red_ni0_dhs_fin","dhs frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x50111, "_01",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("ni", 0x50112, "red_ni0_dhs_fin","dhs frame in""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x50112, "_02",5,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("ni", 0x52110, "red_ni1_dhs_fin","dhs frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x52110, "_00",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("ni", 0x52111, "red_ni1_dhs_fin","dhs frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x52111, "_01",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("ni", 0x52112, "red_ni1_dhs_fin","dhs frame in""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x52112, "_02",5,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("ni", 0x54110, "red_ni2_dhs_fin","dhs frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x54110, "_00",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("ni", 0x54111, "red_ni2_dhs_fin","dhs frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x54111, "_01",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("ni", 0x54112, "red_ni2_dhs_fin","dhs frame in""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x54112, "_02",5,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("ni", 0x56110, "red_ni3_dhs_fin","dhs frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x56110, "_00",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("ni", 0x56111, "red_ni3_dhs_fin","dhs frame in""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x56111, "_01",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("ni", 0x56112, "red_ni3_dhs_fin","dhs frame in""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x56112, "_02",5,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )


   RDW_DEF("ni", 0x50114, "red_ni0_dhs_fout","dhs frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x50114, "_00",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("ni", 0x50115, "red_ni0_dhs_fout","dhs frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x50115, "_01",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("ni", 0x50116, "red_ni0_dhs_fout","dhs frame out""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x50116, "_02",5,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("ni", 0x52114, "red_ni1_dhs_fout","dhs frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x52114, "_00",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("ni", 0x52115, "red_ni1_dhs_fout","dhs frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x52115, "_01",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("ni", 0x52116, "red_ni1_dhs_fout","dhs frame out""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x52116, "_02",5,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("ni", 0x54114, "red_ni2_dhs_fout","dhs frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x54114, "_00",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("ni", 0x54115, "red_ni2_dhs_fout","dhs frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x54115, "_01",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("ni", 0x54116, "red_ni2_dhs_fout","dhs frame out""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x54116, "_02",5,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("ni", 0x56114, "red_ni3_dhs_fout","dhs frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x56114, "_00",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("ni", 0x56115, "red_ni3_dhs_fout","dhs frame out""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x56115, "_01",31,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )
   RDW_DEF("ni", 0x56116, "red_ni3_dhs_fout","dhs frame out""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x56116, "_02",5,0, "dhs frame size, err, eop, sop, 64 bit data""", "" )


   RDW_DEF("ni", 0x50117, "red_ni0_ni_version","", 0xffffffff, 0x71002, "cfg")
   RDW_DEF_FLD( 0x50117, "",31,0, "date version of misc block""", "" )
   RDW_DEF("ni", 0x52117, "red_ni1_ni_version","", 0xffffffff, 0x71002, "cfg")
   RDW_DEF_FLD( 0x52117, "",31,0, "date version of misc block""", "" )
   RDW_DEF("ni", 0x54117, "red_ni2_ni_version","", 0xffffffff, 0x71002, "cfg")
   RDW_DEF_FLD( 0x54117, "",31,0, "date version of misc block""", "" )
   RDW_DEF("ni", 0x56117, "red_ni3_ni_version","", 0xffffffff, 0x71002, "cfg")
   RDW_DEF_FLD( 0x56117, "",31,0, "date version of misc block""", "" )


   RDW_DEF("ni", 0x50118, "red_ni0_sta_spare","", 0xffffffff, 0x71002, "sta")
   RDW_DEF_FLD( 0x50118, "",31,0, "", "" )
   RDW_DEF("ni", 0x52118, "red_ni1_sta_spare","", 0xffffffff, 0x71002, "sta")
   RDW_DEF_FLD( 0x52118, "",31,0, "", "" )
   RDW_DEF("ni", 0x54118, "red_ni2_sta_spare","", 0xffffffff, 0x71002, "sta")
   RDW_DEF_FLD( 0x54118, "",31,0, "", "" )
   RDW_DEF("ni", 0x56118, "red_ni3_sta_spare","", 0xffffffff, 0x71002, "sta")
   RDW_DEF_FLD( 0x56118, "",31,0, "", "" )


   RDW_DEF("ss", 0x60000, "red_ss0_cfg_fc","Free list init register""", 0x7fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60000, "init",0,0, "free cell fifo init""", "" )
   RDW_DEF_FLD( 0x60000, "size",13,1, "upto 4800 free cells can be initialized""", "" )
   RDW_DEF_FLD( 0x60000, "mm_init",14,14, "main memory init""", "" )
   RDW_DEF("ss", 0x64000, "red_ss1_cfg_fc","Free list init register""", 0x7fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64000, "init",0,0, "free cell fifo init""", "" )
   RDW_DEF_FLD( 0x64000, "size",13,1, "upto 4800 free cells can be initialized""", "" )
   RDW_DEF_FLD( 0x64000, "mm_init",14,14, "main memory init""", "" )
   RDW_DEF("ss", 0x68000, "red_ss2_cfg_fc","Free list init register""", 0x7fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68000, "init",0,0, "free cell fifo init""", "" )
   RDW_DEF_FLD( 0x68000, "size",13,1, "upto 4800 free cells can be initialized""", "" )
   RDW_DEF_FLD( 0x68000, "mm_init",14,14, "main memory init""", "" )
   RDW_DEF("ss", 0x6c000, "red_ss3_cfg_fc","Free list init register""", 0x7fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c000, "init",0,0, "free cell fifo init""", "" )
   RDW_DEF_FLD( 0x6c000, "size",13,1, "upto 4800 free cells can be initialized""", "" )
   RDW_DEF_FLD( 0x6c000, "mm_init",14,14, "main memory init""", "" )


   RDW_DEF("ss", 0x60001, "red_ss0_wro_fc","free cell FIFO register""", 0x3ffffff, 0x0, "wro")
   RDW_DEF_FLD( 0x60001, "wrptr",12,0, "number of free cells. Use only when SW wants to initialize\nthe free cell fifo. The sta_fc_ptr register indicates the programmed value""", "" )
   RDW_DEF_FLD( 0x60001, "cnt",25,13, "free cell count. SW can initialize the free cell FIFO by itself and program the count\nvalue through this register. Reading sta_fc_cnt register indicates the value that\nis programmed or that are remaining during normal transfer. Rd ptr always starts at 0""", "" )
   RDW_DEF("ss", 0x64001, "red_ss1_wro_fc","free cell FIFO register""", 0x3ffffff, 0x0, "wro")
   RDW_DEF_FLD( 0x64001, "wrptr",12,0, "number of free cells. Use only when SW wants to initialize\nthe free cell fifo. The sta_fc_ptr register indicates the programmed value""", "" )
   RDW_DEF_FLD( 0x64001, "cnt",25,13, "free cell count. SW can initialize the free cell FIFO by itself and program the count\nvalue through this register. Reading sta_fc_cnt register indicates the value that\nis programmed or that are remaining during normal transfer. Rd ptr always starts at 0""", "" )
   RDW_DEF("ss", 0x68001, "red_ss2_wro_fc","free cell FIFO register""", 0x3ffffff, 0x0, "wro")
   RDW_DEF_FLD( 0x68001, "wrptr",12,0, "number of free cells. Use only when SW wants to initialize\nthe free cell fifo. The sta_fc_ptr register indicates the programmed value""", "" )
   RDW_DEF_FLD( 0x68001, "cnt",25,13, "free cell count. SW can initialize the free cell FIFO by itself and program the count\nvalue through this register. Reading sta_fc_cnt register indicates the value that\nis programmed or that are remaining during normal transfer. Rd ptr always starts at 0""", "" )
   RDW_DEF("ss", 0x6c001, "red_ss3_wro_fc","free cell FIFO register""", 0x3ffffff, 0x0, "wro")
   RDW_DEF_FLD( 0x6c001, "wrptr",12,0, "number of free cells. Use only when SW wants to initialize\nthe free cell fifo. The sta_fc_ptr register indicates the programmed value""", "" )
   RDW_DEF_FLD( 0x6c001, "cnt",25,13, "free cell count. SW can initialize the free cell FIFO by itself and program the count\nvalue through this register. Reading sta_fc_cnt register indicates the value that\nis programmed or that are remaining during normal transfer. Rd ptr always starts at 0""", "" )


   RDW_DEF("ss", 0x60002, "red_ss0_cfg_frm_to","frame timeout control register""", 0x7ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60002, "value",3,0, "frame Timeout value. Total time the frame can be in the system. Very Gross.\ntotal timeout = value * base. us selection is for verification only""", "" )
   RDW_DEF_FLD( 0x60002, "base",7,4, "0- 1ms/us, 1-2ms/us, 15-16ms/us. The values are very close to 1us 1.021us.\nProgramming in us range is only for RTL testing. Typical timeout is 100ms to 256ms""", "" )
   RDW_DEF_FLD( 0x60002, "us_base",8,8, "covert ms to us base for verif purpose""", "" )
   RDW_DEF_FLD( 0x60002, "en",9,9, "frame time out search enabled""", "" )
   RDW_DEF_FLD( 0x60002, "flush",10,10, "flush the queue if the frame is timed out, until the first non-timed out frame and move the queue\nto the normal state. The flush state is indicated in the status register. If SW doesn't want this\nHW just disable the queue.""", "" )
   RDW_DEF("ss", 0x64002, "red_ss1_cfg_frm_to","frame timeout control register""", 0x7ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64002, "value",3,0, "frame Timeout value. Total time the frame can be in the system. Very Gross.\ntotal timeout = value * base. us selection is for verification only""", "" )
   RDW_DEF_FLD( 0x64002, "base",7,4, "0- 1ms/us, 1-2ms/us, 15-16ms/us. The values are very close to 1us 1.021us.\nProgramming in us range is only for RTL testing. Typical timeout is 100ms to 256ms""", "" )
   RDW_DEF_FLD( 0x64002, "us_base",8,8, "covert ms to us base for verif purpose""", "" )
   RDW_DEF_FLD( 0x64002, "en",9,9, "frame time out search enabled""", "" )
   RDW_DEF_FLD( 0x64002, "flush",10,10, "flush the queue if the frame is timed out, until the first non-timed out frame and move the queue\nto the normal state. The flush state is indicated in the status register. If SW doesn't want this\nHW just disable the queue.""", "" )
   RDW_DEF("ss", 0x68002, "red_ss2_cfg_frm_to","frame timeout control register""", 0x7ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68002, "value",3,0, "frame Timeout value. Total time the frame can be in the system. Very Gross.\ntotal timeout = value * base. us selection is for verification only""", "" )
   RDW_DEF_FLD( 0x68002, "base",7,4, "0- 1ms/us, 1-2ms/us, 15-16ms/us. The values are very close to 1us 1.021us.\nProgramming in us range is only for RTL testing. Typical timeout is 100ms to 256ms""", "" )
   RDW_DEF_FLD( 0x68002, "us_base",8,8, "covert ms to us base for verif purpose""", "" )
   RDW_DEF_FLD( 0x68002, "en",9,9, "frame time out search enabled""", "" )
   RDW_DEF_FLD( 0x68002, "flush",10,10, "flush the queue if the frame is timed out, until the first non-timed out frame and move the queue\nto the normal state. The flush state is indicated in the status register. If SW doesn't want this\nHW just disable the queue.""", "" )
   RDW_DEF("ss", 0x6c002, "red_ss3_cfg_frm_to","frame timeout control register""", 0x7ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c002, "value",3,0, "frame Timeout value. Total time the frame can be in the system. Very Gross.\ntotal timeout = value * base. us selection is for verification only""", "" )
   RDW_DEF_FLD( 0x6c002, "base",7,4, "0- 1ms/us, 1-2ms/us, 15-16ms/us. The values are very close to 1us 1.021us.\nProgramming in us range is only for RTL testing. Typical timeout is 100ms to 256ms""", "" )
   RDW_DEF_FLD( 0x6c002, "us_base",8,8, "covert ms to us base for verif purpose""", "" )
   RDW_DEF_FLD( 0x6c002, "en",9,9, "frame time out search enabled""", "" )
   RDW_DEF_FLD( 0x6c002, "flush",10,10, "flush the queue if the frame is timed out, until the first non-timed out frame and move the queue\nto the normal state. The flush state is indicated in the status register. If SW doesn't want this\nHW just disable the queue.""", "" )


   RDW_DEF("ss", 0x60003, "red_ss0_cfg_req_to","request timeout control register""", 0x3ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60003, "value",3,0, "req Timeout value. Total time the req can be asserted\ntotal timeout = value * base. us selection is for verification only""", "" )
   RDW_DEF_FLD( 0x60003, "base",7,4, "0- 1ms/us, 1-2ms/us, 15-16ms/us.  Typical timeout is 100ms to 256ms""", "" )
   RDW_DEF_FLD( 0x60003, "us_base",8,8, "covert ms to us base for verif purpose. The values are very close to 1us 1.021us""", "" )
   RDW_DEF_FLD( 0x60003, "en",9,9, "request time out is enabled. If timeout happens, HW will disable the queue.""", "" )
   RDW_DEF("ss", 0x64003, "red_ss1_cfg_req_to","request timeout control register""", 0x3ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64003, "value",3,0, "req Timeout value. Total time the req can be asserted\ntotal timeout = value * base. us selection is for verification only""", "" )
   RDW_DEF_FLD( 0x64003, "base",7,4, "0- 1ms/us, 1-2ms/us, 15-16ms/us.  Typical timeout is 100ms to 256ms""", "" )
   RDW_DEF_FLD( 0x64003, "us_base",8,8, "covert ms to us base for verif purpose. The values are very close to 1us 1.021us""", "" )
   RDW_DEF_FLD( 0x64003, "en",9,9, "request time out is enabled. If timeout happens, HW will disable the queue.""", "" )
   RDW_DEF("ss", 0x68003, "red_ss2_cfg_req_to","request timeout control register""", 0x3ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68003, "value",3,0, "req Timeout value. Total time the req can be asserted\ntotal timeout = value * base. us selection is for verification only""", "" )
   RDW_DEF_FLD( 0x68003, "base",7,4, "0- 1ms/us, 1-2ms/us, 15-16ms/us.  Typical timeout is 100ms to 256ms""", "" )
   RDW_DEF_FLD( 0x68003, "us_base",8,8, "covert ms to us base for verif purpose. The values are very close to 1us 1.021us""", "" )
   RDW_DEF_FLD( 0x68003, "en",9,9, "request time out is enabled. If timeout happens, HW will disable the queue.""", "" )
   RDW_DEF("ss", 0x6c003, "red_ss3_cfg_req_to","request timeout control register""", 0x3ff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c003, "value",3,0, "req Timeout value. Total time the req can be asserted\ntotal timeout = value * base. us selection is for verification only""", "" )
   RDW_DEF_FLD( 0x6c003, "base",7,4, "0- 1ms/us, 1-2ms/us, 15-16ms/us.  Typical timeout is 100ms to 256ms""", "" )
   RDW_DEF_FLD( 0x6c003, "us_base",8,8, "covert ms to us base for verif purpose. The values are very close to 1us 1.021us""", "" )
   RDW_DEF_FLD( 0x6c003, "en",9,9, "request time out is enabled. If timeout happens, HW will disable the queue.""", "" )


   RDW_DEF("ss", 0x60004, "red_ss0_cfg_wr_port0","wr_port0 config register""", 0x1fffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60004, "en",0,0, "port enable.""", "" )
   RDW_DEF_FLD( 0x60004, "err_disc",1,1, "discard frames when error happend""", "" )
   RDW_DEF_FLD( 0x60004, "ct",5,2, "cut through enabled. Per out class based.""", "" )
   RDW_DEF_FLD( 0x60004, "ct_min",19,6, "cut through minimum threshold. After this threshold wrch enqueues the frame to OQ.\nMinimum 80 bytes.""", "" )
   RDW_DEF_FLD( 0x60004, "em_stop_en",20,20, "emergency stop enable.""", "" )
   RDW_DEF("ss", 0x64004, "red_ss1_cfg_wr_port0","wr_port0 config register""", 0x1fffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64004, "en",0,0, "port enable.""", "" )
   RDW_DEF_FLD( 0x64004, "err_disc",1,1, "discard frames when error happend""", "" )
   RDW_DEF_FLD( 0x64004, "ct",5,2, "cut through enabled. Per out class based.""", "" )
   RDW_DEF_FLD( 0x64004, "ct_min",19,6, "cut through minimum threshold. After this threshold wrch enqueues the frame to OQ.\nMinimum 80 bytes.""", "" )
   RDW_DEF_FLD( 0x64004, "em_stop_en",20,20, "emergency stop enable.""", "" )
   RDW_DEF("ss", 0x68004, "red_ss2_cfg_wr_port0","wr_port0 config register""", 0x1fffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68004, "en",0,0, "port enable.""", "" )
   RDW_DEF_FLD( 0x68004, "err_disc",1,1, "discard frames when error happend""", "" )
   RDW_DEF_FLD( 0x68004, "ct",5,2, "cut through enabled. Per out class based.""", "" )
   RDW_DEF_FLD( 0x68004, "ct_min",19,6, "cut through minimum threshold. After this threshold wrch enqueues the frame to OQ.\nMinimum 80 bytes.""", "" )
   RDW_DEF_FLD( 0x68004, "em_stop_en",20,20, "emergency stop enable.""", "" )
   RDW_DEF("ss", 0x6c004, "red_ss3_cfg_wr_port0","wr_port0 config register""", 0x1fffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c004, "en",0,0, "port enable.""", "" )
   RDW_DEF_FLD( 0x6c004, "err_disc",1,1, "discard frames when error happend""", "" )
   RDW_DEF_FLD( 0x6c004, "ct",5,2, "cut through enabled. Per out class based.""", "" )
   RDW_DEF_FLD( 0x6c004, "ct_min",19,6, "cut through minimum threshold. After this threshold wrch enqueues the frame to OQ.\nMinimum 80 bytes.""", "" )
   RDW_DEF_FLD( 0x6c004, "em_stop_en",20,20, "emergency stop enable.""", "" )


   RDW_DEF("ss", 0x60005, "red_ss0_cfg_class_max0","port0: class max size register""", 0x7f7f7f7f, 0x0, "cfg")
   RDW_DEF_FLD( 0x60005, "cells0",6,0, "max size per class0\n0000001 - 1 cell, 0111111 - 63 cells, 1111111 - 127 cells. 000000 - illegal""", "" )
   RDW_DEF_FLD( 0x60005, "cells1",14,8, "max size per class1""", "" )
   RDW_DEF_FLD( 0x60005, "cells2",22,16, "max size per class2""", "" )
   RDW_DEF_FLD( 0x60005, "cells3",30,24, "max size per class3""", "" )
   RDW_DEF("ss", 0x64005, "red_ss1_cfg_class_max0","port0: class max size register""", 0x7f7f7f7f, 0x0, "cfg")
   RDW_DEF_FLD( 0x64005, "cells0",6,0, "max size per class0\n0000001 - 1 cell, 0111111 - 63 cells, 1111111 - 127 cells. 000000 - illegal""", "" )
   RDW_DEF_FLD( 0x64005, "cells1",14,8, "max size per class1""", "" )
   RDW_DEF_FLD( 0x64005, "cells2",22,16, "max size per class2""", "" )
   RDW_DEF_FLD( 0x64005, "cells3",30,24, "max size per class3""", "" )
   RDW_DEF("ss", 0x68005, "red_ss2_cfg_class_max0","port0: class max size register""", 0x7f7f7f7f, 0x0, "cfg")
   RDW_DEF_FLD( 0x68005, "cells0",6,0, "max size per class0\n0000001 - 1 cell, 0111111 - 63 cells, 1111111 - 127 cells. 000000 - illegal""", "" )
   RDW_DEF_FLD( 0x68005, "cells1",14,8, "max size per class1""", "" )
   RDW_DEF_FLD( 0x68005, "cells2",22,16, "max size per class2""", "" )
   RDW_DEF_FLD( 0x68005, "cells3",30,24, "max size per class3""", "" )
   RDW_DEF("ss", 0x6c005, "red_ss3_cfg_class_max0","port0: class max size register""", 0x7f7f7f7f, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c005, "cells0",6,0, "max size per class0\n0000001 - 1 cell, 0111111 - 63 cells, 1111111 - 127 cells. 000000 - illegal""", "" )
   RDW_DEF_FLD( 0x6c005, "cells1",14,8, "max size per class1""", "" )
   RDW_DEF_FLD( 0x6c005, "cells2",22,16, "max size per class2""", "" )
   RDW_DEF_FLD( 0x6c005, "cells3",30,24, "max size per class3""", "" )


   RDW_DEF("ss", 0x60006, "red_ss0_cfg_resrc0","resource class to frh map """, 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60006, "map",7,0, "mappping resource class to frh mapping. For 10G/1G mode:\n1:0 - for class0; 3:2 - for class1;\n5:4 - for class2; 7:6 - for class3""", "" )
   RDW_DEF("ss", 0x64006, "red_ss1_cfg_resrc0","resource class to frh map """, 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64006, "map",7,0, "mappping resource class to frh mapping. For 10G/1G mode:\n1:0 - for class0; 3:2 - for class1;\n5:4 - for class2; 7:6 - for class3""", "" )
   RDW_DEF("ss", 0x68006, "red_ss2_cfg_resrc0","resource class to frh map """, 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68006, "map",7,0, "mappping resource class to frh mapping. For 10G/1G mode:\n1:0 - for class0; 3:2 - for class1;\n5:4 - for class2; 7:6 - for class3""", "" )
   RDW_DEF("ss", 0x6c006, "red_ss3_cfg_resrc0","resource class to frh map """, 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c006, "map",7,0, "mappping resource class to frh mapping. For 10G/1G mode:\n1:0 - for class0; 3:2 - for class1;\n5:4 - for class2; 7:6 - for class3""", "" )


   RDW_DEF("ss", 0x60007, "red_ss0_cfg_frh0_info0","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60007, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x60007, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x60007, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x60007, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x60007, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x64007, "red_ss1_cfg_frh0_info0","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64007, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x64007, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x64007, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x64007, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x64007, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x68007, "red_ss2_cfg_frh0_info0","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68007, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x68007, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x68007, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x68007, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x68007, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x6c007, "red_ss3_cfg_frh0_info0","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c007, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x6c007, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x6c007, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x6c007, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x6c007, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )


   RDW_DEF("ss", 0x60008, "red_ss0_cfg_frh1_info0","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60008, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x60008, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x60008, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x60008, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x60008, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x64008, "red_ss1_cfg_frh1_info0","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64008, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x64008, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x64008, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x64008, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x64008, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x68008, "red_ss2_cfg_frh1_info0","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68008, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x68008, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x68008, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x68008, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x68008, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x6c008, "red_ss3_cfg_frh1_info0","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c008, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x6c008, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x6c008, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x6c008, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x6c008, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )


   RDW_DEF("ss", 0x60009, "red_ss0_cfg_frh2_info0","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60009, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x60009, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x60009, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x60009, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x60009, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x64009, "red_ss1_cfg_frh2_info0","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64009, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x64009, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x64009, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x64009, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x64009, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x68009, "red_ss2_cfg_frh2_info0","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68009, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x68009, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x68009, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x68009, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x68009, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x6c009, "red_ss3_cfg_frh2_info0","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c009, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x6c009, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x6c009, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x6c009, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x6c009, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )


   RDW_DEF("ss", 0x6000a, "red_ss0_cfg_frh3_info0","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6000a, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x6000a, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x6000a, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x6000a, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x6000a, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x6400a, "red_ss1_cfg_frh3_info0","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6400a, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x6400a, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x6400a, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x6400a, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x6400a, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x6800a, "red_ss2_cfg_frh3_info0","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6800a, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x6800a, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x6800a, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x6800a, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x6800a, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x6c00a, "red_ss3_cfg_frh3_info0","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c00a, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x6c00a, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x6c00a, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x6c00a, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x6c00a, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )


   RDW_DEF("ss", 0x6000b, "red_ss0_cfg_glb_pause0","Global pause control""", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6000b, "frh",3,0, "which FRHs participate in the global pause. HW counts the total cells used by the\nparticipating FRHs and if they exceed the programmed threshold global_pause_threshold,\ngenerates pause to the link classes that are programmed in global_pause_classes""", "" )
   RDW_DEF_FLD( 0x6000b, "classes",7,4, "when the frh cells exceeds the programmed threshold, BM generates pause on these classes""", "" )
   RDW_DEF_FLD( 0x6000b, "threshold",15,8, "Xoff threshold in terms of 16 cells. Same as other FRHs.""", "" )
   RDW_DEF_FLD( 0x6000b, "total_cells",23,16, "number of credits for all the FRHs mapped to global pause, Interms of 16 cells.\nThis is useful to discard frames in the case of global\npause reached before the actual pause from the real FRHs. Xon will happen when all the \nmember FRHs are less than their Xon thresholds. Still the total restriction is no more \nthan 4k cells (12 bits)""", "" )
   RDW_DEF("ss", 0x6400b, "red_ss1_cfg_glb_pause0","Global pause control""", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6400b, "frh",3,0, "which FRHs participate in the global pause. HW counts the total cells used by the\nparticipating FRHs and if they exceed the programmed threshold global_pause_threshold,\ngenerates pause to the link classes that are programmed in global_pause_classes""", "" )
   RDW_DEF_FLD( 0x6400b, "classes",7,4, "when the frh cells exceeds the programmed threshold, BM generates pause on these classes""", "" )
   RDW_DEF_FLD( 0x6400b, "threshold",15,8, "Xoff threshold in terms of 16 cells. Same as other FRHs.""", "" )
   RDW_DEF_FLD( 0x6400b, "total_cells",23,16, "number of credits for all the FRHs mapped to global pause, Interms of 16 cells.\nThis is useful to discard frames in the case of global\npause reached before the actual pause from the real FRHs. Xon will happen when all the \nmember FRHs are less than their Xon thresholds. Still the total restriction is no more \nthan 4k cells (12 bits)""", "" )
   RDW_DEF("ss", 0x6800b, "red_ss2_cfg_glb_pause0","Global pause control""", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6800b, "frh",3,0, "which FRHs participate in the global pause. HW counts the total cells used by the\nparticipating FRHs and if they exceed the programmed threshold global_pause_threshold,\ngenerates pause to the link classes that are programmed in global_pause_classes""", "" )
   RDW_DEF_FLD( 0x6800b, "classes",7,4, "when the frh cells exceeds the programmed threshold, BM generates pause on these classes""", "" )
   RDW_DEF_FLD( 0x6800b, "threshold",15,8, "Xoff threshold in terms of 16 cells. Same as other FRHs.""", "" )
   RDW_DEF_FLD( 0x6800b, "total_cells",23,16, "number of credits for all the FRHs mapped to global pause, Interms of 16 cells.\nThis is useful to discard frames in the case of global\npause reached before the actual pause from the real FRHs. Xon will happen when all the \nmember FRHs are less than their Xon thresholds. Still the total restriction is no more \nthan 4k cells (12 bits)""", "" )
   RDW_DEF("ss", 0x6c00b, "red_ss3_cfg_glb_pause0","Global pause control""", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c00b, "frh",3,0, "which FRHs participate in the global pause. HW counts the total cells used by the\nparticipating FRHs and if they exceed the programmed threshold global_pause_threshold,\ngenerates pause to the link classes that are programmed in global_pause_classes""", "" )
   RDW_DEF_FLD( 0x6c00b, "classes",7,4, "when the frh cells exceeds the programmed threshold, BM generates pause on these classes""", "" )
   RDW_DEF_FLD( 0x6c00b, "threshold",15,8, "Xoff threshold in terms of 16 cells. Same as other FRHs.""", "" )
   RDW_DEF_FLD( 0x6c00b, "total_cells",23,16, "number of credits for all the FRHs mapped to global pause, Interms of 16 cells.\nThis is useful to discard frames in the case of global\npause reached before the actual pause from the real FRHs. Xon will happen when all the \nmember FRHs are less than their Xon thresholds. Still the total restriction is no more \nthan 4k cells (12 bits)""", "" )


   RDW_DEF("ss", 0x6000c, "red_ss0_cfg_mcast0","mcast info0 for discard purpose to mask or discard mcast frames""", 0x1fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6000c, "drop_threshold",7,0, "if\nSS will start dropping the low priority MC frames. In terms of 16 cells.""", "" )
   RDW_DEF_FLD( 0x6000c, "drop_en",12,8, "If this bit is set the mcast frames can be droppable based on the drop ok info from FW. Either\nall ports or none. Valid valies 5'h1f or 5'h0. Otherwise hw multicast counts are not going to match""", "" )
   RDW_DEF("ss", 0x6400c, "red_ss1_cfg_mcast0","mcast info0 for discard purpose to mask or discard mcast frames""", 0x1fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6400c, "drop_threshold",7,0, "if\nSS will start dropping the low priority MC frames. In terms of 16 cells.""", "" )
   RDW_DEF_FLD( 0x6400c, "drop_en",12,8, "If this bit is set the mcast frames can be droppable based on the drop ok info from FW. Either\nall ports or none. Valid valies 5'h1f or 5'h0. Otherwise hw multicast counts are not going to match""", "" )
   RDW_DEF("ss", 0x6800c, "red_ss2_cfg_mcast0","mcast info0 for discard purpose to mask or discard mcast frames""", 0x1fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6800c, "drop_threshold",7,0, "if\nSS will start dropping the low priority MC frames. In terms of 16 cells.""", "" )
   RDW_DEF_FLD( 0x6800c, "drop_en",12,8, "If this bit is set the mcast frames can be droppable based on the drop ok info from FW. Either\nall ports or none. Valid valies 5'h1f or 5'h0. Otherwise hw multicast counts are not going to match""", "" )
   RDW_DEF("ss", 0x6c00c, "red_ss3_cfg_mcast0","mcast info0 for discard purpose to mask or discard mcast frames""", 0x1fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c00c, "drop_threshold",7,0, "if\nSS will start dropping the low priority MC frames. In terms of 16 cells.""", "" )
   RDW_DEF_FLD( 0x6c00c, "drop_en",12,8, "If this bit is set the mcast frames can be droppable based on the drop ok info from FW. Either\nall ports or none. Valid valies 5'h1f or 5'h0. Otherwise hw multicast counts are not going to match""", "" )


   RDW_DEF("ss", 0x6000d, "red_ss0_sta_frh0_port0","frh0 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6000d, "busy_cnt",11,0, "cells currently used by frh0""", "" )
   RDW_DEF("ss", 0x6400d, "red_ss1_sta_frh0_port0","frh0 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6400d, "busy_cnt",11,0, "cells currently used by frh0""", "" )
   RDW_DEF("ss", 0x6800d, "red_ss2_sta_frh0_port0","frh0 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6800d, "busy_cnt",11,0, "cells currently used by frh0""", "" )
   RDW_DEF("ss", 0x6c00d, "red_ss3_sta_frh0_port0","frh0 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c00d, "busy_cnt",11,0, "cells currently used by frh0""", "" )


   RDW_DEF("ss", 0x6000e, "red_ss0_sta_frh1_port0","frh1 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6000e, "busy_cnt",11,0, "cells currently used by frh1""", "" )
   RDW_DEF("ss", 0x6400e, "red_ss1_sta_frh1_port0","frh1 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6400e, "busy_cnt",11,0, "cells currently used by frh1""", "" )
   RDW_DEF("ss", 0x6800e, "red_ss2_sta_frh1_port0","frh1 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6800e, "busy_cnt",11,0, "cells currently used by frh1""", "" )
   RDW_DEF("ss", 0x6c00e, "red_ss3_sta_frh1_port0","frh1 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c00e, "busy_cnt",11,0, "cells currently used by frh1""", "" )


   RDW_DEF("ss", 0x6000f, "red_ss0_sta_frh2_port0","frh2 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6000f, "busy_cnt",11,0, "cells currently used by frh2""", "" )
   RDW_DEF("ss", 0x6400f, "red_ss1_sta_frh2_port0","frh2 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6400f, "busy_cnt",11,0, "cells currently used by frh2""", "" )
   RDW_DEF("ss", 0x6800f, "red_ss2_sta_frh2_port0","frh2 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6800f, "busy_cnt",11,0, "cells currently used by frh2""", "" )
   RDW_DEF("ss", 0x6c00f, "red_ss3_sta_frh2_port0","frh2 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c00f, "busy_cnt",11,0, "cells currently used by frh2""", "" )


   RDW_DEF("ss", 0x60010, "red_ss0_sta_frh3_port0","frh3 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x60010, "busy_cnt",11,0, "cells currently used by frh3""", "" )
   RDW_DEF("ss", 0x64010, "red_ss1_sta_frh3_port0","frh3 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x64010, "busy_cnt",11,0, "cells currently used by frh3""", "" )
   RDW_DEF("ss", 0x68010, "red_ss2_sta_frh3_port0","frh3 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x68010, "busy_cnt",11,0, "cells currently used by frh3""", "" )
   RDW_DEF("ss", 0x6c010, "red_ss3_sta_frh3_port0","frh3 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c010, "busy_cnt",11,0, "cells currently used by frh3""", "" )


   RDW_DEF("ss", 0x60011, "red_ss0_sta_mcast0","mcast0 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x60011, "busy_cnt",11,0, "cells currently used by MCast: port0""", "" )
   RDW_DEF("ss", 0x64011, "red_ss1_sta_mcast0","mcast0 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x64011, "busy_cnt",11,0, "cells currently used by MCast: port0""", "" )
   RDW_DEF("ss", 0x68011, "red_ss2_sta_mcast0","mcast0 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x68011, "busy_cnt",11,0, "cells currently used by MCast: port0""", "" )
   RDW_DEF("ss", 0x6c011, "red_ss3_sta_mcast0","mcast0 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c011, "busy_cnt",11,0, "cells currently used by MCast: port0""", "" )


   RDW_DEF("ss", 0x60012, "red_ss0_cfg_wr_port1","wr_port1 config register""", 0x1fffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60012, "en",0,0, "port enable.""", "" )
   RDW_DEF_FLD( 0x60012, "err_disc",1,1, "discard frames when error happend""", "" )
   RDW_DEF_FLD( 0x60012, "ct",5,2, "cut through enabled. Per out class based.""", "" )
   RDW_DEF_FLD( 0x60012, "ct_min",19,6, "cut through minimum threshold. After this threshold wrch enqueues the frame to OQ.\nMinimum 80 bytes.""", "" )
   RDW_DEF_FLD( 0x60012, "em_stop_en",20,20, "emergency stop enable.""", "" )
   RDW_DEF("ss", 0x64012, "red_ss1_cfg_wr_port1","wr_port1 config register""", 0x1fffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64012, "en",0,0, "port enable.""", "" )
   RDW_DEF_FLD( 0x64012, "err_disc",1,1, "discard frames when error happend""", "" )
   RDW_DEF_FLD( 0x64012, "ct",5,2, "cut through enabled. Per out class based.""", "" )
   RDW_DEF_FLD( 0x64012, "ct_min",19,6, "cut through minimum threshold. After this threshold wrch enqueues the frame to OQ.\nMinimum 80 bytes.""", "" )
   RDW_DEF_FLD( 0x64012, "em_stop_en",20,20, "emergency stop enable.""", "" )
   RDW_DEF("ss", 0x68012, "red_ss2_cfg_wr_port1","wr_port1 config register""", 0x1fffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68012, "en",0,0, "port enable.""", "" )
   RDW_DEF_FLD( 0x68012, "err_disc",1,1, "discard frames when error happend""", "" )
   RDW_DEF_FLD( 0x68012, "ct",5,2, "cut through enabled. Per out class based.""", "" )
   RDW_DEF_FLD( 0x68012, "ct_min",19,6, "cut through minimum threshold. After this threshold wrch enqueues the frame to OQ.\nMinimum 80 bytes.""", "" )
   RDW_DEF_FLD( 0x68012, "em_stop_en",20,20, "emergency stop enable.""", "" )
   RDW_DEF("ss", 0x6c012, "red_ss3_cfg_wr_port1","wr_port1 config register""", 0x1fffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c012, "en",0,0, "port enable.""", "" )
   RDW_DEF_FLD( 0x6c012, "err_disc",1,1, "discard frames when error happend""", "" )
   RDW_DEF_FLD( 0x6c012, "ct",5,2, "cut through enabled. Per out class based.""", "" )
   RDW_DEF_FLD( 0x6c012, "ct_min",19,6, "cut through minimum threshold. After this threshold wrch enqueues the frame to OQ.\nMinimum 80 bytes.""", "" )
   RDW_DEF_FLD( 0x6c012, "em_stop_en",20,20, "emergency stop enable.""", "" )


   RDW_DEF("ss", 0x60013, "red_ss0_cfg_class_max1","port1: class max size register""", 0x7f7f7f7f, 0x0, "cfg")
   RDW_DEF_FLD( 0x60013, "cells0",6,0, "max size per class0\n0000001 - 1 cell, 0111111 - 63 cells, 1111111 - 127 cells. 000000 - illegal""", "" )
   RDW_DEF_FLD( 0x60013, "cells1",14,8, "max size per class1""", "" )
   RDW_DEF_FLD( 0x60013, "cells2",22,16, "max size per class2""", "" )
   RDW_DEF_FLD( 0x60013, "cells3",30,24, "max size per class3""", "" )
   RDW_DEF("ss", 0x64013, "red_ss1_cfg_class_max1","port1: class max size register""", 0x7f7f7f7f, 0x0, "cfg")
   RDW_DEF_FLD( 0x64013, "cells0",6,0, "max size per class0\n0000001 - 1 cell, 0111111 - 63 cells, 1111111 - 127 cells. 000000 - illegal""", "" )
   RDW_DEF_FLD( 0x64013, "cells1",14,8, "max size per class1""", "" )
   RDW_DEF_FLD( 0x64013, "cells2",22,16, "max size per class2""", "" )
   RDW_DEF_FLD( 0x64013, "cells3",30,24, "max size per class3""", "" )
   RDW_DEF("ss", 0x68013, "red_ss2_cfg_class_max1","port1: class max size register""", 0x7f7f7f7f, 0x0, "cfg")
   RDW_DEF_FLD( 0x68013, "cells0",6,0, "max size per class0\n0000001 - 1 cell, 0111111 - 63 cells, 1111111 - 127 cells. 000000 - illegal""", "" )
   RDW_DEF_FLD( 0x68013, "cells1",14,8, "max size per class1""", "" )
   RDW_DEF_FLD( 0x68013, "cells2",22,16, "max size per class2""", "" )
   RDW_DEF_FLD( 0x68013, "cells3",30,24, "max size per class3""", "" )
   RDW_DEF("ss", 0x6c013, "red_ss3_cfg_class_max1","port1: class max size register""", 0x7f7f7f7f, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c013, "cells0",6,0, "max size per class0\n0000001 - 1 cell, 0111111 - 63 cells, 1111111 - 127 cells. 000000 - illegal""", "" )
   RDW_DEF_FLD( 0x6c013, "cells1",14,8, "max size per class1""", "" )
   RDW_DEF_FLD( 0x6c013, "cells2",22,16, "max size per class2""", "" )
   RDW_DEF_FLD( 0x6c013, "cells3",30,24, "max size per class3""", "" )


   RDW_DEF("ss", 0x60014, "red_ss0_cfg_resrc1","resource class to frh map """, 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60014, "map",7,0, "mappping resource class to frh mapping. For 10G/1G mode:\n1:0 - for class0; 3:2 - for class1;\n5:4 - for class2; 7:6 - for class3""", "" )
   RDW_DEF("ss", 0x64014, "red_ss1_cfg_resrc1","resource class to frh map """, 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64014, "map",7,0, "mappping resource class to frh mapping. For 10G/1G mode:\n1:0 - for class0; 3:2 - for class1;\n5:4 - for class2; 7:6 - for class3""", "" )
   RDW_DEF("ss", 0x68014, "red_ss2_cfg_resrc1","resource class to frh map """, 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68014, "map",7,0, "mappping resource class to frh mapping. For 10G/1G mode:\n1:0 - for class0; 3:2 - for class1;\n5:4 - for class2; 7:6 - for class3""", "" )
   RDW_DEF("ss", 0x6c014, "red_ss3_cfg_resrc1","resource class to frh map """, 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c014, "map",7,0, "mappping resource class to frh mapping. For 10G/1G mode:\n1:0 - for class0; 3:2 - for class1;\n5:4 - for class2; 7:6 - for class3""", "" )


   RDW_DEF("ss", 0x60015, "red_ss0_cfg_frh0_info1","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60015, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x60015, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x60015, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x60015, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x60015, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x64015, "red_ss1_cfg_frh0_info1","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64015, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x64015, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x64015, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x64015, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x64015, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x68015, "red_ss2_cfg_frh0_info1","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68015, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x68015, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x68015, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x68015, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x68015, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x6c015, "red_ss3_cfg_frh0_info1","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c015, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x6c015, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x6c015, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x6c015, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x6c015, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )


   RDW_DEF("ss", 0x60016, "red_ss0_cfg_frh1_info1","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60016, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x60016, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x60016, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x60016, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x60016, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x64016, "red_ss1_cfg_frh1_info1","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64016, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x64016, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x64016, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x64016, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x64016, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x68016, "red_ss2_cfg_frh1_info1","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68016, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x68016, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x68016, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x68016, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x68016, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x6c016, "red_ss3_cfg_frh1_info1","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c016, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x6c016, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x6c016, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x6c016, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x6c016, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )


   RDW_DEF("ss", 0x60017, "red_ss0_cfg_frh2_info1","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60017, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x60017, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x60017, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x60017, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x60017, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x64017, "red_ss1_cfg_frh2_info1","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64017, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x64017, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x64017, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x64017, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x64017, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x68017, "red_ss2_cfg_frh2_info1","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68017, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x68017, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x68017, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x68017, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x68017, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x6c017, "red_ss3_cfg_frh2_info1","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c017, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x6c017, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x6c017, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x6c017, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x6c017, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )


   RDW_DEF("ss", 0x60018, "red_ss0_cfg_frh3_info1","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60018, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x60018, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x60018, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x60018, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x60018, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x64018, "red_ss1_cfg_frh3_info1","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64018, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x64018, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x64018, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x64018, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x64018, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x68018, "red_ss2_cfg_frh3_info1","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68018, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x68018, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x68018, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x68018, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x68018, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x6c018, "red_ss3_cfg_frh3_info1","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c018, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x6c018, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x6c018, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x6c018, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x6c018, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )


   RDW_DEF("ss", 0x60019, "red_ss0_cfg_glb_pause1","Global pause control""", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60019, "frh",3,0, "which FRHs participate in the global pause. HW counts the total cells used by the\nparticipating FRHs and if they exceed the programmed threshold global_pause_threshold,\ngenerates pause to the link classes that are programmed in global_pause_classes""", "" )
   RDW_DEF_FLD( 0x60019, "classes",7,4, "when the frh cells exceeds the programmed threshold, BM generates pause on these classes""", "" )
   RDW_DEF_FLD( 0x60019, "threshold",15,8, "Xoff threshold in terms of 16 cells. Same as other FRHs.""", "" )
   RDW_DEF_FLD( 0x60019, "total_cells",23,16, "number of credits for all the FRHs mapped to global pause, Interms of 16 cells.\nThis is useful to discard frames in the case of global\npause reached before the actual pause from the real FRHs. Xon will happen when all the \nmember FRHs are less than their Xon thresholds. Still the total restriction is no more \nthan 4k cells (12 bits)""", "" )
   RDW_DEF("ss", 0x64019, "red_ss1_cfg_glb_pause1","Global pause control""", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64019, "frh",3,0, "which FRHs participate in the global pause. HW counts the total cells used by the\nparticipating FRHs and if they exceed the programmed threshold global_pause_threshold,\ngenerates pause to the link classes that are programmed in global_pause_classes""", "" )
   RDW_DEF_FLD( 0x64019, "classes",7,4, "when the frh cells exceeds the programmed threshold, BM generates pause on these classes""", "" )
   RDW_DEF_FLD( 0x64019, "threshold",15,8, "Xoff threshold in terms of 16 cells. Same as other FRHs.""", "" )
   RDW_DEF_FLD( 0x64019, "total_cells",23,16, "number of credits for all the FRHs mapped to global pause, Interms of 16 cells.\nThis is useful to discard frames in the case of global\npause reached before the actual pause from the real FRHs. Xon will happen when all the \nmember FRHs are less than their Xon thresholds. Still the total restriction is no more \nthan 4k cells (12 bits)""", "" )
   RDW_DEF("ss", 0x68019, "red_ss2_cfg_glb_pause1","Global pause control""", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68019, "frh",3,0, "which FRHs participate in the global pause. HW counts the total cells used by the\nparticipating FRHs and if they exceed the programmed threshold global_pause_threshold,\ngenerates pause to the link classes that are programmed in global_pause_classes""", "" )
   RDW_DEF_FLD( 0x68019, "classes",7,4, "when the frh cells exceeds the programmed threshold, BM generates pause on these classes""", "" )
   RDW_DEF_FLD( 0x68019, "threshold",15,8, "Xoff threshold in terms of 16 cells. Same as other FRHs.""", "" )
   RDW_DEF_FLD( 0x68019, "total_cells",23,16, "number of credits for all the FRHs mapped to global pause, Interms of 16 cells.\nThis is useful to discard frames in the case of global\npause reached before the actual pause from the real FRHs. Xon will happen when all the \nmember FRHs are less than their Xon thresholds. Still the total restriction is no more \nthan 4k cells (12 bits)""", "" )
   RDW_DEF("ss", 0x6c019, "red_ss3_cfg_glb_pause1","Global pause control""", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c019, "frh",3,0, "which FRHs participate in the global pause. HW counts the total cells used by the\nparticipating FRHs and if they exceed the programmed threshold global_pause_threshold,\ngenerates pause to the link classes that are programmed in global_pause_classes""", "" )
   RDW_DEF_FLD( 0x6c019, "classes",7,4, "when the frh cells exceeds the programmed threshold, BM generates pause on these classes""", "" )
   RDW_DEF_FLD( 0x6c019, "threshold",15,8, "Xoff threshold in terms of 16 cells. Same as other FRHs.""", "" )
   RDW_DEF_FLD( 0x6c019, "total_cells",23,16, "number of credits for all the FRHs mapped to global pause, Interms of 16 cells.\nThis is useful to discard frames in the case of global\npause reached before the actual pause from the real FRHs. Xon will happen when all the \nmember FRHs are less than their Xon thresholds. Still the total restriction is no more \nthan 4k cells (12 bits)""", "" )


   RDW_DEF("ss", 0x6001a, "red_ss0_cfg_mcast1","mcast info1 for discard purpose to mask or discard mcast frames""", 0x1fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6001a, "drop_threshold",7,0, "if\nSS will start dropping the low priority MC frames. In terms of 16 cells.""", "" )
   RDW_DEF_FLD( 0x6001a, "drop_en",12,8, "If this bit is set the mcast frames can be droppable based on the drop ok info from FW. Either\nall ports or none. Valid valies 5'h1f or 5'h0. Otherwise hw multicast counts are not going to match""", "" )
   RDW_DEF("ss", 0x6401a, "red_ss1_cfg_mcast1","mcast info1 for discard purpose to mask or discard mcast frames""", 0x1fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6401a, "drop_threshold",7,0, "if\nSS will start dropping the low priority MC frames. In terms of 16 cells.""", "" )
   RDW_DEF_FLD( 0x6401a, "drop_en",12,8, "If this bit is set the mcast frames can be droppable based on the drop ok info from FW. Either\nall ports or none. Valid valies 5'h1f or 5'h0. Otherwise hw multicast counts are not going to match""", "" )
   RDW_DEF("ss", 0x6801a, "red_ss2_cfg_mcast1","mcast info1 for discard purpose to mask or discard mcast frames""", 0x1fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6801a, "drop_threshold",7,0, "if\nSS will start dropping the low priority MC frames. In terms of 16 cells.""", "" )
   RDW_DEF_FLD( 0x6801a, "drop_en",12,8, "If this bit is set the mcast frames can be droppable based on the drop ok info from FW. Either\nall ports or none. Valid valies 5'h1f or 5'h0. Otherwise hw multicast counts are not going to match""", "" )
   RDW_DEF("ss", 0x6c01a, "red_ss3_cfg_mcast1","mcast info1 for discard purpose to mask or discard mcast frames""", 0x1fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c01a, "drop_threshold",7,0, "if\nSS will start dropping the low priority MC frames. In terms of 16 cells.""", "" )
   RDW_DEF_FLD( 0x6c01a, "drop_en",12,8, "If this bit is set the mcast frames can be droppable based on the drop ok info from FW. Either\nall ports or none. Valid valies 5'h1f or 5'h0. Otherwise hw multicast counts are not going to match""", "" )


   RDW_DEF("ss", 0x6001b, "red_ss0_sta_frh0_port1","frh0 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6001b, "busy_cnt",11,0, "cells currently used by frh0""", "" )
   RDW_DEF("ss", 0x6401b, "red_ss1_sta_frh0_port1","frh0 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6401b, "busy_cnt",11,0, "cells currently used by frh0""", "" )
   RDW_DEF("ss", 0x6801b, "red_ss2_sta_frh0_port1","frh0 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6801b, "busy_cnt",11,0, "cells currently used by frh0""", "" )
   RDW_DEF("ss", 0x6c01b, "red_ss3_sta_frh0_port1","frh0 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c01b, "busy_cnt",11,0, "cells currently used by frh0""", "" )


   RDW_DEF("ss", 0x6001c, "red_ss0_sta_frh1_port1","frh1 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6001c, "busy_cnt",11,0, "cells currently used by frh1""", "" )
   RDW_DEF("ss", 0x6401c, "red_ss1_sta_frh1_port1","frh1 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6401c, "busy_cnt",11,0, "cells currently used by frh1""", "" )
   RDW_DEF("ss", 0x6801c, "red_ss2_sta_frh1_port1","frh1 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6801c, "busy_cnt",11,0, "cells currently used by frh1""", "" )
   RDW_DEF("ss", 0x6c01c, "red_ss3_sta_frh1_port1","frh1 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c01c, "busy_cnt",11,0, "cells currently used by frh1""", "" )


   RDW_DEF("ss", 0x6001d, "red_ss0_sta_frh2_port1","frh2 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6001d, "busy_cnt",11,0, "cells currently used by frh2""", "" )
   RDW_DEF("ss", 0x6401d, "red_ss1_sta_frh2_port1","frh2 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6401d, "busy_cnt",11,0, "cells currently used by frh2""", "" )
   RDW_DEF("ss", 0x6801d, "red_ss2_sta_frh2_port1","frh2 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6801d, "busy_cnt",11,0, "cells currently used by frh2""", "" )
   RDW_DEF("ss", 0x6c01d, "red_ss3_sta_frh2_port1","frh2 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c01d, "busy_cnt",11,0, "cells currently used by frh2""", "" )


   RDW_DEF("ss", 0x6001e, "red_ss0_sta_frh3_port1","frh3 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6001e, "busy_cnt",11,0, "cells currently used by frh3""", "" )
   RDW_DEF("ss", 0x6401e, "red_ss1_sta_frh3_port1","frh3 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6401e, "busy_cnt",11,0, "cells currently used by frh3""", "" )
   RDW_DEF("ss", 0x6801e, "red_ss2_sta_frh3_port1","frh3 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6801e, "busy_cnt",11,0, "cells currently used by frh3""", "" )
   RDW_DEF("ss", 0x6c01e, "red_ss3_sta_frh3_port1","frh3 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c01e, "busy_cnt",11,0, "cells currently used by frh3""", "" )


   RDW_DEF("ss", 0x6001f, "red_ss0_sta_mcast1","mcast1 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6001f, "busy_cnt",11,0, "cells currently used by MCast: port1""", "" )
   RDW_DEF("ss", 0x6401f, "red_ss1_sta_mcast1","mcast1 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6401f, "busy_cnt",11,0, "cells currently used by MCast: port1""", "" )
   RDW_DEF("ss", 0x6801f, "red_ss2_sta_mcast1","mcast1 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6801f, "busy_cnt",11,0, "cells currently used by MCast: port1""", "" )
   RDW_DEF("ss", 0x6c01f, "red_ss3_sta_mcast1","mcast1 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c01f, "busy_cnt",11,0, "cells currently used by MCast: port1""", "" )


   RDW_DEF("ss", 0x60020, "red_ss0_cfg_wr_port2","wr_port2 config register""", 0x1fffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60020, "en",0,0, "port enable.""", "" )
   RDW_DEF_FLD( 0x60020, "err_disc",1,1, "discard frames when error happend""", "" )
   RDW_DEF_FLD( 0x60020, "ct",5,2, "cut through enabled. Per out class based.""", "" )
   RDW_DEF_FLD( 0x60020, "ct_min",19,6, "cut through minimum threshold. After this threshold wrch enqueues the frame to OQ.\nMinimum 80 bytes.""", "" )
   RDW_DEF_FLD( 0x60020, "em_stop_en",20,20, "emergency stop enable.""", "" )
   RDW_DEF("ss", 0x64020, "red_ss1_cfg_wr_port2","wr_port2 config register""", 0x1fffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64020, "en",0,0, "port enable.""", "" )
   RDW_DEF_FLD( 0x64020, "err_disc",1,1, "discard frames when error happend""", "" )
   RDW_DEF_FLD( 0x64020, "ct",5,2, "cut through enabled. Per out class based.""", "" )
   RDW_DEF_FLD( 0x64020, "ct_min",19,6, "cut through minimum threshold. After this threshold wrch enqueues the frame to OQ.\nMinimum 80 bytes.""", "" )
   RDW_DEF_FLD( 0x64020, "em_stop_en",20,20, "emergency stop enable.""", "" )
   RDW_DEF("ss", 0x68020, "red_ss2_cfg_wr_port2","wr_port2 config register""", 0x1fffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68020, "en",0,0, "port enable.""", "" )
   RDW_DEF_FLD( 0x68020, "err_disc",1,1, "discard frames when error happend""", "" )
   RDW_DEF_FLD( 0x68020, "ct",5,2, "cut through enabled. Per out class based.""", "" )
   RDW_DEF_FLD( 0x68020, "ct_min",19,6, "cut through minimum threshold. After this threshold wrch enqueues the frame to OQ.\nMinimum 80 bytes.""", "" )
   RDW_DEF_FLD( 0x68020, "em_stop_en",20,20, "emergency stop enable.""", "" )
   RDW_DEF("ss", 0x6c020, "red_ss3_cfg_wr_port2","wr_port2 config register""", 0x1fffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c020, "en",0,0, "port enable.""", "" )
   RDW_DEF_FLD( 0x6c020, "err_disc",1,1, "discard frames when error happend""", "" )
   RDW_DEF_FLD( 0x6c020, "ct",5,2, "cut through enabled. Per out class based.""", "" )
   RDW_DEF_FLD( 0x6c020, "ct_min",19,6, "cut through minimum threshold. After this threshold wrch enqueues the frame to OQ.\nMinimum 80 bytes.""", "" )
   RDW_DEF_FLD( 0x6c020, "em_stop_en",20,20, "emergency stop enable.""", "" )


   RDW_DEF("ss", 0x60021, "red_ss0_cfg_class_max2","port2: class max size register""", 0x7f7f7f7f, 0x0, "cfg")
   RDW_DEF_FLD( 0x60021, "cells0",6,0, "max size per class0\n0000001 - 1 cell, 0111111 - 63 cells, 1111111 - 127 cells. 000000 - illegal""", "" )
   RDW_DEF_FLD( 0x60021, "cells1",14,8, "max size per class1""", "" )
   RDW_DEF_FLD( 0x60021, "cells2",22,16, "max size per class2""", "" )
   RDW_DEF_FLD( 0x60021, "cells3",30,24, "max size per class3""", "" )
   RDW_DEF("ss", 0x64021, "red_ss1_cfg_class_max2","port2: class max size register""", 0x7f7f7f7f, 0x0, "cfg")
   RDW_DEF_FLD( 0x64021, "cells0",6,0, "max size per class0\n0000001 - 1 cell, 0111111 - 63 cells, 1111111 - 127 cells. 000000 - illegal""", "" )
   RDW_DEF_FLD( 0x64021, "cells1",14,8, "max size per class1""", "" )
   RDW_DEF_FLD( 0x64021, "cells2",22,16, "max size per class2""", "" )
   RDW_DEF_FLD( 0x64021, "cells3",30,24, "max size per class3""", "" )
   RDW_DEF("ss", 0x68021, "red_ss2_cfg_class_max2","port2: class max size register""", 0x7f7f7f7f, 0x0, "cfg")
   RDW_DEF_FLD( 0x68021, "cells0",6,0, "max size per class0\n0000001 - 1 cell, 0111111 - 63 cells, 1111111 - 127 cells. 000000 - illegal""", "" )
   RDW_DEF_FLD( 0x68021, "cells1",14,8, "max size per class1""", "" )
   RDW_DEF_FLD( 0x68021, "cells2",22,16, "max size per class2""", "" )
   RDW_DEF_FLD( 0x68021, "cells3",30,24, "max size per class3""", "" )
   RDW_DEF("ss", 0x6c021, "red_ss3_cfg_class_max2","port2: class max size register""", 0x7f7f7f7f, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c021, "cells0",6,0, "max size per class0\n0000001 - 1 cell, 0111111 - 63 cells, 1111111 - 127 cells. 000000 - illegal""", "" )
   RDW_DEF_FLD( 0x6c021, "cells1",14,8, "max size per class1""", "" )
   RDW_DEF_FLD( 0x6c021, "cells2",22,16, "max size per class2""", "" )
   RDW_DEF_FLD( 0x6c021, "cells3",30,24, "max size per class3""", "" )


   RDW_DEF("ss", 0x60022, "red_ss0_cfg_resrc2","resource class to frh map """, 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60022, "map",7,0, "mappping resource class to frh mapping. For 10G/1G mode:\n1:0 - for class0; 3:2 - for class1;\n5:4 - for class2; 7:6 - for class3""", "" )
   RDW_DEF("ss", 0x64022, "red_ss1_cfg_resrc2","resource class to frh map """, 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64022, "map",7,0, "mappping resource class to frh mapping. For 10G/1G mode:\n1:0 - for class0; 3:2 - for class1;\n5:4 - for class2; 7:6 - for class3""", "" )
   RDW_DEF("ss", 0x68022, "red_ss2_cfg_resrc2","resource class to frh map """, 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68022, "map",7,0, "mappping resource class to frh mapping. For 10G/1G mode:\n1:0 - for class0; 3:2 - for class1;\n5:4 - for class2; 7:6 - for class3""", "" )
   RDW_DEF("ss", 0x6c022, "red_ss3_cfg_resrc2","resource class to frh map """, 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c022, "map",7,0, "mappping resource class to frh mapping. For 10G/1G mode:\n1:0 - for class0; 3:2 - for class1;\n5:4 - for class2; 7:6 - for class3""", "" )


   RDW_DEF("ss", 0x60023, "red_ss0_cfg_frh0_info2","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60023, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x60023, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x60023, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x60023, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x60023, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x64023, "red_ss1_cfg_frh0_info2","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64023, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x64023, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x64023, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x64023, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x64023, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x68023, "red_ss2_cfg_frh0_info2","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68023, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x68023, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x68023, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x68023, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x68023, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x6c023, "red_ss3_cfg_frh0_info2","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c023, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x6c023, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x6c023, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x6c023, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x6c023, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )


   RDW_DEF("ss", 0x60024, "red_ss0_cfg_frh1_info2","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60024, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x60024, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x60024, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x60024, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x60024, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x64024, "red_ss1_cfg_frh1_info2","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64024, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x64024, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x64024, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x64024, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x64024, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x68024, "red_ss2_cfg_frh1_info2","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68024, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x68024, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x68024, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x68024, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x68024, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x6c024, "red_ss3_cfg_frh1_info2","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c024, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x6c024, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x6c024, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x6c024, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x6c024, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )


   RDW_DEF("ss", 0x60025, "red_ss0_cfg_frh2_info2","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60025, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x60025, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x60025, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x60025, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x60025, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x64025, "red_ss1_cfg_frh2_info2","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64025, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x64025, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x64025, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x64025, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x64025, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x68025, "red_ss2_cfg_frh2_info2","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68025, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x68025, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x68025, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x68025, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x68025, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x6c025, "red_ss3_cfg_frh2_info2","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c025, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x6c025, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x6c025, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x6c025, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x6c025, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )


   RDW_DEF("ss", 0x60026, "red_ss0_cfg_frh3_info2","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60026, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x60026, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x60026, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x60026, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x60026, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x64026, "red_ss1_cfg_frh3_info2","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64026, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x64026, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x64026, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x64026, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x64026, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x68026, "red_ss2_cfg_frh3_info2","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68026, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x68026, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x68026, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x68026, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x68026, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x6c026, "red_ss3_cfg_frh3_info2","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c026, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x6c026, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x6c026, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x6c026, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x6c026, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )


   RDW_DEF("ss", 0x60027, "red_ss0_cfg_glb_pause2","Global pause control""", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60027, "frh",3,0, "which FRHs participate in the global pause. HW counts the total cells used by the\nparticipating FRHs and if they exceed the programmed threshold global_pause_threshold,\ngenerates pause to the link classes that are programmed in global_pause_classes""", "" )
   RDW_DEF_FLD( 0x60027, "classes",7,4, "when the frh cells exceeds the programmed threshold, BM generates pause on these classes""", "" )
   RDW_DEF_FLD( 0x60027, "threshold",15,8, "Xoff threshold in terms of 16 cells. Same as other FRHs.""", "" )
   RDW_DEF_FLD( 0x60027, "total_cells",23,16, "number of credits for all the FRHs mapped to global pause, Interms of 16 cells.\nThis is useful to discard frames in the case of global\npause reached before the actual pause from the real FRHs. Xon will happen when all the \nmember FRHs are less than their Xon thresholds. Still the total restriction is no more \nthan 4k cells (12 bits)""", "" )
   RDW_DEF("ss", 0x64027, "red_ss1_cfg_glb_pause2","Global pause control""", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64027, "frh",3,0, "which FRHs participate in the global pause. HW counts the total cells used by the\nparticipating FRHs and if they exceed the programmed threshold global_pause_threshold,\ngenerates pause to the link classes that are programmed in global_pause_classes""", "" )
   RDW_DEF_FLD( 0x64027, "classes",7,4, "when the frh cells exceeds the programmed threshold, BM generates pause on these classes""", "" )
   RDW_DEF_FLD( 0x64027, "threshold",15,8, "Xoff threshold in terms of 16 cells. Same as other FRHs.""", "" )
   RDW_DEF_FLD( 0x64027, "total_cells",23,16, "number of credits for all the FRHs mapped to global pause, Interms of 16 cells.\nThis is useful to discard frames in the case of global\npause reached before the actual pause from the real FRHs. Xon will happen when all the \nmember FRHs are less than their Xon thresholds. Still the total restriction is no more \nthan 4k cells (12 bits)""", "" )
   RDW_DEF("ss", 0x68027, "red_ss2_cfg_glb_pause2","Global pause control""", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68027, "frh",3,0, "which FRHs participate in the global pause. HW counts the total cells used by the\nparticipating FRHs and if they exceed the programmed threshold global_pause_threshold,\ngenerates pause to the link classes that are programmed in global_pause_classes""", "" )
   RDW_DEF_FLD( 0x68027, "classes",7,4, "when the frh cells exceeds the programmed threshold, BM generates pause on these classes""", "" )
   RDW_DEF_FLD( 0x68027, "threshold",15,8, "Xoff threshold in terms of 16 cells. Same as other FRHs.""", "" )
   RDW_DEF_FLD( 0x68027, "total_cells",23,16, "number of credits for all the FRHs mapped to global pause, Interms of 16 cells.\nThis is useful to discard frames in the case of global\npause reached before the actual pause from the real FRHs. Xon will happen when all the \nmember FRHs are less than their Xon thresholds. Still the total restriction is no more \nthan 4k cells (12 bits)""", "" )
   RDW_DEF("ss", 0x6c027, "red_ss3_cfg_glb_pause2","Global pause control""", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c027, "frh",3,0, "which FRHs participate in the global pause. HW counts the total cells used by the\nparticipating FRHs and if they exceed the programmed threshold global_pause_threshold,\ngenerates pause to the link classes that are programmed in global_pause_classes""", "" )
   RDW_DEF_FLD( 0x6c027, "classes",7,4, "when the frh cells exceeds the programmed threshold, BM generates pause on these classes""", "" )
   RDW_DEF_FLD( 0x6c027, "threshold",15,8, "Xoff threshold in terms of 16 cells. Same as other FRHs.""", "" )
   RDW_DEF_FLD( 0x6c027, "total_cells",23,16, "number of credits for all the FRHs mapped to global pause, Interms of 16 cells.\nThis is useful to discard frames in the case of global\npause reached before the actual pause from the real FRHs. Xon will happen when all the \nmember FRHs are less than their Xon thresholds. Still the total restriction is no more \nthan 4k cells (12 bits)""", "" )


   RDW_DEF("ss", 0x60028, "red_ss0_cfg_mcast2","mcast info2 for discard purpose to mask or discard mcast frames""", 0x1fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60028, "drop_threshold",7,0, "if\nSS will start dropping the low priority MC frames. In terms of 16 cells.""", "" )
   RDW_DEF_FLD( 0x60028, "drop_en",12,8, "If this bit is set the mcast frames can be droppable based on the drop ok info from FW. Either\nall ports or none. Valid valies 5'h1f or 5'h0. Otherwise hw multicast counts are not going to match""", "" )
   RDW_DEF("ss", 0x64028, "red_ss1_cfg_mcast2","mcast info2 for discard purpose to mask or discard mcast frames""", 0x1fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64028, "drop_threshold",7,0, "if\nSS will start dropping the low priority MC frames. In terms of 16 cells.""", "" )
   RDW_DEF_FLD( 0x64028, "drop_en",12,8, "If this bit is set the mcast frames can be droppable based on the drop ok info from FW. Either\nall ports or none. Valid valies 5'h1f or 5'h0. Otherwise hw multicast counts are not going to match""", "" )
   RDW_DEF("ss", 0x68028, "red_ss2_cfg_mcast2","mcast info2 for discard purpose to mask or discard mcast frames""", 0x1fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68028, "drop_threshold",7,0, "if\nSS will start dropping the low priority MC frames. In terms of 16 cells.""", "" )
   RDW_DEF_FLD( 0x68028, "drop_en",12,8, "If this bit is set the mcast frames can be droppable based on the drop ok info from FW. Either\nall ports or none. Valid valies 5'h1f or 5'h0. Otherwise hw multicast counts are not going to match""", "" )
   RDW_DEF("ss", 0x6c028, "red_ss3_cfg_mcast2","mcast info2 for discard purpose to mask or discard mcast frames""", 0x1fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c028, "drop_threshold",7,0, "if\nSS will start dropping the low priority MC frames. In terms of 16 cells.""", "" )
   RDW_DEF_FLD( 0x6c028, "drop_en",12,8, "If this bit is set the mcast frames can be droppable based on the drop ok info from FW. Either\nall ports or none. Valid valies 5'h1f or 5'h0. Otherwise hw multicast counts are not going to match""", "" )


   RDW_DEF("ss", 0x60029, "red_ss0_sta_frh0_port2","frh0 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x60029, "busy_cnt",11,0, "cells currently used by frh0""", "" )
   RDW_DEF("ss", 0x64029, "red_ss1_sta_frh0_port2","frh0 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x64029, "busy_cnt",11,0, "cells currently used by frh0""", "" )
   RDW_DEF("ss", 0x68029, "red_ss2_sta_frh0_port2","frh0 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x68029, "busy_cnt",11,0, "cells currently used by frh0""", "" )
   RDW_DEF("ss", 0x6c029, "red_ss3_sta_frh0_port2","frh0 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c029, "busy_cnt",11,0, "cells currently used by frh0""", "" )


   RDW_DEF("ss", 0x6002a, "red_ss0_sta_frh1_port2","frh1 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6002a, "busy_cnt",11,0, "cells currently used by frh1""", "" )
   RDW_DEF("ss", 0x6402a, "red_ss1_sta_frh1_port2","frh1 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6402a, "busy_cnt",11,0, "cells currently used by frh1""", "" )
   RDW_DEF("ss", 0x6802a, "red_ss2_sta_frh1_port2","frh1 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6802a, "busy_cnt",11,0, "cells currently used by frh1""", "" )
   RDW_DEF("ss", 0x6c02a, "red_ss3_sta_frh1_port2","frh1 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c02a, "busy_cnt",11,0, "cells currently used by frh1""", "" )


   RDW_DEF("ss", 0x6002b, "red_ss0_sta_frh2_port2","frh2 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6002b, "busy_cnt",11,0, "cells currently used by frh2""", "" )
   RDW_DEF("ss", 0x6402b, "red_ss1_sta_frh2_port2","frh2 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6402b, "busy_cnt",11,0, "cells currently used by frh2""", "" )
   RDW_DEF("ss", 0x6802b, "red_ss2_sta_frh2_port2","frh2 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6802b, "busy_cnt",11,0, "cells currently used by frh2""", "" )
   RDW_DEF("ss", 0x6c02b, "red_ss3_sta_frh2_port2","frh2 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c02b, "busy_cnt",11,0, "cells currently used by frh2""", "" )


   RDW_DEF("ss", 0x6002c, "red_ss0_sta_frh3_port2","frh3 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6002c, "busy_cnt",11,0, "cells currently used by frh3""", "" )
   RDW_DEF("ss", 0x6402c, "red_ss1_sta_frh3_port2","frh3 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6402c, "busy_cnt",11,0, "cells currently used by frh3""", "" )
   RDW_DEF("ss", 0x6802c, "red_ss2_sta_frh3_port2","frh3 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6802c, "busy_cnt",11,0, "cells currently used by frh3""", "" )
   RDW_DEF("ss", 0x6c02c, "red_ss3_sta_frh3_port2","frh3 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c02c, "busy_cnt",11,0, "cells currently used by frh3""", "" )


   RDW_DEF("ss", 0x6002d, "red_ss0_sta_mcast2","mcast2 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6002d, "busy_cnt",11,0, "cells currently used by MCast: port2""", "" )
   RDW_DEF("ss", 0x6402d, "red_ss1_sta_mcast2","mcast2 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6402d, "busy_cnt",11,0, "cells currently used by MCast: port2""", "" )
   RDW_DEF("ss", 0x6802d, "red_ss2_sta_mcast2","mcast2 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6802d, "busy_cnt",11,0, "cells currently used by MCast: port2""", "" )
   RDW_DEF("ss", 0x6c02d, "red_ss3_sta_mcast2","mcast2 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c02d, "busy_cnt",11,0, "cells currently used by MCast: port2""", "" )


   RDW_DEF("ss", 0x6002e, "red_ss0_cfg_wr_port3","wr_port3 config register""", 0x1fffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6002e, "en",0,0, "port enable.""", "" )
   RDW_DEF_FLD( 0x6002e, "err_disc",1,1, "discard frames when error happend""", "" )
   RDW_DEF_FLD( 0x6002e, "ct",5,2, "cut through enabled. Per out class based.""", "" )
   RDW_DEF_FLD( 0x6002e, "ct_min",19,6, "cut through minimum threshold. After this threshold wrch enqueues the frame to OQ.\nMinimum 80 bytes.""", "" )
   RDW_DEF_FLD( 0x6002e, "em_stop_en",20,20, "emergency stop enable.""", "" )
   RDW_DEF("ss", 0x6402e, "red_ss1_cfg_wr_port3","wr_port3 config register""", 0x1fffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6402e, "en",0,0, "port enable.""", "" )
   RDW_DEF_FLD( 0x6402e, "err_disc",1,1, "discard frames when error happend""", "" )
   RDW_DEF_FLD( 0x6402e, "ct",5,2, "cut through enabled. Per out class based.""", "" )
   RDW_DEF_FLD( 0x6402e, "ct_min",19,6, "cut through minimum threshold. After this threshold wrch enqueues the frame to OQ.\nMinimum 80 bytes.""", "" )
   RDW_DEF_FLD( 0x6402e, "em_stop_en",20,20, "emergency stop enable.""", "" )
   RDW_DEF("ss", 0x6802e, "red_ss2_cfg_wr_port3","wr_port3 config register""", 0x1fffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6802e, "en",0,0, "port enable.""", "" )
   RDW_DEF_FLD( 0x6802e, "err_disc",1,1, "discard frames when error happend""", "" )
   RDW_DEF_FLD( 0x6802e, "ct",5,2, "cut through enabled. Per out class based.""", "" )
   RDW_DEF_FLD( 0x6802e, "ct_min",19,6, "cut through minimum threshold. After this threshold wrch enqueues the frame to OQ.\nMinimum 80 bytes.""", "" )
   RDW_DEF_FLD( 0x6802e, "em_stop_en",20,20, "emergency stop enable.""", "" )
   RDW_DEF("ss", 0x6c02e, "red_ss3_cfg_wr_port3","wr_port3 config register""", 0x1fffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c02e, "en",0,0, "port enable.""", "" )
   RDW_DEF_FLD( 0x6c02e, "err_disc",1,1, "discard frames when error happend""", "" )
   RDW_DEF_FLD( 0x6c02e, "ct",5,2, "cut through enabled. Per out class based.""", "" )
   RDW_DEF_FLD( 0x6c02e, "ct_min",19,6, "cut through minimum threshold. After this threshold wrch enqueues the frame to OQ.\nMinimum 80 bytes.""", "" )
   RDW_DEF_FLD( 0x6c02e, "em_stop_en",20,20, "emergency stop enable.""", "" )


   RDW_DEF("ss", 0x6002f, "red_ss0_cfg_class_max3","port3: class max size register""", 0x7f7f7f7f, 0x0, "cfg")
   RDW_DEF_FLD( 0x6002f, "cells0",6,0, "max size per class0\n0000001 - 1 cell, 0111111 - 63 cells, 1111111 - 127 cells. 000000 - illegal""", "" )
   RDW_DEF_FLD( 0x6002f, "cells1",14,8, "max size per class1""", "" )
   RDW_DEF_FLD( 0x6002f, "cells2",22,16, "max size per class2""", "" )
   RDW_DEF_FLD( 0x6002f, "cells3",30,24, "max size per class3""", "" )
   RDW_DEF("ss", 0x6402f, "red_ss1_cfg_class_max3","port3: class max size register""", 0x7f7f7f7f, 0x0, "cfg")
   RDW_DEF_FLD( 0x6402f, "cells0",6,0, "max size per class0\n0000001 - 1 cell, 0111111 - 63 cells, 1111111 - 127 cells. 000000 - illegal""", "" )
   RDW_DEF_FLD( 0x6402f, "cells1",14,8, "max size per class1""", "" )
   RDW_DEF_FLD( 0x6402f, "cells2",22,16, "max size per class2""", "" )
   RDW_DEF_FLD( 0x6402f, "cells3",30,24, "max size per class3""", "" )
   RDW_DEF("ss", 0x6802f, "red_ss2_cfg_class_max3","port3: class max size register""", 0x7f7f7f7f, 0x0, "cfg")
   RDW_DEF_FLD( 0x6802f, "cells0",6,0, "max size per class0\n0000001 - 1 cell, 0111111 - 63 cells, 1111111 - 127 cells. 000000 - illegal""", "" )
   RDW_DEF_FLD( 0x6802f, "cells1",14,8, "max size per class1""", "" )
   RDW_DEF_FLD( 0x6802f, "cells2",22,16, "max size per class2""", "" )
   RDW_DEF_FLD( 0x6802f, "cells3",30,24, "max size per class3""", "" )
   RDW_DEF("ss", 0x6c02f, "red_ss3_cfg_class_max3","port3: class max size register""", 0x7f7f7f7f, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c02f, "cells0",6,0, "max size per class0\n0000001 - 1 cell, 0111111 - 63 cells, 1111111 - 127 cells. 000000 - illegal""", "" )
   RDW_DEF_FLD( 0x6c02f, "cells1",14,8, "max size per class1""", "" )
   RDW_DEF_FLD( 0x6c02f, "cells2",22,16, "max size per class2""", "" )
   RDW_DEF_FLD( 0x6c02f, "cells3",30,24, "max size per class3""", "" )


   RDW_DEF("ss", 0x60030, "red_ss0_cfg_resrc3","resource class to frh map """, 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60030, "map",7,0, "mappping resource class to frh mapping. For 10G/1G mode:\n1:0 - for class0; 3:2 - for class1;\n5:4 - for class2; 7:6 - for class3""", "" )
   RDW_DEF("ss", 0x64030, "red_ss1_cfg_resrc3","resource class to frh map """, 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64030, "map",7,0, "mappping resource class to frh mapping. For 10G/1G mode:\n1:0 - for class0; 3:2 - for class1;\n5:4 - for class2; 7:6 - for class3""", "" )
   RDW_DEF("ss", 0x68030, "red_ss2_cfg_resrc3","resource class to frh map """, 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68030, "map",7,0, "mappping resource class to frh mapping. For 10G/1G mode:\n1:0 - for class0; 3:2 - for class1;\n5:4 - for class2; 7:6 - for class3""", "" )
   RDW_DEF("ss", 0x6c030, "red_ss3_cfg_resrc3","resource class to frh map """, 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c030, "map",7,0, "mappping resource class to frh mapping. For 10G/1G mode:\n1:0 - for class0; 3:2 - for class1;\n5:4 - for class2; 7:6 - for class3""", "" )


   RDW_DEF("ss", 0x60031, "red_ss0_cfg_frh0_info3","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60031, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x60031, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x60031, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x60031, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x60031, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x64031, "red_ss1_cfg_frh0_info3","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64031, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x64031, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x64031, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x64031, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x64031, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x68031, "red_ss2_cfg_frh0_info3","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68031, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x68031, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x68031, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x68031, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x68031, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x6c031, "red_ss3_cfg_frh0_info3","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c031, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x6c031, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x6c031, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x6c031, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x6c031, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )


   RDW_DEF("ss", 0x60032, "red_ss0_cfg_frh1_info3","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60032, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x60032, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x60032, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x60032, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x60032, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x64032, "red_ss1_cfg_frh1_info3","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64032, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x64032, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x64032, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x64032, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x64032, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x68032, "red_ss2_cfg_frh1_info3","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68032, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x68032, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x68032, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x68032, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x68032, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x6c032, "red_ss3_cfg_frh1_info3","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c032, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x6c032, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x6c032, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x6c032, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x6c032, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )


   RDW_DEF("ss", 0x60033, "red_ss0_cfg_frh2_info3","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60033, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x60033, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x60033, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x60033, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x60033, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x64033, "red_ss1_cfg_frh2_info3","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64033, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x64033, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x64033, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x64033, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x64033, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x68033, "red_ss2_cfg_frh2_info3","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68033, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x68033, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x68033, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x68033, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x68033, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x6c033, "red_ss3_cfg_frh2_info3","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c033, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x6c033, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x6c033, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x6c033, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x6c033, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )


   RDW_DEF("ss", 0x60034, "red_ss0_cfg_frh3_info3","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60034, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x60034, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x60034, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x60034, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x60034, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x64034, "red_ss1_cfg_frh3_info3","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64034, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x64034, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x64034, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x64034, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x64034, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x68034, "red_ss2_cfg_frh3_info3","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68034, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x68034, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x68034, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x68034, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x68034, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x6c034, "red_ss3_cfg_frh3_info3","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c034, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x6c034, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x6c034, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x6c034, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x6c034, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )


   RDW_DEF("ss", 0x60035, "red_ss0_cfg_glb_pause3","Global pause control""", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60035, "frh",3,0, "which FRHs participate in the global pause. HW counts the total cells used by the\nparticipating FRHs and if they exceed the programmed threshold global_pause_threshold,\ngenerates pause to the link classes that are programmed in global_pause_classes""", "" )
   RDW_DEF_FLD( 0x60035, "classes",7,4, "when the frh cells exceeds the programmed threshold, BM generates pause on these classes""", "" )
   RDW_DEF_FLD( 0x60035, "threshold",15,8, "Xoff threshold in terms of 16 cells. Same as other FRHs.""", "" )
   RDW_DEF_FLD( 0x60035, "total_cells",23,16, "number of credits for all the FRHs mapped to global pause, Interms of 16 cells.\nThis is useful to discard frames in the case of global\npause reached before the actual pause from the real FRHs. Xon will happen when all the \nmember FRHs are less than their Xon thresholds. Still the total restriction is no more \nthan 4k cells (12 bits)""", "" )
   RDW_DEF("ss", 0x64035, "red_ss1_cfg_glb_pause3","Global pause control""", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64035, "frh",3,0, "which FRHs participate in the global pause. HW counts the total cells used by the\nparticipating FRHs and if they exceed the programmed threshold global_pause_threshold,\ngenerates pause to the link classes that are programmed in global_pause_classes""", "" )
   RDW_DEF_FLD( 0x64035, "classes",7,4, "when the frh cells exceeds the programmed threshold, BM generates pause on these classes""", "" )
   RDW_DEF_FLD( 0x64035, "threshold",15,8, "Xoff threshold in terms of 16 cells. Same as other FRHs.""", "" )
   RDW_DEF_FLD( 0x64035, "total_cells",23,16, "number of credits for all the FRHs mapped to global pause, Interms of 16 cells.\nThis is useful to discard frames in the case of global\npause reached before the actual pause from the real FRHs. Xon will happen when all the \nmember FRHs are less than their Xon thresholds. Still the total restriction is no more \nthan 4k cells (12 bits)""", "" )
   RDW_DEF("ss", 0x68035, "red_ss2_cfg_glb_pause3","Global pause control""", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68035, "frh",3,0, "which FRHs participate in the global pause. HW counts the total cells used by the\nparticipating FRHs and if they exceed the programmed threshold global_pause_threshold,\ngenerates pause to the link classes that are programmed in global_pause_classes""", "" )
   RDW_DEF_FLD( 0x68035, "classes",7,4, "when the frh cells exceeds the programmed threshold, BM generates pause on these classes""", "" )
   RDW_DEF_FLD( 0x68035, "threshold",15,8, "Xoff threshold in terms of 16 cells. Same as other FRHs.""", "" )
   RDW_DEF_FLD( 0x68035, "total_cells",23,16, "number of credits for all the FRHs mapped to global pause, Interms of 16 cells.\nThis is useful to discard frames in the case of global\npause reached before the actual pause from the real FRHs. Xon will happen when all the \nmember FRHs are less than their Xon thresholds. Still the total restriction is no more \nthan 4k cells (12 bits)""", "" )
   RDW_DEF("ss", 0x6c035, "red_ss3_cfg_glb_pause3","Global pause control""", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c035, "frh",3,0, "which FRHs participate in the global pause. HW counts the total cells used by the\nparticipating FRHs and if they exceed the programmed threshold global_pause_threshold,\ngenerates pause to the link classes that are programmed in global_pause_classes""", "" )
   RDW_DEF_FLD( 0x6c035, "classes",7,4, "when the frh cells exceeds the programmed threshold, BM generates pause on these classes""", "" )
   RDW_DEF_FLD( 0x6c035, "threshold",15,8, "Xoff threshold in terms of 16 cells. Same as other FRHs.""", "" )
   RDW_DEF_FLD( 0x6c035, "total_cells",23,16, "number of credits for all the FRHs mapped to global pause, Interms of 16 cells.\nThis is useful to discard frames in the case of global\npause reached before the actual pause from the real FRHs. Xon will happen when all the \nmember FRHs are less than their Xon thresholds. Still the total restriction is no more \nthan 4k cells (12 bits)""", "" )


   RDW_DEF("ss", 0x60036, "red_ss0_cfg_mcast3","mcast info3 for discard purpose to mask or discard mcast frames""", 0x1fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60036, "drop_threshold",7,0, "if\nSS will start dropping the low priority MC frames. In terms of 16 cells.""", "" )
   RDW_DEF_FLD( 0x60036, "drop_en",12,8, "If this bit is set the mcast frames can be droppable based on the drop ok info from FW. Either\nall ports or none. Valid valies 5'h1f or 5'h0. Otherwise hw multicast counts are not going to match""", "" )
   RDW_DEF("ss", 0x64036, "red_ss1_cfg_mcast3","mcast info3 for discard purpose to mask or discard mcast frames""", 0x1fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64036, "drop_threshold",7,0, "if\nSS will start dropping the low priority MC frames. In terms of 16 cells.""", "" )
   RDW_DEF_FLD( 0x64036, "drop_en",12,8, "If this bit is set the mcast frames can be droppable based on the drop ok info from FW. Either\nall ports or none. Valid valies 5'h1f or 5'h0. Otherwise hw multicast counts are not going to match""", "" )
   RDW_DEF("ss", 0x68036, "red_ss2_cfg_mcast3","mcast info3 for discard purpose to mask or discard mcast frames""", 0x1fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68036, "drop_threshold",7,0, "if\nSS will start dropping the low priority MC frames. In terms of 16 cells.""", "" )
   RDW_DEF_FLD( 0x68036, "drop_en",12,8, "If this bit is set the mcast frames can be droppable based on the drop ok info from FW. Either\nall ports or none. Valid valies 5'h1f or 5'h0. Otherwise hw multicast counts are not going to match""", "" )
   RDW_DEF("ss", 0x6c036, "red_ss3_cfg_mcast3","mcast info3 for discard purpose to mask or discard mcast frames""", 0x1fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c036, "drop_threshold",7,0, "if\nSS will start dropping the low priority MC frames. In terms of 16 cells.""", "" )
   RDW_DEF_FLD( 0x6c036, "drop_en",12,8, "If this bit is set the mcast frames can be droppable based on the drop ok info from FW. Either\nall ports or none. Valid valies 5'h1f or 5'h0. Otherwise hw multicast counts are not going to match""", "" )


   RDW_DEF("ss", 0x60037, "red_ss0_sta_frh0_port3","frh0 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x60037, "busy_cnt",11,0, "cells currently used by frh0""", "" )
   RDW_DEF("ss", 0x64037, "red_ss1_sta_frh0_port3","frh0 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x64037, "busy_cnt",11,0, "cells currently used by frh0""", "" )
   RDW_DEF("ss", 0x68037, "red_ss2_sta_frh0_port3","frh0 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x68037, "busy_cnt",11,0, "cells currently used by frh0""", "" )
   RDW_DEF("ss", 0x6c037, "red_ss3_sta_frh0_port3","frh0 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c037, "busy_cnt",11,0, "cells currently used by frh0""", "" )


   RDW_DEF("ss", 0x60038, "red_ss0_sta_frh1_port3","frh1 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x60038, "busy_cnt",11,0, "cells currently used by frh1""", "" )
   RDW_DEF("ss", 0x64038, "red_ss1_sta_frh1_port3","frh1 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x64038, "busy_cnt",11,0, "cells currently used by frh1""", "" )
   RDW_DEF("ss", 0x68038, "red_ss2_sta_frh1_port3","frh1 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x68038, "busy_cnt",11,0, "cells currently used by frh1""", "" )
   RDW_DEF("ss", 0x6c038, "red_ss3_sta_frh1_port3","frh1 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c038, "busy_cnt",11,0, "cells currently used by frh1""", "" )


   RDW_DEF("ss", 0x60039, "red_ss0_sta_frh2_port3","frh2 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x60039, "busy_cnt",11,0, "cells currently used by frh2""", "" )
   RDW_DEF("ss", 0x64039, "red_ss1_sta_frh2_port3","frh2 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x64039, "busy_cnt",11,0, "cells currently used by frh2""", "" )
   RDW_DEF("ss", 0x68039, "red_ss2_sta_frh2_port3","frh2 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x68039, "busy_cnt",11,0, "cells currently used by frh2""", "" )
   RDW_DEF("ss", 0x6c039, "red_ss3_sta_frh2_port3","frh2 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c039, "busy_cnt",11,0, "cells currently used by frh2""", "" )


   RDW_DEF("ss", 0x6003a, "red_ss0_sta_frh3_port3","frh3 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6003a, "busy_cnt",11,0, "cells currently used by frh3""", "" )
   RDW_DEF("ss", 0x6403a, "red_ss1_sta_frh3_port3","frh3 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6403a, "busy_cnt",11,0, "cells currently used by frh3""", "" )
   RDW_DEF("ss", 0x6803a, "red_ss2_sta_frh3_port3","frh3 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6803a, "busy_cnt",11,0, "cells currently used by frh3""", "" )
   RDW_DEF("ss", 0x6c03a, "red_ss3_sta_frh3_port3","frh3 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c03a, "busy_cnt",11,0, "cells currently used by frh3""", "" )


   RDW_DEF("ss", 0x6003b, "red_ss0_sta_mcast3","mcast3 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6003b, "busy_cnt",11,0, "cells currently used by MCast: port3""", "" )
   RDW_DEF("ss", 0x6403b, "red_ss1_sta_mcast3","mcast3 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6403b, "busy_cnt",11,0, "cells currently used by MCast: port3""", "" )
   RDW_DEF("ss", 0x6803b, "red_ss2_sta_mcast3","mcast3 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6803b, "busy_cnt",11,0, "cells currently used by MCast: port3""", "" )
   RDW_DEF("ss", 0x6c03b, "red_ss3_sta_mcast3","mcast3 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c03b, "busy_cnt",11,0, "cells currently used by MCast: port3""", "" )


   RDW_DEF("ss", 0x6003c, "red_ss0_cfg_wr_port4","wr_port4 config register""", 0x1fffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6003c, "en",0,0, "port enable.""", "" )
   RDW_DEF_FLD( 0x6003c, "err_disc",1,1, "discard frames when error happend""", "" )
   RDW_DEF_FLD( 0x6003c, "ct",5,2, "cut through enabled. Per out class based.""", "" )
   RDW_DEF_FLD( 0x6003c, "ct_min",19,6, "cut through minimum threshold. After this threshold wrch enqueues the frame to OQ.\nMinimum 80 bytes.""", "" )
   RDW_DEF_FLD( 0x6003c, "em_stop_en",20,20, "emergency stop enable.""", "" )
   RDW_DEF("ss", 0x6403c, "red_ss1_cfg_wr_port4","wr_port4 config register""", 0x1fffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6403c, "en",0,0, "port enable.""", "" )
   RDW_DEF_FLD( 0x6403c, "err_disc",1,1, "discard frames when error happend""", "" )
   RDW_DEF_FLD( 0x6403c, "ct",5,2, "cut through enabled. Per out class based.""", "" )
   RDW_DEF_FLD( 0x6403c, "ct_min",19,6, "cut through minimum threshold. After this threshold wrch enqueues the frame to OQ.\nMinimum 80 bytes.""", "" )
   RDW_DEF_FLD( 0x6403c, "em_stop_en",20,20, "emergency stop enable.""", "" )
   RDW_DEF("ss", 0x6803c, "red_ss2_cfg_wr_port4","wr_port4 config register""", 0x1fffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6803c, "en",0,0, "port enable.""", "" )
   RDW_DEF_FLD( 0x6803c, "err_disc",1,1, "discard frames when error happend""", "" )
   RDW_DEF_FLD( 0x6803c, "ct",5,2, "cut through enabled. Per out class based.""", "" )
   RDW_DEF_FLD( 0x6803c, "ct_min",19,6, "cut through minimum threshold. After this threshold wrch enqueues the frame to OQ.\nMinimum 80 bytes.""", "" )
   RDW_DEF_FLD( 0x6803c, "em_stop_en",20,20, "emergency stop enable.""", "" )
   RDW_DEF("ss", 0x6c03c, "red_ss3_cfg_wr_port4","wr_port4 config register""", 0x1fffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c03c, "en",0,0, "port enable.""", "" )
   RDW_DEF_FLD( 0x6c03c, "err_disc",1,1, "discard frames when error happend""", "" )
   RDW_DEF_FLD( 0x6c03c, "ct",5,2, "cut through enabled. Per out class based.""", "" )
   RDW_DEF_FLD( 0x6c03c, "ct_min",19,6, "cut through minimum threshold. After this threshold wrch enqueues the frame to OQ.\nMinimum 80 bytes.""", "" )
   RDW_DEF_FLD( 0x6c03c, "em_stop_en",20,20, "emergency stop enable.""", "" )


   RDW_DEF("ss", 0x6003d, "red_ss0_cfg_class_max4","port4: class max size register""", 0x7f7f7f7f, 0x0, "cfg")
   RDW_DEF_FLD( 0x6003d, "cells0",6,0, "max size per class0\n0000001 - 1 cell, 0111111 - 63 cells, 1111111 - 127 cells. 000000 - illegal""", "" )
   RDW_DEF_FLD( 0x6003d, "cells1",14,8, "max size per class1""", "" )
   RDW_DEF_FLD( 0x6003d, "cells2",22,16, "max size per class2""", "" )
   RDW_DEF_FLD( 0x6003d, "cells3",30,24, "max size per class3""", "" )
   RDW_DEF("ss", 0x6403d, "red_ss1_cfg_class_max4","port4: class max size register""", 0x7f7f7f7f, 0x0, "cfg")
   RDW_DEF_FLD( 0x6403d, "cells0",6,0, "max size per class0\n0000001 - 1 cell, 0111111 - 63 cells, 1111111 - 127 cells. 000000 - illegal""", "" )
   RDW_DEF_FLD( 0x6403d, "cells1",14,8, "max size per class1""", "" )
   RDW_DEF_FLD( 0x6403d, "cells2",22,16, "max size per class2""", "" )
   RDW_DEF_FLD( 0x6403d, "cells3",30,24, "max size per class3""", "" )
   RDW_DEF("ss", 0x6803d, "red_ss2_cfg_class_max4","port4: class max size register""", 0x7f7f7f7f, 0x0, "cfg")
   RDW_DEF_FLD( 0x6803d, "cells0",6,0, "max size per class0\n0000001 - 1 cell, 0111111 - 63 cells, 1111111 - 127 cells. 000000 - illegal""", "" )
   RDW_DEF_FLD( 0x6803d, "cells1",14,8, "max size per class1""", "" )
   RDW_DEF_FLD( 0x6803d, "cells2",22,16, "max size per class2""", "" )
   RDW_DEF_FLD( 0x6803d, "cells3",30,24, "max size per class3""", "" )
   RDW_DEF("ss", 0x6c03d, "red_ss3_cfg_class_max4","port4: class max size register""", 0x7f7f7f7f, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c03d, "cells0",6,0, "max size per class0\n0000001 - 1 cell, 0111111 - 63 cells, 1111111 - 127 cells. 000000 - illegal""", "" )
   RDW_DEF_FLD( 0x6c03d, "cells1",14,8, "max size per class1""", "" )
   RDW_DEF_FLD( 0x6c03d, "cells2",22,16, "max size per class2""", "" )
   RDW_DEF_FLD( 0x6c03d, "cells3",30,24, "max size per class3""", "" )


   RDW_DEF("ss", 0x6003e, "red_ss0_cfg_resrc4","resource class to frh map """, 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6003e, "map",7,0, "mappping resource class to frh mapping. For 10G/1G mode:\n1:0 - for class0; 3:2 - for class1;\n5:4 - for class2; 7:6 - for class3""", "" )
   RDW_DEF("ss", 0x6403e, "red_ss1_cfg_resrc4","resource class to frh map """, 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6403e, "map",7,0, "mappping resource class to frh mapping. For 10G/1G mode:\n1:0 - for class0; 3:2 - for class1;\n5:4 - for class2; 7:6 - for class3""", "" )
   RDW_DEF("ss", 0x6803e, "red_ss2_cfg_resrc4","resource class to frh map """, 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6803e, "map",7,0, "mappping resource class to frh mapping. For 10G/1G mode:\n1:0 - for class0; 3:2 - for class1;\n5:4 - for class2; 7:6 - for class3""", "" )
   RDW_DEF("ss", 0x6c03e, "red_ss3_cfg_resrc4","resource class to frh map """, 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c03e, "map",7,0, "mappping resource class to frh mapping. For 10G/1G mode:\n1:0 - for class0; 3:2 - for class1;\n5:4 - for class2; 7:6 - for class3""", "" )


   RDW_DEF("ss", 0x6003f, "red_ss0_cfg_frh0_info4","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6003f, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x6003f, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x6003f, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x6003f, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x6003f, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x6403f, "red_ss1_cfg_frh0_info4","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6403f, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x6403f, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x6403f, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x6403f, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x6403f, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x6803f, "red_ss2_cfg_frh0_info4","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6803f, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x6803f, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x6803f, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x6803f, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x6803f, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x6c03f, "red_ss3_cfg_frh0_info4","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c03f, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x6c03f, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x6c03f, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x6c03f, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x6c03f, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )


   RDW_DEF("ss", 0x60040, "red_ss0_cfg_frh1_info4","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60040, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x60040, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x60040, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x60040, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x60040, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x64040, "red_ss1_cfg_frh1_info4","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64040, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x64040, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x64040, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x64040, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x64040, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x68040, "red_ss2_cfg_frh1_info4","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68040, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x68040, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x68040, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x68040, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x68040, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x6c040, "red_ss3_cfg_frh1_info4","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c040, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x6c040, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x6c040, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x6c040, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x6c040, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )


   RDW_DEF("ss", 0x60041, "red_ss0_cfg_frh2_info4","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60041, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x60041, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x60041, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x60041, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x60041, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x64041, "red_ss1_cfg_frh2_info4","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64041, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x64041, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x64041, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x64041, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x64041, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x68041, "red_ss2_cfg_frh2_info4","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68041, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x68041, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x68041, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x68041, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x68041, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x6c041, "red_ss3_cfg_frh2_info4","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c041, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x6c041, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x6c041, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x6c041, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x6c041, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )


   RDW_DEF("ss", 0x60042, "red_ss0_cfg_frh3_info4","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60042, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x60042, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x60042, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x60042, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x60042, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x64042, "red_ss1_cfg_frh3_info4","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64042, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x64042, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x64042, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x64042, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x64042, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x68042, "red_ss2_cfg_frh3_info4","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68042, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x68042, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x68042, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x68042, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x68042, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )
   RDW_DEF("ss", 0x6c042, "red_ss3_cfg_frh3_info4","Flexible resource handler 0""", 0x1ffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c042, "total_cells",7,0, "number of credits for all the classes mapped to FRH0, Interms of 16 cells.\nMaximum 4080 (FF * 16) cells per FRH""", "" )
   RDW_DEF_FLD( 0x6c042, "members",11,8, "member classes.""", "" )
   RDW_DEF_FLD( 0x6c042, "xoff_threshold",19,12, "xoff threshold in term of 16 cells. FC no action. Max Xoff allowed 4080 (FF * 16) cells""", "" )
   RDW_DEF_FLD( 0x6c042, "xon_threshold",23,20, "xon threshold in term of 16 cells. FC no action. Max XON allowed (F*16) 240 cells""", "" )
   RDW_DEF_FLD( 0x6c042, "action",24,24, "1 means pause, 0 means delayed drop. FC no action""", "" )


   RDW_DEF("ss", 0x60043, "red_ss0_cfg_glb_pause4","Global pause control""", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60043, "frh",3,0, "which FRHs participate in the global pause. HW counts the total cells used by the\nparticipating FRHs and if they exceed the programmed threshold global_pause_threshold,\ngenerates pause to the link classes that are programmed in global_pause_classes""", "" )
   RDW_DEF_FLD( 0x60043, "classes",7,4, "when the frh cells exceeds the programmed threshold, BM generates pause on these classes""", "" )
   RDW_DEF_FLD( 0x60043, "threshold",15,8, "Xoff threshold in terms of 16 cells. Same as other FRHs.""", "" )
   RDW_DEF_FLD( 0x60043, "total_cells",23,16, "number of credits for all the FRHs mapped to global pause, Interms of 16 cells.\nThis is useful to discard frames in the case of global\npause reached before the actual pause from the real FRHs. Xon will happen when all the \nmember FRHs are less than their Xon thresholds. Still the total restriction is no more \nthan 4k cells (12 bits)""", "" )
   RDW_DEF("ss", 0x64043, "red_ss1_cfg_glb_pause4","Global pause control""", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64043, "frh",3,0, "which FRHs participate in the global pause. HW counts the total cells used by the\nparticipating FRHs and if they exceed the programmed threshold global_pause_threshold,\ngenerates pause to the link classes that are programmed in global_pause_classes""", "" )
   RDW_DEF_FLD( 0x64043, "classes",7,4, "when the frh cells exceeds the programmed threshold, BM generates pause on these classes""", "" )
   RDW_DEF_FLD( 0x64043, "threshold",15,8, "Xoff threshold in terms of 16 cells. Same as other FRHs.""", "" )
   RDW_DEF_FLD( 0x64043, "total_cells",23,16, "number of credits for all the FRHs mapped to global pause, Interms of 16 cells.\nThis is useful to discard frames in the case of global\npause reached before the actual pause from the real FRHs. Xon will happen when all the \nmember FRHs are less than their Xon thresholds. Still the total restriction is no more \nthan 4k cells (12 bits)""", "" )
   RDW_DEF("ss", 0x68043, "red_ss2_cfg_glb_pause4","Global pause control""", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68043, "frh",3,0, "which FRHs participate in the global pause. HW counts the total cells used by the\nparticipating FRHs and if they exceed the programmed threshold global_pause_threshold,\ngenerates pause to the link classes that are programmed in global_pause_classes""", "" )
   RDW_DEF_FLD( 0x68043, "classes",7,4, "when the frh cells exceeds the programmed threshold, BM generates pause on these classes""", "" )
   RDW_DEF_FLD( 0x68043, "threshold",15,8, "Xoff threshold in terms of 16 cells. Same as other FRHs.""", "" )
   RDW_DEF_FLD( 0x68043, "total_cells",23,16, "number of credits for all the FRHs mapped to global pause, Interms of 16 cells.\nThis is useful to discard frames in the case of global\npause reached before the actual pause from the real FRHs. Xon will happen when all the \nmember FRHs are less than their Xon thresholds. Still the total restriction is no more \nthan 4k cells (12 bits)""", "" )
   RDW_DEF("ss", 0x6c043, "red_ss3_cfg_glb_pause4","Global pause control""", 0xffffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c043, "frh",3,0, "which FRHs participate in the global pause. HW counts the total cells used by the\nparticipating FRHs and if they exceed the programmed threshold global_pause_threshold,\ngenerates pause to the link classes that are programmed in global_pause_classes""", "" )
   RDW_DEF_FLD( 0x6c043, "classes",7,4, "when the frh cells exceeds the programmed threshold, BM generates pause on these classes""", "" )
   RDW_DEF_FLD( 0x6c043, "threshold",15,8, "Xoff threshold in terms of 16 cells. Same as other FRHs.""", "" )
   RDW_DEF_FLD( 0x6c043, "total_cells",23,16, "number of credits for all the FRHs mapped to global pause, Interms of 16 cells.\nThis is useful to discard frames in the case of global\npause reached before the actual pause from the real FRHs. Xon will happen when all the \nmember FRHs are less than their Xon thresholds. Still the total restriction is no more \nthan 4k cells (12 bits)""", "" )


   RDW_DEF("ss", 0x60044, "red_ss0_cfg_mcast4","mcast info4 for discard purpose to mask or discard mcast frames""", 0x1fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60044, "drop_threshold",7,0, "if\nSS will start dropping the low priority MC frames. In terms of 16 cells.""", "" )
   RDW_DEF_FLD( 0x60044, "drop_en",12,8, "If this bit is set the mcast frames can be droppable based on the drop ok info from FW. Either\nall ports or none. Valid valies 5'h1f or 5'h0. Otherwise hw multicast counts are not going to match""", "" )
   RDW_DEF("ss", 0x64044, "red_ss1_cfg_mcast4","mcast info4 for discard purpose to mask or discard mcast frames""", 0x1fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64044, "drop_threshold",7,0, "if\nSS will start dropping the low priority MC frames. In terms of 16 cells.""", "" )
   RDW_DEF_FLD( 0x64044, "drop_en",12,8, "If this bit is set the mcast frames can be droppable based on the drop ok info from FW. Either\nall ports or none. Valid valies 5'h1f or 5'h0. Otherwise hw multicast counts are not going to match""", "" )
   RDW_DEF("ss", 0x68044, "red_ss2_cfg_mcast4","mcast info4 for discard purpose to mask or discard mcast frames""", 0x1fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68044, "drop_threshold",7,0, "if\nSS will start dropping the low priority MC frames. In terms of 16 cells.""", "" )
   RDW_DEF_FLD( 0x68044, "drop_en",12,8, "If this bit is set the mcast frames can be droppable based on the drop ok info from FW. Either\nall ports or none. Valid valies 5'h1f or 5'h0. Otherwise hw multicast counts are not going to match""", "" )
   RDW_DEF("ss", 0x6c044, "red_ss3_cfg_mcast4","mcast info4 for discard purpose to mask or discard mcast frames""", 0x1fff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c044, "drop_threshold",7,0, "if\nSS will start dropping the low priority MC frames. In terms of 16 cells.""", "" )
   RDW_DEF_FLD( 0x6c044, "drop_en",12,8, "If this bit is set the mcast frames can be droppable based on the drop ok info from FW. Either\nall ports or none. Valid valies 5'h1f or 5'h0. Otherwise hw multicast counts are not going to match""", "" )


   RDW_DEF("ss", 0x60045, "red_ss0_sta_frh0_port4","frh0 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x60045, "busy_cnt",11,0, "cells currently used by frh0""", "" )
   RDW_DEF("ss", 0x64045, "red_ss1_sta_frh0_port4","frh0 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x64045, "busy_cnt",11,0, "cells currently used by frh0""", "" )
   RDW_DEF("ss", 0x68045, "red_ss2_sta_frh0_port4","frh0 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x68045, "busy_cnt",11,0, "cells currently used by frh0""", "" )
   RDW_DEF("ss", 0x6c045, "red_ss3_sta_frh0_port4","frh0 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c045, "busy_cnt",11,0, "cells currently used by frh0""", "" )


   RDW_DEF("ss", 0x60046, "red_ss0_sta_frh1_port4","frh1 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x60046, "busy_cnt",11,0, "cells currently used by frh1""", "" )
   RDW_DEF("ss", 0x64046, "red_ss1_sta_frh1_port4","frh1 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x64046, "busy_cnt",11,0, "cells currently used by frh1""", "" )
   RDW_DEF("ss", 0x68046, "red_ss2_sta_frh1_port4","frh1 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x68046, "busy_cnt",11,0, "cells currently used by frh1""", "" )
   RDW_DEF("ss", 0x6c046, "red_ss3_sta_frh1_port4","frh1 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c046, "busy_cnt",11,0, "cells currently used by frh1""", "" )


   RDW_DEF("ss", 0x60047, "red_ss0_sta_frh2_port4","frh2 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x60047, "busy_cnt",11,0, "cells currently used by frh2""", "" )
   RDW_DEF("ss", 0x64047, "red_ss1_sta_frh2_port4","frh2 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x64047, "busy_cnt",11,0, "cells currently used by frh2""", "" )
   RDW_DEF("ss", 0x68047, "red_ss2_sta_frh2_port4","frh2 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x68047, "busy_cnt",11,0, "cells currently used by frh2""", "" )
   RDW_DEF("ss", 0x6c047, "red_ss3_sta_frh2_port4","frh2 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c047, "busy_cnt",11,0, "cells currently used by frh2""", "" )


   RDW_DEF("ss", 0x60048, "red_ss0_sta_frh3_port4","frh3 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x60048, "busy_cnt",11,0, "cells currently used by frh3""", "" )
   RDW_DEF("ss", 0x64048, "red_ss1_sta_frh3_port4","frh3 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x64048, "busy_cnt",11,0, "cells currently used by frh3""", "" )
   RDW_DEF("ss", 0x68048, "red_ss2_sta_frh3_port4","frh3 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x68048, "busy_cnt",11,0, "cells currently used by frh3""", "" )
   RDW_DEF("ss", 0x6c048, "red_ss3_sta_frh3_port4","frh3 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c048, "busy_cnt",11,0, "cells currently used by frh3""", "" )


   RDW_DEF("ss", 0x60049, "red_ss0_sta_mcast4","mcast4 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x60049, "busy_cnt",11,0, "cells currently used by MCast: port4""", "" )
   RDW_DEF("ss", 0x64049, "red_ss1_sta_mcast4","mcast4 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x64049, "busy_cnt",11,0, "cells currently used by MCast: port4""", "" )
   RDW_DEF("ss", 0x68049, "red_ss2_sta_mcast4","mcast4 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x68049, "busy_cnt",11,0, "cells currently used by MCast: port4""", "" )
   RDW_DEF("ss", 0x6c049, "red_ss3_sta_mcast4","mcast4 busy cell count """, 0xfff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c049, "busy_cnt",11,0, "cells currently used by MCast: port4""", "" )


   RDW_DEF("ss", 0x6004a, "red_ss0_cfg_rdch0","read channel programming""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6004a, "que_en",3,0, "enable the queue. This basically enable the dequeue of frames from a particular queue.\nIf queue req time out happens, hardware disable the queue and sw has to write the corresponding\nque_en bit to 0 and make it 1 again. HW needs the edge detection on this queue for further processing.""", "" )
   RDW_DEF_FLD( 0x6004a, "que_flush",7,4, "flush the egress queues. Each bit corresponds to the correspoding\nclass. [0] - OQ class0, [1] - OQ class1 ect. When set to 1 , the OQ will \npariticipate in the arbitration ignoring the link flow control.""", "" )
   RDW_DEF("ss", 0x6404a, "red_ss1_cfg_rdch0","read channel programming""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6404a, "que_en",3,0, "enable the queue. This basically enable the dequeue of frames from a particular queue.\nIf queue req time out happens, hardware disable the queue and sw has to write the corresponding\nque_en bit to 0 and make it 1 again. HW needs the edge detection on this queue for further processing.""", "" )
   RDW_DEF_FLD( 0x6404a, "que_flush",7,4, "flush the egress queues. Each bit corresponds to the correspoding\nclass. [0] - OQ class0, [1] - OQ class1 ect. When set to 1 , the OQ will \npariticipate in the arbitration ignoring the link flow control.""", "" )
   RDW_DEF("ss", 0x6804a, "red_ss2_cfg_rdch0","read channel programming""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6804a, "que_en",3,0, "enable the queue. This basically enable the dequeue of frames from a particular queue.\nIf queue req time out happens, hardware disable the queue and sw has to write the corresponding\nque_en bit to 0 and make it 1 again. HW needs the edge detection on this queue for further processing.""", "" )
   RDW_DEF_FLD( 0x6804a, "que_flush",7,4, "flush the egress queues. Each bit corresponds to the correspoding\nclass. [0] - OQ class0, [1] - OQ class1 ect. When set to 1 , the OQ will \npariticipate in the arbitration ignoring the link flow control.""", "" )
   RDW_DEF("ss", 0x6c04a, "red_ss3_cfg_rdch0","read channel programming""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c04a, "que_en",3,0, "enable the queue. This basically enable the dequeue of frames from a particular queue.\nIf queue req time out happens, hardware disable the queue and sw has to write the corresponding\nque_en bit to 0 and make it 1 again. HW needs the edge detection on this queue for further processing.""", "" )
   RDW_DEF_FLD( 0x6c04a, "que_flush",7,4, "flush the egress queues. Each bit corresponds to the correspoding\nclass. [0] - OQ class0, [1] - OQ class1 ect. When set to 1 , the OQ will \npariticipate in the arbitration ignoring the link flow control.""", "" )


   RDW_DEF("ss", 0x6004b, "red_ss0_int_oq0","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int")
   RDW_DEF_FLD( 0x6004b, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x6004b, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x6404b, "red_ss1_int_oq0","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int")
   RDW_DEF_FLD( 0x6404b, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x6404b, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x6804b, "red_ss2_int_oq0","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int")
   RDW_DEF_FLD( 0x6804b, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x6804b, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x6c04b, "red_ss3_int_oq0","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int")
   RDW_DEF_FLD( 0x6c04b, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x6c04b, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )


   RDW_DEF("ss", 0x6004c, "red_ss0_int_oq0_msk","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x6004c, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x6004c, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x6404c, "red_ss1_int_oq0_msk","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x6404c, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x6404c, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x6804c, "red_ss2_int_oq0_msk","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x6804c, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x6804c, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x6c04c, "red_ss3_int_oq0_msk","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x6c04c, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x6c04c, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )


   RDW_DEF("ss", 0x6004d, "red_ss0_int_oq0_tst","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x6004d, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x6004d, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x6404d, "red_ss1_int_oq0_tst","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x6404d, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x6404d, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x6804d, "red_ss2_int_oq0_tst","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x6804d, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x6804d, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x6c04d, "red_ss3_int_oq0_tst","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x6c04d, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x6c04d, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )


    RDW_DEF_DHS("ss", 0x60050, "red_ss0_dhs_oq0_status", "OQ 0 status. Read only""", 0x1fff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x60050, "",12,0,"OQ0 status.","" )
    RDW_DEF_DHS("ss", 0x64050, "red_ss1_dhs_oq0_status", "OQ 0 status. Read only""", 0x1fff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x64050, "",12,0,"OQ0 status.","" )
    RDW_DEF_DHS("ss", 0x68050, "red_ss2_dhs_oq0_status", "OQ 0 status. Read only""", 0x1fff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x68050, "",12,0,"OQ0 status.","" )
    RDW_DEF_DHS("ss", 0x6c050, "red_ss3_dhs_oq0_status", "OQ 0 status. Read only""", 0x1fff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x6c050, "",12,0,"OQ0 status.","" )


   RDW_DEF("ss", 0x60060, "red_ss0_cfg_rdch1","read channel programming""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60060, "que_en",3,0, "enable the queue. This basically enable the dequeue of frames from a particular queue.\nIf queue req time out happens, hardware disable the queue and sw has to write the corresponding\nque_en bit to 0 and make it 1 again. HW needs the edge detection on this queue for further processing.""", "" )
   RDW_DEF_FLD( 0x60060, "que_flush",7,4, "flush the egress queues. Each bit corresponds to the correspoding\nclass. [0] - OQ class0, [1] - OQ class1 ect. When set to 1 , the OQ will \npariticipate in the arbitration ignoring the link flow control.""", "" )
   RDW_DEF("ss", 0x64060, "red_ss1_cfg_rdch1","read channel programming""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64060, "que_en",3,0, "enable the queue. This basically enable the dequeue of frames from a particular queue.\nIf queue req time out happens, hardware disable the queue and sw has to write the corresponding\nque_en bit to 0 and make it 1 again. HW needs the edge detection on this queue for further processing.""", "" )
   RDW_DEF_FLD( 0x64060, "que_flush",7,4, "flush the egress queues. Each bit corresponds to the correspoding\nclass. [0] - OQ class0, [1] - OQ class1 ect. When set to 1 , the OQ will \npariticipate in the arbitration ignoring the link flow control.""", "" )
   RDW_DEF("ss", 0x68060, "red_ss2_cfg_rdch1","read channel programming""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68060, "que_en",3,0, "enable the queue. This basically enable the dequeue of frames from a particular queue.\nIf queue req time out happens, hardware disable the queue and sw has to write the corresponding\nque_en bit to 0 and make it 1 again. HW needs the edge detection on this queue for further processing.""", "" )
   RDW_DEF_FLD( 0x68060, "que_flush",7,4, "flush the egress queues. Each bit corresponds to the correspoding\nclass. [0] - OQ class0, [1] - OQ class1 ect. When set to 1 , the OQ will \npariticipate in the arbitration ignoring the link flow control.""", "" )
   RDW_DEF("ss", 0x6c060, "red_ss3_cfg_rdch1","read channel programming""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c060, "que_en",3,0, "enable the queue. This basically enable the dequeue of frames from a particular queue.\nIf queue req time out happens, hardware disable the queue and sw has to write the corresponding\nque_en bit to 0 and make it 1 again. HW needs the edge detection on this queue for further processing.""", "" )
   RDW_DEF_FLD( 0x6c060, "que_flush",7,4, "flush the egress queues. Each bit corresponds to the correspoding\nclass. [0] - OQ class0, [1] - OQ class1 ect. When set to 1 , the OQ will \npariticipate in the arbitration ignoring the link flow control.""", "" )


   RDW_DEF("ss", 0x60061, "red_ss0_int_oq1","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int")
   RDW_DEF_FLD( 0x60061, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x60061, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x64061, "red_ss1_int_oq1","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int")
   RDW_DEF_FLD( 0x64061, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x64061, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x68061, "red_ss2_int_oq1","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int")
   RDW_DEF_FLD( 0x68061, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x68061, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x6c061, "red_ss3_int_oq1","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int")
   RDW_DEF_FLD( 0x6c061, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x6c061, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )


   RDW_DEF("ss", 0x60062, "red_ss0_int_oq1_msk","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x60062, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x60062, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x64062, "red_ss1_int_oq1_msk","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x64062, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x64062, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x68062, "red_ss2_int_oq1_msk","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x68062, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x68062, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x6c062, "red_ss3_int_oq1_msk","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x6c062, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x6c062, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )


   RDW_DEF("ss", 0x60063, "red_ss0_int_oq1_tst","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x60063, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x60063, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x64063, "red_ss1_int_oq1_tst","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x64063, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x64063, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x68063, "red_ss2_int_oq1_tst","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x68063, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x68063, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x6c063, "red_ss3_int_oq1_tst","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x6c063, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x6c063, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )


    RDW_DEF_DHS("ss", 0x60070, "red_ss0_dhs_oq1_status", "OQ 1 status. Read only""", 0x1fff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x60070, "",12,0,"OQ1 status.","" )
    RDW_DEF_DHS("ss", 0x64070, "red_ss1_dhs_oq1_status", "OQ 1 status. Read only""", 0x1fff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x64070, "",12,0,"OQ1 status.","" )
    RDW_DEF_DHS("ss", 0x68070, "red_ss2_dhs_oq1_status", "OQ 1 status. Read only""", 0x1fff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x68070, "",12,0,"OQ1 status.","" )
    RDW_DEF_DHS("ss", 0x6c070, "red_ss3_dhs_oq1_status", "OQ 1 status. Read only""", 0x1fff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x6c070, "",12,0,"OQ1 status.","" )


   RDW_DEF("ss", 0x60080, "red_ss0_cfg_rdch2","read channel programming""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60080, "que_en",3,0, "enable the queue. This basically enable the dequeue of frames from a particular queue.\nIf queue req time out happens, hardware disable the queue and sw has to write the corresponding\nque_en bit to 0 and make it 1 again. HW needs the edge detection on this queue for further processing.""", "" )
   RDW_DEF_FLD( 0x60080, "que_flush",7,4, "flush the egress queues. Each bit corresponds to the correspoding\nclass. [0] - OQ class0, [1] - OQ class1 ect. When set to 1 , the OQ will \npariticipate in the arbitration ignoring the link flow control.""", "" )
   RDW_DEF("ss", 0x64080, "red_ss1_cfg_rdch2","read channel programming""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64080, "que_en",3,0, "enable the queue. This basically enable the dequeue of frames from a particular queue.\nIf queue req time out happens, hardware disable the queue and sw has to write the corresponding\nque_en bit to 0 and make it 1 again. HW needs the edge detection on this queue for further processing.""", "" )
   RDW_DEF_FLD( 0x64080, "que_flush",7,4, "flush the egress queues. Each bit corresponds to the correspoding\nclass. [0] - OQ class0, [1] - OQ class1 ect. When set to 1 , the OQ will \npariticipate in the arbitration ignoring the link flow control.""", "" )
   RDW_DEF("ss", 0x68080, "red_ss2_cfg_rdch2","read channel programming""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68080, "que_en",3,0, "enable the queue. This basically enable the dequeue of frames from a particular queue.\nIf queue req time out happens, hardware disable the queue and sw has to write the corresponding\nque_en bit to 0 and make it 1 again. HW needs the edge detection on this queue for further processing.""", "" )
   RDW_DEF_FLD( 0x68080, "que_flush",7,4, "flush the egress queues. Each bit corresponds to the correspoding\nclass. [0] - OQ class0, [1] - OQ class1 ect. When set to 1 , the OQ will \npariticipate in the arbitration ignoring the link flow control.""", "" )
   RDW_DEF("ss", 0x6c080, "red_ss3_cfg_rdch2","read channel programming""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c080, "que_en",3,0, "enable the queue. This basically enable the dequeue of frames from a particular queue.\nIf queue req time out happens, hardware disable the queue and sw has to write the corresponding\nque_en bit to 0 and make it 1 again. HW needs the edge detection on this queue for further processing.""", "" )
   RDW_DEF_FLD( 0x6c080, "que_flush",7,4, "flush the egress queues. Each bit corresponds to the correspoding\nclass. [0] - OQ class0, [1] - OQ class1 ect. When set to 1 , the OQ will \npariticipate in the arbitration ignoring the link flow control.""", "" )


   RDW_DEF("ss", 0x60081, "red_ss0_int_oq2","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int")
   RDW_DEF_FLD( 0x60081, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x60081, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x64081, "red_ss1_int_oq2","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int")
   RDW_DEF_FLD( 0x64081, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x64081, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x68081, "red_ss2_int_oq2","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int")
   RDW_DEF_FLD( 0x68081, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x68081, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x6c081, "red_ss3_int_oq2","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int")
   RDW_DEF_FLD( 0x6c081, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x6c081, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )


   RDW_DEF("ss", 0x60082, "red_ss0_int_oq2_msk","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x60082, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x60082, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x64082, "red_ss1_int_oq2_msk","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x64082, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x64082, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x68082, "red_ss2_int_oq2_msk","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x68082, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x68082, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x6c082, "red_ss3_int_oq2_msk","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x6c082, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x6c082, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )


   RDW_DEF("ss", 0x60083, "red_ss0_int_oq2_tst","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x60083, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x60083, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x64083, "red_ss1_int_oq2_tst","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x64083, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x64083, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x68083, "red_ss2_int_oq2_tst","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x68083, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x68083, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x6c083, "red_ss3_int_oq2_tst","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x6c083, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x6c083, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )


    RDW_DEF_DHS("ss", 0x60090, "red_ss0_dhs_oq2_status", "OQ 2 status. Read only""", 0x1fff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x60090, "",12,0,"OQ2 status.","" )
    RDW_DEF_DHS("ss", 0x64090, "red_ss1_dhs_oq2_status", "OQ 2 status. Read only""", 0x1fff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x64090, "",12,0,"OQ2 status.","" )
    RDW_DEF_DHS("ss", 0x68090, "red_ss2_dhs_oq2_status", "OQ 2 status. Read only""", 0x1fff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x68090, "",12,0,"OQ2 status.","" )
    RDW_DEF_DHS("ss", 0x6c090, "red_ss3_dhs_oq2_status", "OQ 2 status. Read only""", 0x1fff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x6c090, "",12,0,"OQ2 status.","" )


   RDW_DEF("ss", 0x600a0, "red_ss0_cfg_rdch3","read channel programming""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x600a0, "que_en",3,0, "enable the queue. This basically enable the dequeue of frames from a particular queue.\nIf queue req time out happens, hardware disable the queue and sw has to write the corresponding\nque_en bit to 0 and make it 1 again. HW needs the edge detection on this queue for further processing.""", "" )
   RDW_DEF_FLD( 0x600a0, "que_flush",7,4, "flush the egress queues. Each bit corresponds to the correspoding\nclass. [0] - OQ class0, [1] - OQ class1 ect. When set to 1 , the OQ will \npariticipate in the arbitration ignoring the link flow control.""", "" )
   RDW_DEF("ss", 0x640a0, "red_ss1_cfg_rdch3","read channel programming""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x640a0, "que_en",3,0, "enable the queue. This basically enable the dequeue of frames from a particular queue.\nIf queue req time out happens, hardware disable the queue and sw has to write the corresponding\nque_en bit to 0 and make it 1 again. HW needs the edge detection on this queue for further processing.""", "" )
   RDW_DEF_FLD( 0x640a0, "que_flush",7,4, "flush the egress queues. Each bit corresponds to the correspoding\nclass. [0] - OQ class0, [1] - OQ class1 ect. When set to 1 , the OQ will \npariticipate in the arbitration ignoring the link flow control.""", "" )
   RDW_DEF("ss", 0x680a0, "red_ss2_cfg_rdch3","read channel programming""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x680a0, "que_en",3,0, "enable the queue. This basically enable the dequeue of frames from a particular queue.\nIf queue req time out happens, hardware disable the queue and sw has to write the corresponding\nque_en bit to 0 and make it 1 again. HW needs the edge detection on this queue for further processing.""", "" )
   RDW_DEF_FLD( 0x680a0, "que_flush",7,4, "flush the egress queues. Each bit corresponds to the correspoding\nclass. [0] - OQ class0, [1] - OQ class1 ect. When set to 1 , the OQ will \npariticipate in the arbitration ignoring the link flow control.""", "" )
   RDW_DEF("ss", 0x6c0a0, "red_ss3_cfg_rdch3","read channel programming""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c0a0, "que_en",3,0, "enable the queue. This basically enable the dequeue of frames from a particular queue.\nIf queue req time out happens, hardware disable the queue and sw has to write the corresponding\nque_en bit to 0 and make it 1 again. HW needs the edge detection on this queue for further processing.""", "" )
   RDW_DEF_FLD( 0x6c0a0, "que_flush",7,4, "flush the egress queues. Each bit corresponds to the correspoding\nclass. [0] - OQ class0, [1] - OQ class1 ect. When set to 1 , the OQ will \npariticipate in the arbitration ignoring the link flow control.""", "" )


   RDW_DEF("ss", 0x600a1, "red_ss0_int_oq3","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int")
   RDW_DEF_FLD( 0x600a1, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x600a1, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x640a1, "red_ss1_int_oq3","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int")
   RDW_DEF_FLD( 0x640a1, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x640a1, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x680a1, "red_ss2_int_oq3","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int")
   RDW_DEF_FLD( 0x680a1, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x680a1, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x6c0a1, "red_ss3_int_oq3","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int")
   RDW_DEF_FLD( 0x6c0a1, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x6c0a1, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )


   RDW_DEF("ss", 0x600a2, "red_ss0_int_oq3_msk","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x600a2, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x600a2, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x640a2, "red_ss1_int_oq3_msk","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x640a2, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x640a2, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x680a2, "red_ss2_int_oq3_msk","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x680a2, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x680a2, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x6c0a2, "red_ss3_int_oq3_msk","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x6c0a2, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x6c0a2, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )


   RDW_DEF("ss", 0x600a3, "red_ss0_int_oq3_tst","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x600a3, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x600a3, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x640a3, "red_ss1_int_oq3_tst","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x640a3, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x640a3, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x680a3, "red_ss2_int_oq3_tst","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x680a3, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x680a3, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x6c0a3, "red_ss3_int_oq3_tst","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x6c0a3, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x6c0a3, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )


    RDW_DEF_DHS("ss", 0x600b0, "red_ss0_dhs_oq3_status", "OQ 3 status. Read only""", 0x1fff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x600b0, "",12,0,"OQ3 status.","" )
    RDW_DEF_DHS("ss", 0x640b0, "red_ss1_dhs_oq3_status", "OQ 3 status. Read only""", 0x1fff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x640b0, "",12,0,"OQ3 status.","" )
    RDW_DEF_DHS("ss", 0x680b0, "red_ss2_dhs_oq3_status", "OQ 3 status. Read only""", 0x1fff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x680b0, "",12,0,"OQ3 status.","" )
    RDW_DEF_DHS("ss", 0x6c0b0, "red_ss3_dhs_oq3_status", "OQ 3 status. Read only""", 0x1fff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x6c0b0, "",12,0,"OQ3 status.","" )


   RDW_DEF("ss", 0x600c0, "red_ss0_cfg_rdch4","read channel programming""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x600c0, "que_en",3,0, "enable the queue. This basically enable the dequeue of frames from a particular queue.\nIf queue req time out happens, hardware disable the queue and sw has to write the corresponding\nque_en bit to 0 and make it 1 again. HW needs the edge detection on this queue for further processing.""", "" )
   RDW_DEF_FLD( 0x600c0, "que_flush",7,4, "flush the egress queues. Each bit corresponds to the correspoding\nclass. [0] - OQ class0, [1] - OQ class1 ect. When set to 1 , the OQ will \npariticipate in the arbitration ignoring the link flow control.""", "" )
   RDW_DEF("ss", 0x640c0, "red_ss1_cfg_rdch4","read channel programming""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x640c0, "que_en",3,0, "enable the queue. This basically enable the dequeue of frames from a particular queue.\nIf queue req time out happens, hardware disable the queue and sw has to write the corresponding\nque_en bit to 0 and make it 1 again. HW needs the edge detection on this queue for further processing.""", "" )
   RDW_DEF_FLD( 0x640c0, "que_flush",7,4, "flush the egress queues. Each bit corresponds to the correspoding\nclass. [0] - OQ class0, [1] - OQ class1 ect. When set to 1 , the OQ will \npariticipate in the arbitration ignoring the link flow control.""", "" )
   RDW_DEF("ss", 0x680c0, "red_ss2_cfg_rdch4","read channel programming""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x680c0, "que_en",3,0, "enable the queue. This basically enable the dequeue of frames from a particular queue.\nIf queue req time out happens, hardware disable the queue and sw has to write the corresponding\nque_en bit to 0 and make it 1 again. HW needs the edge detection on this queue for further processing.""", "" )
   RDW_DEF_FLD( 0x680c0, "que_flush",7,4, "flush the egress queues. Each bit corresponds to the correspoding\nclass. [0] - OQ class0, [1] - OQ class1 ect. When set to 1 , the OQ will \npariticipate in the arbitration ignoring the link flow control.""", "" )
   RDW_DEF("ss", 0x6c0c0, "red_ss3_cfg_rdch4","read channel programming""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c0c0, "que_en",3,0, "enable the queue. This basically enable the dequeue of frames from a particular queue.\nIf queue req time out happens, hardware disable the queue and sw has to write the corresponding\nque_en bit to 0 and make it 1 again. HW needs the edge detection on this queue for further processing.""", "" )
   RDW_DEF_FLD( 0x6c0c0, "que_flush",7,4, "flush the egress queues. Each bit corresponds to the correspoding\nclass. [0] - OQ class0, [1] - OQ class1 ect. When set to 1 , the OQ will \npariticipate in the arbitration ignoring the link flow control.""", "" )


   RDW_DEF("ss", 0x600c1, "red_ss0_int_oq4","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int")
   RDW_DEF_FLD( 0x600c1, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x600c1, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x640c1, "red_ss1_int_oq4","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int")
   RDW_DEF_FLD( 0x640c1, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x640c1, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x680c1, "red_ss2_int_oq4","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int")
   RDW_DEF_FLD( 0x680c1, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x680c1, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x6c0c1, "red_ss3_int_oq4","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int")
   RDW_DEF_FLD( 0x6c0c1, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x6c0c1, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )


   RDW_DEF("ss", 0x600c2, "red_ss0_int_oq4_msk","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x600c2, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x600c2, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x640c2, "red_ss1_int_oq4_msk","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x640c2, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x640c2, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x680c2, "red_ss2_int_oq4_msk","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x680c2, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x680c2, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x6c0c2, "red_ss3_int_oq4_msk","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x6c0c2, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x6c0c2, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )


   RDW_DEF("ss", 0x600c3, "red_ss0_int_oq4_tst","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x600c3, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x600c3, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x640c3, "red_ss1_int_oq4_tst","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x640c3, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x640c3, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x680c3, "red_ss2_int_oq4_tst","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x680c3, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x680c3, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )
   RDW_DEF("ss", 0x6c0c3, "red_ss3_int_oq4_tst","output queue timeouts, frame timeout errors""", 0xff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x6c0c3, "req_to",3,0, "output queue got timedout. Per class interrupt""", "" )
   RDW_DEF_FLD( 0x6c0c3, "frm_to",7,4, "frame got stuck in the queue for a long time exceeds the programed timeout value. Per class interrupt""", "" )


    RDW_DEF_DHS("ss", 0x600d0, "red_ss0_dhs_oq4_status", "OQ 4 status. Read only""", 0x1fff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x600d0, "",12,0,"OQ4 status.","" )
    RDW_DEF_DHS("ss", 0x640d0, "red_ss1_dhs_oq4_status", "OQ 4 status. Read only""", 0x1fff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x640d0, "",12,0,"OQ4 status.","" )
    RDW_DEF_DHS("ss", 0x680d0, "red_ss2_dhs_oq4_status", "OQ 4 status. Read only""", 0x1fff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x680d0, "",12,0,"OQ4 status.","" )
    RDW_DEF_DHS("ss", 0x6c0d0, "red_ss3_dhs_oq4_status", "OQ 4 status. Read only""", 0x1fff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x6c0d0, "",12,0,"OQ4 status.","" )


    RDW_DEF_DHS("ss", 0x60100, "red_ss0_dhs_ss_rdarb", "rdarb programming for all read ports""", 0xffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x60100, "",15,0,"rdarb arb control. NR only 4 groups and queues are valid.\nSo grp_dec45,grp_dec67, que4 to que7, que_sta4 to que_sta7 are not valid. Reading these registers results to 0.\n","" )
    RDW_DEF_DHS("ss", 0x64100, "red_ss1_dhs_ss_rdarb", "rdarb programming for all read ports""", 0xffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x64100, "",15,0,"rdarb arb control. NR only 4 groups and queues are valid.\nSo grp_dec45,grp_dec67, que4 to que7, que_sta4 to que_sta7 are not valid. Reading these registers results to 0.\n","" )
    RDW_DEF_DHS("ss", 0x68100, "red_ss2_dhs_ss_rdarb", "rdarb programming for all read ports""", 0xffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x68100, "",15,0,"rdarb arb control. NR only 4 groups and queues are valid.\nSo grp_dec45,grp_dec67, que4 to que7, que_sta4 to que_sta7 are not valid. Reading these registers results to 0.\n","" )
    RDW_DEF_DHS("ss", 0x6c100, "red_ss3_dhs_ss_rdarb", "rdarb programming for all read ports""", 0xffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x6c100, "",15,0,"rdarb arb control. NR only 4 groups and queues are valid.\nSo grp_dec45,grp_dec67, que4 to que7, que_sta4 to que_sta7 are not valid. Reading these registers results to 0.\n","" )


   RDW_DEF("ss", 0x60200, "red_ss0_cfg_debug","debug mux control register for Switching Subsystem""", 0x3f, 0x0, "cfg")
   RDW_DEF_FLD( 0x60200, "enable",0,0, "debug bus master is BM""", "" )
   RDW_DEF_FLD( 0x60200, "select",5,1, "debug mux control. Select up to 17 internal buses. 0-16 valid. 17-31 invalid.\n0 - acct0,wrch0, \n1 - acct1,wrch1, \n2 - acct2,wrch2, \n3 - acct3,wrch3, \n4 - acct4,wrch4, \n5 - rdch0, \n6 - rdch1,\n7 - rdch2,\n8 - rdch3,\n9 - rdch4,\n10 - oq0,\n11 - oq1,\n12 - oq2,\n13 - oq3,\n14 - oq4,\n15 - mcntl0,mcnt1,desc\n16 - fc,fl,mc,\n17-31 - Reserved""", "" )
   RDW_DEF("ss", 0x64200, "red_ss1_cfg_debug","debug mux control register for Switching Subsystem""", 0x3f, 0x0, "cfg")
   RDW_DEF_FLD( 0x64200, "enable",0,0, "debug bus master is BM""", "" )
   RDW_DEF_FLD( 0x64200, "select",5,1, "debug mux control. Select up to 17 internal buses. 0-16 valid. 17-31 invalid.\n0 - acct0,wrch0, \n1 - acct1,wrch1, \n2 - acct2,wrch2, \n3 - acct3,wrch3, \n4 - acct4,wrch4, \n5 - rdch0, \n6 - rdch1,\n7 - rdch2,\n8 - rdch3,\n9 - rdch4,\n10 - oq0,\n11 - oq1,\n12 - oq2,\n13 - oq3,\n14 - oq4,\n15 - mcntl0,mcnt1,desc\n16 - fc,fl,mc,\n17-31 - Reserved""", "" )
   RDW_DEF("ss", 0x68200, "red_ss2_cfg_debug","debug mux control register for Switching Subsystem""", 0x3f, 0x0, "cfg")
   RDW_DEF_FLD( 0x68200, "enable",0,0, "debug bus master is BM""", "" )
   RDW_DEF_FLD( 0x68200, "select",5,1, "debug mux control. Select up to 17 internal buses. 0-16 valid. 17-31 invalid.\n0 - acct0,wrch0, \n1 - acct1,wrch1, \n2 - acct2,wrch2, \n3 - acct3,wrch3, \n4 - acct4,wrch4, \n5 - rdch0, \n6 - rdch1,\n7 - rdch2,\n8 - rdch3,\n9 - rdch4,\n10 - oq0,\n11 - oq1,\n12 - oq2,\n13 - oq3,\n14 - oq4,\n15 - mcntl0,mcnt1,desc\n16 - fc,fl,mc,\n17-31 - Reserved""", "" )
   RDW_DEF("ss", 0x6c200, "red_ss3_cfg_debug","debug mux control register for Switching Subsystem""", 0x3f, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c200, "enable",0,0, "debug bus master is BM""", "" )
   RDW_DEF_FLD( 0x6c200, "select",5,1, "debug mux control. Select up to 17 internal buses. 0-16 valid. 17-31 invalid.\n0 - acct0,wrch0, \n1 - acct1,wrch1, \n2 - acct2,wrch2, \n3 - acct3,wrch3, \n4 - acct4,wrch4, \n5 - rdch0, \n6 - rdch1,\n7 - rdch2,\n8 - rdch3,\n9 - rdch4,\n10 - oq0,\n11 - oq1,\n12 - oq2,\n13 - oq3,\n14 - oq4,\n15 - mcntl0,mcnt1,desc\n16 - fc,fl,mc,\n17-31 - Reserved""", "" )


   RDW_DEF("ss", 0x60201, "red_ss0_sta_fc_ptr","free cell FIFO status""", 0x3ffffff, 0x0, "sta")
   RDW_DEF_FLD( 0x60201, "wr",12,0, "current free cell fifo write pointer""", "" )
   RDW_DEF_FLD( 0x60201, "rd",25,13, "current free cell fifo read pointer""", "" )
   RDW_DEF("ss", 0x64201, "red_ss1_sta_fc_ptr","free cell FIFO status""", 0x3ffffff, 0x0, "sta")
   RDW_DEF_FLD( 0x64201, "wr",12,0, "current free cell fifo write pointer""", "" )
   RDW_DEF_FLD( 0x64201, "rd",25,13, "current free cell fifo read pointer""", "" )
   RDW_DEF("ss", 0x68201, "red_ss2_sta_fc_ptr","free cell FIFO status""", 0x3ffffff, 0x0, "sta")
   RDW_DEF_FLD( 0x68201, "wr",12,0, "current free cell fifo write pointer""", "" )
   RDW_DEF_FLD( 0x68201, "rd",25,13, "current free cell fifo read pointer""", "" )
   RDW_DEF("ss", 0x6c201, "red_ss3_sta_fc_ptr","free cell FIFO status""", 0x3ffffff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c201, "wr",12,0, "current free cell fifo write pointer""", "" )
   RDW_DEF_FLD( 0x6c201, "rd",25,13, "current free cell fifo read pointer""", "" )


   RDW_DEF("ss", 0x60202, "red_ss0_sta_fc_cnt","free cell count""", 0x1fff, 0x0, "sta")
   RDW_DEF_FLD( 0x60202, "",12,0, "number of free cells remaining to use""", "" )
   RDW_DEF("ss", 0x64202, "red_ss1_sta_fc_cnt","free cell count""", 0x1fff, 0x0, "sta")
   RDW_DEF_FLD( 0x64202, "",12,0, "number of free cells remaining to use""", "" )
   RDW_DEF("ss", 0x68202, "red_ss2_sta_fc_cnt","free cell count""", 0x1fff, 0x0, "sta")
   RDW_DEF_FLD( 0x68202, "",12,0, "number of free cells remaining to use""", "" )
   RDW_DEF("ss", 0x6c202, "red_ss3_sta_fc_cnt","free cell count""", 0x1fff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c202, "",12,0, "number of free cells remaining to use""", "" )


   RDW_DEF("ss", 0x60203, "red_ss0_sta_cntl_mem_ecc","control memories error info""", 0x3ffff, 0x0, "sta")
   RDW_DEF_FLD( 0x60203, "addr",12,0, "memory address location in 4800 locations""", "" )
   RDW_DEF_FLD( 0x60203, "inst",16,13, "Which memory has the error. OQ, Frame list, free fifo or desc.\n0 - free fifo, 1 - frame list, 2 -desc, 3 - mc, \n4 - OQ0, 5 - OQ1, 6 - OQ2, 7 - OQ3, 8 - OQ4""", "" )
   RDW_DEF_FLD( 0x60203, "ecc2",17,17, "is this for ecc2 or ecc1 error. If 1 this is for ecc2 errors""", "" )
   RDW_DEF("ss", 0x64203, "red_ss1_sta_cntl_mem_ecc","control memories error info""", 0x3ffff, 0x0, "sta")
   RDW_DEF_FLD( 0x64203, "addr",12,0, "memory address location in 4800 locations""", "" )
   RDW_DEF_FLD( 0x64203, "inst",16,13, "Which memory has the error. OQ, Frame list, free fifo or desc.\n0 - free fifo, 1 - frame list, 2 -desc, 3 - mc, \n4 - OQ0, 5 - OQ1, 6 - OQ2, 7 - OQ3, 8 - OQ4""", "" )
   RDW_DEF_FLD( 0x64203, "ecc2",17,17, "is this for ecc2 or ecc1 error. If 1 this is for ecc2 errors""", "" )
   RDW_DEF("ss", 0x68203, "red_ss2_sta_cntl_mem_ecc","control memories error info""", 0x3ffff, 0x0, "sta")
   RDW_DEF_FLD( 0x68203, "addr",12,0, "memory address location in 4800 locations""", "" )
   RDW_DEF_FLD( 0x68203, "inst",16,13, "Which memory has the error. OQ, Frame list, free fifo or desc.\n0 - free fifo, 1 - frame list, 2 -desc, 3 - mc, \n4 - OQ0, 5 - OQ1, 6 - OQ2, 7 - OQ3, 8 - OQ4""", "" )
   RDW_DEF_FLD( 0x68203, "ecc2",17,17, "is this for ecc2 or ecc1 error. If 1 this is for ecc2 errors""", "" )
   RDW_DEF("ss", 0x6c203, "red_ss3_sta_cntl_mem_ecc","control memories error info""", 0x3ffff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c203, "addr",12,0, "memory address location in 4800 locations""", "" )
   RDW_DEF_FLD( 0x6c203, "inst",16,13, "Which memory has the error. OQ, Frame list, free fifo or desc.\n0 - free fifo, 1 - frame list, 2 -desc, 3 - mc, \n4 - OQ0, 5 - OQ1, 6 - OQ2, 7 - OQ3, 8 - OQ4""", "" )
   RDW_DEF_FLD( 0x6c203, "ecc2",17,17, "is this for ecc2 or ecc1 error. If 1 this is for ecc2 errors""", "" )


   RDW_DEF("ss", 0x60204, "red_ss0_sta_mm0_ecc","main data memory bank0 error info""", 0x1ffff, 0x0, "sta")
   RDW_DEF_FLD( 0x60204, "addr",12,0, "memory address location in 4800 locations""", "" )
   RDW_DEF_FLD( 0x60204, "mem_num",15,13, "which sub memory out of 5 memories/bank""", "" )
   RDW_DEF_FLD( 0x60204, "ecc2",16,16, "Is the error info for ecc2 or ecc1""", "" )
   RDW_DEF("ss", 0x64204, "red_ss1_sta_mm0_ecc","main data memory bank0 error info""", 0x1ffff, 0x0, "sta")
   RDW_DEF_FLD( 0x64204, "addr",12,0, "memory address location in 4800 locations""", "" )
   RDW_DEF_FLD( 0x64204, "mem_num",15,13, "which sub memory out of 5 memories/bank""", "" )
   RDW_DEF_FLD( 0x64204, "ecc2",16,16, "Is the error info for ecc2 or ecc1""", "" )
   RDW_DEF("ss", 0x68204, "red_ss2_sta_mm0_ecc","main data memory bank0 error info""", 0x1ffff, 0x0, "sta")
   RDW_DEF_FLD( 0x68204, "addr",12,0, "memory address location in 4800 locations""", "" )
   RDW_DEF_FLD( 0x68204, "mem_num",15,13, "which sub memory out of 5 memories/bank""", "" )
   RDW_DEF_FLD( 0x68204, "ecc2",16,16, "Is the error info for ecc2 or ecc1""", "" )
   RDW_DEF("ss", 0x6c204, "red_ss3_sta_mm0_ecc","main data memory bank0 error info""", 0x1ffff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c204, "addr",12,0, "memory address location in 4800 locations""", "" )
   RDW_DEF_FLD( 0x6c204, "mem_num",15,13, "which sub memory out of 5 memories/bank""", "" )
   RDW_DEF_FLD( 0x6c204, "ecc2",16,16, "Is the error info for ecc2 or ecc1""", "" )


   RDW_DEF("ss", 0x60205, "red_ss0_sta_mm1_ecc","main data memory bank1 error info""", 0x1ffff, 0x0, "sta")
   RDW_DEF_FLD( 0x60205, "addr",12,0, "memory address location in 4800 locations""", "" )
   RDW_DEF_FLD( 0x60205, "mem_num",15,13, "which sub memory out of 5 memories/bank""", "" )
   RDW_DEF_FLD( 0x60205, "ecc2",16,16, "Is the error info for ecc2 or ecc1""", "" )
   RDW_DEF("ss", 0x64205, "red_ss1_sta_mm1_ecc","main data memory bank1 error info""", 0x1ffff, 0x0, "sta")
   RDW_DEF_FLD( 0x64205, "addr",12,0, "memory address location in 4800 locations""", "" )
   RDW_DEF_FLD( 0x64205, "mem_num",15,13, "which sub memory out of 5 memories/bank""", "" )
   RDW_DEF_FLD( 0x64205, "ecc2",16,16, "Is the error info for ecc2 or ecc1""", "" )
   RDW_DEF("ss", 0x68205, "red_ss2_sta_mm1_ecc","main data memory bank1 error info""", 0x1ffff, 0x0, "sta")
   RDW_DEF_FLD( 0x68205, "addr",12,0, "memory address location in 4800 locations""", "" )
   RDW_DEF_FLD( 0x68205, "mem_num",15,13, "which sub memory out of 5 memories/bank""", "" )
   RDW_DEF_FLD( 0x68205, "ecc2",16,16, "Is the error info for ecc2 or ecc1""", "" )
   RDW_DEF("ss", 0x6c205, "red_ss3_sta_mm1_ecc","main data memory bank1 error info""", 0x1ffff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c205, "addr",12,0, "memory address location in 4800 locations""", "" )
   RDW_DEF_FLD( 0x6c205, "mem_num",15,13, "which sub memory out of 5 memories/bank""", "" )
   RDW_DEF_FLD( 0x6c205, "ecc2",16,16, "Is the error info for ecc2 or ecc1""", "" )


   RDW_DEF("ss", 0x60206, "red_ss0_sat_err_cntl_ecc1"," control memories ecc1 errors""", 0xf, 0x0, "sat")
   RDW_DEF_FLD( 0x60206, "",3,0, "control ram ecc1 errors, corrected by ECC logic.\nCNT: This error is not that bad; but if we receive 1024 in a day\nwe may want to reset the chip""", "" )
   RDW_DEF("ss", 0x64206, "red_ss1_sat_err_cntl_ecc1"," control memories ecc1 errors""", 0xf, 0x0, "sat")
   RDW_DEF_FLD( 0x64206, "",3,0, "control ram ecc1 errors, corrected by ECC logic.\nCNT: This error is not that bad; but if we receive 1024 in a day\nwe may want to reset the chip""", "" )
   RDW_DEF("ss", 0x68206, "red_ss2_sat_err_cntl_ecc1"," control memories ecc1 errors""", 0xf, 0x0, "sat")
   RDW_DEF_FLD( 0x68206, "",3,0, "control ram ecc1 errors, corrected by ECC logic.\nCNT: This error is not that bad; but if we receive 1024 in a day\nwe may want to reset the chip""", "" )
   RDW_DEF("ss", 0x6c206, "red_ss3_sat_err_cntl_ecc1"," control memories ecc1 errors""", 0xf, 0x0, "sat")
   RDW_DEF_FLD( 0x6c206, "",3,0, "control ram ecc1 errors, corrected by ECC logic.\nCNT: This error is not that bad; but if we receive 1024 in a day\nwe may want to reset the chip""", "" )


   RDW_DEF("ss", 0x60207, "red_ss0_sat_err_cntl_ecc2","control memories ecc2 errors""", 0xf, 0x0, "sat")
   RDW_DEF_FLD( 0x60207, "",3,0, "control ram ecc2 errors, uncorrected by ECC logic.\nCNT-AR: Not catastropic, but better to reset ASIC""", "" )
   RDW_DEF("ss", 0x64207, "red_ss1_sat_err_cntl_ecc2","control memories ecc2 errors""", 0xf, 0x0, "sat")
   RDW_DEF_FLD( 0x64207, "",3,0, "control ram ecc2 errors, uncorrected by ECC logic.\nCNT-AR: Not catastropic, but better to reset ASIC""", "" )
   RDW_DEF("ss", 0x68207, "red_ss2_sat_err_cntl_ecc2","control memories ecc2 errors""", 0xf, 0x0, "sat")
   RDW_DEF_FLD( 0x68207, "",3,0, "control ram ecc2 errors, uncorrected by ECC logic.\nCNT-AR: Not catastropic, but better to reset ASIC""", "" )
   RDW_DEF("ss", 0x6c207, "red_ss3_sat_err_cntl_ecc2","control memories ecc2 errors""", 0xf, 0x0, "sat")
   RDW_DEF_FLD( 0x6c207, "",3,0, "control ram ecc2 errors, uncorrected by ECC logic.\nCNT-AR: Not catastropic, but better to reset ASIC""", "" )


   RDW_DEF("ss", 0x60208, "red_ss0_sat_err_wo_cr","wr discard errors""", 0xf, 0x0, "sat")
   RDW_DEF_FLD( 0x60208, "",3,0, "WR discarded frames due to no credits, PAUSE errors. Combined count for all write ports. Since\nwe are not expecting this to happen that often, we are ok. Interrupts still be per write port.\nCNT-LR: Reset MM RX link from external device, if this count exceeds 8 in a day""", "" )
   RDW_DEF("ss", 0x64208, "red_ss1_sat_err_wo_cr","wr discard errors""", 0xf, 0x0, "sat")
   RDW_DEF_FLD( 0x64208, "",3,0, "WR discarded frames due to no credits, PAUSE errors. Combined count for all write ports. Since\nwe are not expecting this to happen that often, we are ok. Interrupts still be per write port.\nCNT-LR: Reset MM RX link from external device, if this count exceeds 8 in a day""", "" )
   RDW_DEF("ss", 0x68208, "red_ss2_sat_err_wo_cr","wr discard errors""", 0xf, 0x0, "sat")
   RDW_DEF_FLD( 0x68208, "",3,0, "WR discarded frames due to no credits, PAUSE errors. Combined count for all write ports. Since\nwe are not expecting this to happen that often, we are ok. Interrupts still be per write port.\nCNT-LR: Reset MM RX link from external device, if this count exceeds 8 in a day""", "" )
   RDW_DEF("ss", 0x6c208, "red_ss3_sat_err_wo_cr","wr discard errors""", 0xf, 0x0, "sat")
   RDW_DEF_FLD( 0x6c208, "",3,0, "WR discarded frames due to no credits, PAUSE errors. Combined count for all write ports. Since\nwe are not expecting this to happen that often, we are ok. Interrupts still be per write port.\nCNT-LR: Reset MM RX link from external device, if this count exceeds 8 in a day""", "" )


   RDW_DEF("ss", 0x60209, "red_ss0_sat_err_rcvd_no_cells","frames received wo cells""", 0xf, 0x0, "sat")
   RDW_DEF_FLD( 0x60209, "",3,0, "WR frames received with no cells from free fifo. This is either an error in FRH programming or\nerror in free fifo.\nCNT:""", "" )
   RDW_DEF("ss", 0x64209, "red_ss1_sat_err_rcvd_no_cells","frames received wo cells""", 0xf, 0x0, "sat")
   RDW_DEF_FLD( 0x64209, "",3,0, "WR frames received with no cells from free fifo. This is either an error in FRH programming or\nerror in free fifo.\nCNT:""", "" )
   RDW_DEF("ss", 0x68209, "red_ss2_sat_err_rcvd_no_cells","frames received wo cells""", 0xf, 0x0, "sat")
   RDW_DEF_FLD( 0x68209, "",3,0, "WR frames received with no cells from free fifo. This is either an error in FRH programming or\nerror in free fifo.\nCNT:""", "" )
   RDW_DEF("ss", 0x6c209, "red_ss3_sat_err_rcvd_no_cells","frames received wo cells""", 0xf, 0x0, "sat")
   RDW_DEF_FLD( 0x6c209, "",3,0, "WR frames received with no cells from free fifo. This is either an error in FRH programming or\nerror in free fifo.\nCNT:""", "" )


   RDW_DEF("ss", 0x6020a, "red_ss0_sat_err_mtu_vio","Wr length errors""", 0xf, 0x0, "sat")
   RDW_DEF_FLD( 0x6020a, "",3,0, "WR frames that violated max size/class. Combined count for all write ports and all classes. Since\nwe are not expecting this to happen that often, we are ok. Interrupts still be per write port.\nCNT:""", "" )
   RDW_DEF("ss", 0x6420a, "red_ss1_sat_err_mtu_vio","Wr length errors""", 0xf, 0x0, "sat")
   RDW_DEF_FLD( 0x6420a, "",3,0, "WR frames that violated max size/class. Combined count for all write ports and all classes. Since\nwe are not expecting this to happen that often, we are ok. Interrupts still be per write port.\nCNT:""", "" )
   RDW_DEF("ss", 0x6820a, "red_ss2_sat_err_mtu_vio","Wr length errors""", 0xf, 0x0, "sat")
   RDW_DEF_FLD( 0x6820a, "",3,0, "WR frames that violated max size/class. Combined count for all write ports and all classes. Since\nwe are not expecting this to happen that often, we are ok. Interrupts still be per write port.\nCNT:""", "" )
   RDW_DEF("ss", 0x6c20a, "red_ss3_sat_err_mtu_vio","Wr length errors""", 0xf, 0x0, "sat")
   RDW_DEF_FLD( 0x6c20a, "",3,0, "WR frames that violated max size/class. Combined count for all write ports and all classes. Since\nwe are not expecting this to happen that often, we are ok. Interrupts still be per write port.\nCNT:""", "" )


    RDW_DEF_DHS("ss", 0x60300, "red_ss0_dhs_stats", "statistics""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x60300, "",31,0,"dhs stats. 256. ","" )
    RDW_DEF_DHS("ss", 0x64300, "red_ss1_dhs_stats", "statistics""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x64300, "",31,0,"dhs stats. 256. ","" )
    RDW_DEF_DHS("ss", 0x68300, "red_ss2_dhs_stats", "statistics""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x68300, "",31,0,"dhs stats. 256. ","" )
    RDW_DEF_DHS("ss", 0x6c300, "red_ss3_dhs_stats", "statistics""", 0xffffffff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x6c300, "",31,0,"dhs stats. 256. ","" )


   RDW_DEF("ss", 0x60400, "red_ss0_cfg_stats_conf_sel","configurable stats""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60400, "in_port",2,0, "input port for which the conf stats apply""", "" )
   RDW_DEF_FLD( 0x60400, "out_port",5,3, "output port for which the conf stats apply""", "" )
   RDW_DEF_FLD( 0x60400, "opcode",7,6, "opcode: 0 - in-out port pair, 1- pause sent, 2- pause rcvd, 3-back pressure""", "" )
   RDW_DEF("ss", 0x64400, "red_ss1_cfg_stats_conf_sel","configurable stats""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64400, "in_port",2,0, "input port for which the conf stats apply""", "" )
   RDW_DEF_FLD( 0x64400, "out_port",5,3, "output port for which the conf stats apply""", "" )
   RDW_DEF_FLD( 0x64400, "opcode",7,6, "opcode: 0 - in-out port pair, 1- pause sent, 2- pause rcvd, 3-back pressure""", "" )
   RDW_DEF("ss", 0x68400, "red_ss2_cfg_stats_conf_sel","configurable stats""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68400, "in_port",2,0, "input port for which the conf stats apply""", "" )
   RDW_DEF_FLD( 0x68400, "out_port",5,3, "output port for which the conf stats apply""", "" )
   RDW_DEF_FLD( 0x68400, "opcode",7,6, "opcode: 0 - in-out port pair, 1- pause sent, 2- pause rcvd, 3-back pressure""", "" )
   RDW_DEF("ss", 0x6c400, "red_ss3_cfg_stats_conf_sel","configurable stats""", 0xff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c400, "in_port",2,0, "input port for which the conf stats apply""", "" )
   RDW_DEF_FLD( 0x6c400, "out_port",5,3, "output port for which the conf stats apply""", "" )
   RDW_DEF_FLD( 0x6c400, "opcode",7,6, "opcode: 0 - in-out port pair, 1- pause sent, 2- pause rcvd, 3-back pressure""", "" )


   RDW_DEF("ss", 0x60401, "red_ss0_int_norm","normal interrupt""", 0x1fff, 0x0, "int")
   RDW_DEF_FLD( 0x60401, "fc_init_done",0,0, "free list initialization is done""", "" )
   RDW_DEF_FLD( 0x60401, "mm_init_done",2,1, "main memory initialization is done""", "" )
   RDW_DEF_FLD( 0x60401, "wo_cr",7,3, "frames rcvd wo credit in case of non-pausable classes, natural. From 5 ports""", "" )
   RDW_DEF_FLD( 0x60401, "mc_cr",12,8, "mc frames dropped due to crossing the threshold""", "" )
   RDW_DEF("ss", 0x64401, "red_ss1_int_norm","normal interrupt""", 0x1fff, 0x0, "int")
   RDW_DEF_FLD( 0x64401, "fc_init_done",0,0, "free list initialization is done""", "" )
   RDW_DEF_FLD( 0x64401, "mm_init_done",2,1, "main memory initialization is done""", "" )
   RDW_DEF_FLD( 0x64401, "wo_cr",7,3, "frames rcvd wo credit in case of non-pausable classes, natural. From 5 ports""", "" )
   RDW_DEF_FLD( 0x64401, "mc_cr",12,8, "mc frames dropped due to crossing the threshold""", "" )
   RDW_DEF("ss", 0x68401, "red_ss2_int_norm","normal interrupt""", 0x1fff, 0x0, "int")
   RDW_DEF_FLD( 0x68401, "fc_init_done",0,0, "free list initialization is done""", "" )
   RDW_DEF_FLD( 0x68401, "mm_init_done",2,1, "main memory initialization is done""", "" )
   RDW_DEF_FLD( 0x68401, "wo_cr",7,3, "frames rcvd wo credit in case of non-pausable classes, natural. From 5 ports""", "" )
   RDW_DEF_FLD( 0x68401, "mc_cr",12,8, "mc frames dropped due to crossing the threshold""", "" )
   RDW_DEF("ss", 0x6c401, "red_ss3_int_norm","normal interrupt""", 0x1fff, 0x0, "int")
   RDW_DEF_FLD( 0x6c401, "fc_init_done",0,0, "free list initialization is done""", "" )
   RDW_DEF_FLD( 0x6c401, "mm_init_done",2,1, "main memory initialization is done""", "" )
   RDW_DEF_FLD( 0x6c401, "wo_cr",7,3, "frames rcvd wo credit in case of non-pausable classes, natural. From 5 ports""", "" )
   RDW_DEF_FLD( 0x6c401, "mc_cr",12,8, "mc frames dropped due to crossing the threshold""", "" )


   RDW_DEF("ss", 0x60402, "red_ss0_int_norm_msk","normal interrupt""", 0x1fff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x60402, "fc_init_done",0,0, "free list initialization is done""", "" )
   RDW_DEF_FLD( 0x60402, "mm_init_done",2,1, "main memory initialization is done""", "" )
   RDW_DEF_FLD( 0x60402, "wo_cr",7,3, "frames rcvd wo credit in case of non-pausable classes, natural. From 5 ports""", "" )
   RDW_DEF_FLD( 0x60402, "mc_cr",12,8, "mc frames dropped due to crossing the threshold""", "" )
   RDW_DEF("ss", 0x64402, "red_ss1_int_norm_msk","normal interrupt""", 0x1fff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x64402, "fc_init_done",0,0, "free list initialization is done""", "" )
   RDW_DEF_FLD( 0x64402, "mm_init_done",2,1, "main memory initialization is done""", "" )
   RDW_DEF_FLD( 0x64402, "wo_cr",7,3, "frames rcvd wo credit in case of non-pausable classes, natural. From 5 ports""", "" )
   RDW_DEF_FLD( 0x64402, "mc_cr",12,8, "mc frames dropped due to crossing the threshold""", "" )
   RDW_DEF("ss", 0x68402, "red_ss2_int_norm_msk","normal interrupt""", 0x1fff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x68402, "fc_init_done",0,0, "free list initialization is done""", "" )
   RDW_DEF_FLD( 0x68402, "mm_init_done",2,1, "main memory initialization is done""", "" )
   RDW_DEF_FLD( 0x68402, "wo_cr",7,3, "frames rcvd wo credit in case of non-pausable classes, natural. From 5 ports""", "" )
   RDW_DEF_FLD( 0x68402, "mc_cr",12,8, "mc frames dropped due to crossing the threshold""", "" )
   RDW_DEF("ss", 0x6c402, "red_ss3_int_norm_msk","normal interrupt""", 0x1fff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x6c402, "fc_init_done",0,0, "free list initialization is done""", "" )
   RDW_DEF_FLD( 0x6c402, "mm_init_done",2,1, "main memory initialization is done""", "" )
   RDW_DEF_FLD( 0x6c402, "wo_cr",7,3, "frames rcvd wo credit in case of non-pausable classes, natural. From 5 ports""", "" )
   RDW_DEF_FLD( 0x6c402, "mc_cr",12,8, "mc frames dropped due to crossing the threshold""", "" )


   RDW_DEF("ss", 0x60403, "red_ss0_int_norm_tst","normal interrupt""", 0x1fff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x60403, "fc_init_done",0,0, "free list initialization is done""", "" )
   RDW_DEF_FLD( 0x60403, "mm_init_done",2,1, "main memory initialization is done""", "" )
   RDW_DEF_FLD( 0x60403, "wo_cr",7,3, "frames rcvd wo credit in case of non-pausable classes, natural. From 5 ports""", "" )
   RDW_DEF_FLD( 0x60403, "mc_cr",12,8, "mc frames dropped due to crossing the threshold""", "" )
   RDW_DEF("ss", 0x64403, "red_ss1_int_norm_tst","normal interrupt""", 0x1fff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x64403, "fc_init_done",0,0, "free list initialization is done""", "" )
   RDW_DEF_FLD( 0x64403, "mm_init_done",2,1, "main memory initialization is done""", "" )
   RDW_DEF_FLD( 0x64403, "wo_cr",7,3, "frames rcvd wo credit in case of non-pausable classes, natural. From 5 ports""", "" )
   RDW_DEF_FLD( 0x64403, "mc_cr",12,8, "mc frames dropped due to crossing the threshold""", "" )
   RDW_DEF("ss", 0x68403, "red_ss2_int_norm_tst","normal interrupt""", 0x1fff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x68403, "fc_init_done",0,0, "free list initialization is done""", "" )
   RDW_DEF_FLD( 0x68403, "mm_init_done",2,1, "main memory initialization is done""", "" )
   RDW_DEF_FLD( 0x68403, "wo_cr",7,3, "frames rcvd wo credit in case of non-pausable classes, natural. From 5 ports""", "" )
   RDW_DEF_FLD( 0x68403, "mc_cr",12,8, "mc frames dropped due to crossing the threshold""", "" )
   RDW_DEF("ss", 0x6c403, "red_ss3_int_norm_tst","normal interrupt""", 0x1fff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x6c403, "fc_init_done",0,0, "free list initialization is done""", "" )
   RDW_DEF_FLD( 0x6c403, "mm_init_done",2,1, "main memory initialization is done""", "" )
   RDW_DEF_FLD( 0x6c403, "wo_cr",7,3, "frames rcvd wo credit in case of non-pausable classes, natural. From 5 ports""", "" )
   RDW_DEF_FLD( 0x6c403, "mc_cr",12,8, "mc frames dropped due to crossing the threshold""", "" )


   RDW_DEF("ss", 0x60404, "red_ss0_int_err_ecc1","control memory ECC1 error interrupts""", 0x7ff, 0x0, "int")
   RDW_DEF_FLD( 0x60404, "",10,0, "single bit ecc error at rams\n0: free list FIFO\n1: Frame list\n2: desc ram\n3: mcast ram\n4-8: oq rams. Error info tells which one of the oq is error \n9 : main memory bank0 \n10: main memory bank1""", "" )
   RDW_DEF("ss", 0x64404, "red_ss1_int_err_ecc1","control memory ECC1 error interrupts""", 0x7ff, 0x0, "int")
   RDW_DEF_FLD( 0x64404, "",10,0, "single bit ecc error at rams\n0: free list FIFO\n1: Frame list\n2: desc ram\n3: mcast ram\n4-8: oq rams. Error info tells which one of the oq is error \n9 : main memory bank0 \n10: main memory bank1""", "" )
   RDW_DEF("ss", 0x68404, "red_ss2_int_err_ecc1","control memory ECC1 error interrupts""", 0x7ff, 0x0, "int")
   RDW_DEF_FLD( 0x68404, "",10,0, "single bit ecc error at rams\n0: free list FIFO\n1: Frame list\n2: desc ram\n3: mcast ram\n4-8: oq rams. Error info tells which one of the oq is error \n9 : main memory bank0 \n10: main memory bank1""", "" )
   RDW_DEF("ss", 0x6c404, "red_ss3_int_err_ecc1","control memory ECC1 error interrupts""", 0x7ff, 0x0, "int")
   RDW_DEF_FLD( 0x6c404, "",10,0, "single bit ecc error at rams\n0: free list FIFO\n1: Frame list\n2: desc ram\n3: mcast ram\n4-8: oq rams. Error info tells which one of the oq is error \n9 : main memory bank0 \n10: main memory bank1""", "" )


   RDW_DEF("ss", 0x60405, "red_ss0_int_err_ecc1_msk","control memory ECC1 error interrupts""", 0x7ff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x60405, "",10,0, "single bit ecc error at rams\n0: free list FIFO\n1: Frame list\n2: desc ram\n3: mcast ram\n4-8: oq rams. Error info tells which one of the oq is error \n9 : main memory bank0 \n10: main memory bank1""", "" )
   RDW_DEF("ss", 0x64405, "red_ss1_int_err_ecc1_msk","control memory ECC1 error interrupts""", 0x7ff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x64405, "",10,0, "single bit ecc error at rams\n0: free list FIFO\n1: Frame list\n2: desc ram\n3: mcast ram\n4-8: oq rams. Error info tells which one of the oq is error \n9 : main memory bank0 \n10: main memory bank1""", "" )
   RDW_DEF("ss", 0x68405, "red_ss2_int_err_ecc1_msk","control memory ECC1 error interrupts""", 0x7ff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x68405, "",10,0, "single bit ecc error at rams\n0: free list FIFO\n1: Frame list\n2: desc ram\n3: mcast ram\n4-8: oq rams. Error info tells which one of the oq is error \n9 : main memory bank0 \n10: main memory bank1""", "" )
   RDW_DEF("ss", 0x6c405, "red_ss3_int_err_ecc1_msk","control memory ECC1 error interrupts""", 0x7ff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x6c405, "",10,0, "single bit ecc error at rams\n0: free list FIFO\n1: Frame list\n2: desc ram\n3: mcast ram\n4-8: oq rams. Error info tells which one of the oq is error \n9 : main memory bank0 \n10: main memory bank1""", "" )


   RDW_DEF("ss", 0x60406, "red_ss0_int_err_ecc1_tst","control memory ECC1 error interrupts""", 0x7ff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x60406, "",10,0, "single bit ecc error at rams\n0: free list FIFO\n1: Frame list\n2: desc ram\n3: mcast ram\n4-8: oq rams. Error info tells which one of the oq is error \n9 : main memory bank0 \n10: main memory bank1""", "" )
   RDW_DEF("ss", 0x64406, "red_ss1_int_err_ecc1_tst","control memory ECC1 error interrupts""", 0x7ff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x64406, "",10,0, "single bit ecc error at rams\n0: free list FIFO\n1: Frame list\n2: desc ram\n3: mcast ram\n4-8: oq rams. Error info tells which one of the oq is error \n9 : main memory bank0 \n10: main memory bank1""", "" )
   RDW_DEF("ss", 0x68406, "red_ss2_int_err_ecc1_tst","control memory ECC1 error interrupts""", 0x7ff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x68406, "",10,0, "single bit ecc error at rams\n0: free list FIFO\n1: Frame list\n2: desc ram\n3: mcast ram\n4-8: oq rams. Error info tells which one of the oq is error \n9 : main memory bank0 \n10: main memory bank1""", "" )
   RDW_DEF("ss", 0x6c406, "red_ss3_int_err_ecc1_tst","control memory ECC1 error interrupts""", 0x7ff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x6c406, "",10,0, "single bit ecc error at rams\n0: free list FIFO\n1: Frame list\n2: desc ram\n3: mcast ram\n4-8: oq rams. Error info tells which one of the oq is error \n9 : main memory bank0 \n10: main memory bank1""", "" )


   RDW_DEF("ss", 0x60407, "red_ss0_int_err_ecc2","control memory ECC2 error interrupts""", 0x7ff, 0x0, "int")
   RDW_DEF_FLD( 0x60407, "",10,0, "double bit ecc error at rams. Same as ecc1""", "" )
   RDW_DEF("ss", 0x64407, "red_ss1_int_err_ecc2","control memory ECC2 error interrupts""", 0x7ff, 0x0, "int")
   RDW_DEF_FLD( 0x64407, "",10,0, "double bit ecc error at rams. Same as ecc1""", "" )
   RDW_DEF("ss", 0x68407, "red_ss2_int_err_ecc2","control memory ECC2 error interrupts""", 0x7ff, 0x0, "int")
   RDW_DEF_FLD( 0x68407, "",10,0, "double bit ecc error at rams. Same as ecc1""", "" )
   RDW_DEF("ss", 0x6c407, "red_ss3_int_err_ecc2","control memory ECC2 error interrupts""", 0x7ff, 0x0, "int")
   RDW_DEF_FLD( 0x6c407, "",10,0, "double bit ecc error at rams. Same as ecc1""", "" )


   RDW_DEF("ss", 0x60408, "red_ss0_int_err_ecc2_msk","control memory ECC2 error interrupts""", 0x7ff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x60408, "",10,0, "double bit ecc error at rams. Same as ecc1""", "" )
   RDW_DEF("ss", 0x64408, "red_ss1_int_err_ecc2_msk","control memory ECC2 error interrupts""", 0x7ff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x64408, "",10,0, "double bit ecc error at rams. Same as ecc1""", "" )
   RDW_DEF("ss", 0x68408, "red_ss2_int_err_ecc2_msk","control memory ECC2 error interrupts""", 0x7ff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x68408, "",10,0, "double bit ecc error at rams. Same as ecc1""", "" )
   RDW_DEF("ss", 0x6c408, "red_ss3_int_err_ecc2_msk","control memory ECC2 error interrupts""", 0x7ff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x6c408, "",10,0, "double bit ecc error at rams. Same as ecc1""", "" )


   RDW_DEF("ss", 0x60409, "red_ss0_int_err_ecc2_tst","control memory ECC2 error interrupts""", 0x7ff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x60409, "",10,0, "double bit ecc error at rams. Same as ecc1""", "" )
   RDW_DEF("ss", 0x64409, "red_ss1_int_err_ecc2_tst","control memory ECC2 error interrupts""", 0x7ff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x64409, "",10,0, "double bit ecc error at rams. Same as ecc1""", "" )
   RDW_DEF("ss", 0x68409, "red_ss2_int_err_ecc2_tst","control memory ECC2 error interrupts""", 0x7ff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x68409, "",10,0, "double bit ecc error at rams. Same as ecc1""", "" )
   RDW_DEF("ss", 0x6c409, "red_ss3_int_err_ecc2_tst","control memory ECC2 error interrupts""", 0x7ff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x6c409, "",10,0, "double bit ecc error at rams. Same as ecc1""", "" )


   RDW_DEF("ss", 0x6040a, "red_ss0_int_err","Receive error interrupts""", 0x7fff, 0x0, "int")
   RDW_DEF_FLD( 0x6040a, "wo_cr",4,0, "frames rcvd without credit for pausable classes. Pause is missing.""", "" )
   RDW_DEF_FLD( 0x6040a, "mtu_vio",9,5, "frames rcvd with mtu violations from network side.""", "" )
   RDW_DEF_FLD( 0x6040a, "rcvd_no_cells",14,10, "frames rcvd without cells, mostly an error in free fifo ram""", "" )
   RDW_DEF("ss", 0x6440a, "red_ss1_int_err","Receive error interrupts""", 0x7fff, 0x0, "int")
   RDW_DEF_FLD( 0x6440a, "wo_cr",4,0, "frames rcvd without credit for pausable classes. Pause is missing.""", "" )
   RDW_DEF_FLD( 0x6440a, "mtu_vio",9,5, "frames rcvd with mtu violations from network side.""", "" )
   RDW_DEF_FLD( 0x6440a, "rcvd_no_cells",14,10, "frames rcvd without cells, mostly an error in free fifo ram""", "" )
   RDW_DEF("ss", 0x6840a, "red_ss2_int_err","Receive error interrupts""", 0x7fff, 0x0, "int")
   RDW_DEF_FLD( 0x6840a, "wo_cr",4,0, "frames rcvd without credit for pausable classes. Pause is missing.""", "" )
   RDW_DEF_FLD( 0x6840a, "mtu_vio",9,5, "frames rcvd with mtu violations from network side.""", "" )
   RDW_DEF_FLD( 0x6840a, "rcvd_no_cells",14,10, "frames rcvd without cells, mostly an error in free fifo ram""", "" )
   RDW_DEF("ss", 0x6c40a, "red_ss3_int_err","Receive error interrupts""", 0x7fff, 0x0, "int")
   RDW_DEF_FLD( 0x6c40a, "wo_cr",4,0, "frames rcvd without credit for pausable classes. Pause is missing.""", "" )
   RDW_DEF_FLD( 0x6c40a, "mtu_vio",9,5, "frames rcvd with mtu violations from network side.""", "" )
   RDW_DEF_FLD( 0x6c40a, "rcvd_no_cells",14,10, "frames rcvd without cells, mostly an error in free fifo ram""", "" )


   RDW_DEF("ss", 0x6040b, "red_ss0_int_err_msk","Receive error interrupts""", 0x7fff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x6040b, "wo_cr",4,0, "frames rcvd without credit for pausable classes. Pause is missing.""", "" )
   RDW_DEF_FLD( 0x6040b, "mtu_vio",9,5, "frames rcvd with mtu violations from network side.""", "" )
   RDW_DEF_FLD( 0x6040b, "rcvd_no_cells",14,10, "frames rcvd without cells, mostly an error in free fifo ram""", "" )
   RDW_DEF("ss", 0x6440b, "red_ss1_int_err_msk","Receive error interrupts""", 0x7fff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x6440b, "wo_cr",4,0, "frames rcvd without credit for pausable classes. Pause is missing.""", "" )
   RDW_DEF_FLD( 0x6440b, "mtu_vio",9,5, "frames rcvd with mtu violations from network side.""", "" )
   RDW_DEF_FLD( 0x6440b, "rcvd_no_cells",14,10, "frames rcvd without cells, mostly an error in free fifo ram""", "" )
   RDW_DEF("ss", 0x6840b, "red_ss2_int_err_msk","Receive error interrupts""", 0x7fff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x6840b, "wo_cr",4,0, "frames rcvd without credit for pausable classes. Pause is missing.""", "" )
   RDW_DEF_FLD( 0x6840b, "mtu_vio",9,5, "frames rcvd with mtu violations from network side.""", "" )
   RDW_DEF_FLD( 0x6840b, "rcvd_no_cells",14,10, "frames rcvd without cells, mostly an error in free fifo ram""", "" )
   RDW_DEF("ss", 0x6c40b, "red_ss3_int_err_msk","Receive error interrupts""", 0x7fff, 0x0, "int_msk")
   RDW_DEF_FLD( 0x6c40b, "wo_cr",4,0, "frames rcvd without credit for pausable classes. Pause is missing.""", "" )
   RDW_DEF_FLD( 0x6c40b, "mtu_vio",9,5, "frames rcvd with mtu violations from network side.""", "" )
   RDW_DEF_FLD( 0x6c40b, "rcvd_no_cells",14,10, "frames rcvd without cells, mostly an error in free fifo ram""", "" )


   RDW_DEF("ss", 0x6040c, "red_ss0_int_err_tst","Receive error interrupts""", 0x7fff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x6040c, "wo_cr",4,0, "frames rcvd without credit for pausable classes. Pause is missing.""", "" )
   RDW_DEF_FLD( 0x6040c, "mtu_vio",9,5, "frames rcvd with mtu violations from network side.""", "" )
   RDW_DEF_FLD( 0x6040c, "rcvd_no_cells",14,10, "frames rcvd without cells, mostly an error in free fifo ram""", "" )
   RDW_DEF("ss", 0x6440c, "red_ss1_int_err_tst","Receive error interrupts""", 0x7fff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x6440c, "wo_cr",4,0, "frames rcvd without credit for pausable classes. Pause is missing.""", "" )
   RDW_DEF_FLD( 0x6440c, "mtu_vio",9,5, "frames rcvd with mtu violations from network side.""", "" )
   RDW_DEF_FLD( 0x6440c, "rcvd_no_cells",14,10, "frames rcvd without cells, mostly an error in free fifo ram""", "" )
   RDW_DEF("ss", 0x6840c, "red_ss2_int_err_tst","Receive error interrupts""", 0x7fff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x6840c, "wo_cr",4,0, "frames rcvd without credit for pausable classes. Pause is missing.""", "" )
   RDW_DEF_FLD( 0x6840c, "mtu_vio",9,5, "frames rcvd with mtu violations from network side.""", "" )
   RDW_DEF_FLD( 0x6840c, "rcvd_no_cells",14,10, "frames rcvd without cells, mostly an error in free fifo ram""", "" )
   RDW_DEF("ss", 0x6c40c, "red_ss3_int_err_tst","Receive error interrupts""", 0x7fff, 0x0, "int_tst")
   RDW_DEF_FLD( 0x6c40c, "wo_cr",4,0, "frames rcvd without credit for pausable classes. Pause is missing.""", "" )
   RDW_DEF_FLD( 0x6c40c, "mtu_vio",9,5, "frames rcvd with mtu violations from network side.""", "" )
   RDW_DEF_FLD( 0x6c40c, "rcvd_no_cells",14,10, "frames rcvd without cells, mostly an error in free fifo ram""", "" )


   RDW_DEF("ss", 0x6040d, "red_ss0_cfg_cntl_memif","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6040d, "col_sel",3,0, "accessing frame free cell fifo ram and Output queues:\n0 - free cell fifo, 1- frame list, 2- desc, 3 - multicast, \n4- OQ0, 5-OQ1, 6-OQ2, 7-OQ3, 8-OQ4. 9-15 are reserved""", "" )
   RDW_DEF_FLD( 0x6040d, "ecc_bypass",4,4, "", "" )
   RDW_DEF_FLD( 0x6040d, "force_enable",5,5, "Ties the SRAm enable to 1""", "" )
   RDW_DEF_FLD( 0x6040d, "force_drdy",6,6, "Ties the write and read drdy to 1 so that memif can do back to back accesses""", "" )
   RDW_DEF_FLD( 0x6040d, "end",19,7, "MEMIF_CPU_MEM_END - End of SRAM Address for auto fill and auto verify operation""", "" )
   RDW_DEF("ss", 0x6440d, "red_ss1_cfg_cntl_memif","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6440d, "col_sel",3,0, "accessing frame free cell fifo ram and Output queues:\n0 - free cell fifo, 1- frame list, 2- desc, 3 - multicast, \n4- OQ0, 5-OQ1, 6-OQ2, 7-OQ3, 8-OQ4. 9-15 are reserved""", "" )
   RDW_DEF_FLD( 0x6440d, "ecc_bypass",4,4, "", "" )
   RDW_DEF_FLD( 0x6440d, "force_enable",5,5, "Ties the SRAm enable to 1""", "" )
   RDW_DEF_FLD( 0x6440d, "force_drdy",6,6, "Ties the write and read drdy to 1 so that memif can do back to back accesses""", "" )
   RDW_DEF_FLD( 0x6440d, "end",19,7, "MEMIF_CPU_MEM_END - End of SRAM Address for auto fill and auto verify operation""", "" )
   RDW_DEF("ss", 0x6840d, "red_ss2_cfg_cntl_memif","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6840d, "col_sel",3,0, "accessing frame free cell fifo ram and Output queues:\n0 - free cell fifo, 1- frame list, 2- desc, 3 - multicast, \n4- OQ0, 5-OQ1, 6-OQ2, 7-OQ3, 8-OQ4. 9-15 are reserved""", "" )
   RDW_DEF_FLD( 0x6840d, "ecc_bypass",4,4, "", "" )
   RDW_DEF_FLD( 0x6840d, "force_enable",5,5, "Ties the SRAm enable to 1""", "" )
   RDW_DEF_FLD( 0x6840d, "force_drdy",6,6, "Ties the write and read drdy to 1 so that memif can do back to back accesses""", "" )
   RDW_DEF_FLD( 0x6840d, "end",19,7, "MEMIF_CPU_MEM_END - End of SRAM Address for auto fill and auto verify operation""", "" )
   RDW_DEF("ss", 0x6c40d, "red_ss3_cfg_cntl_memif","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c40d, "col_sel",3,0, "accessing frame free cell fifo ram and Output queues:\n0 - free cell fifo, 1- frame list, 2- desc, 3 - multicast, \n4- OQ0, 5-OQ1, 6-OQ2, 7-OQ3, 8-OQ4. 9-15 are reserved""", "" )
   RDW_DEF_FLD( 0x6c40d, "ecc_bypass",4,4, "", "" )
   RDW_DEF_FLD( 0x6c40d, "force_enable",5,5, "Ties the SRAm enable to 1""", "" )
   RDW_DEF_FLD( 0x6c40d, "force_drdy",6,6, "Ties the write and read drdy to 1 so that memif can do back to back accesses""", "" )
   RDW_DEF_FLD( 0x6c40d, "end",19,7, "MEMIF_CPU_MEM_END - End of SRAM Address for auto fill and auto verify operation""", "" )


   RDW_DEF("ss", 0x6040e, "red_ss0_dhs_cntl_memif_cmd","MEMIF_CPU_MEM_CMD - Command register for CPU access to the SRAM""", 0x1ffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x6040e, "autoinc",0,0, "address will automatically increment for each data access.""", "" )
   RDW_DEF_FLD( 0x6040e, "autowr",1,1, "writes will occur automatically based on write to data register""", "" )
   RDW_DEF_FLD( 0x6040e, "autord",2,2, "reads will occur automatically based on read to data register""", "" )
   RDW_DEF_FLD( 0x6040e, "immwr",3,3, "when not autowr, setting this bit causes a write to occur""", "" )
   RDW_DEF_FLD( 0x6040e, "immrd",4,4, "when not autord, setting this bit causes a read to occur""", "" )
   RDW_DEF_FLD( 0x6040e, "autofill",5,5, "when set, an auto fill will hapen starting from mem_strt to mem_end""", "" )
   RDW_DEF_FLD( 0x6040e, "autovrfy",6,6, "when set, an auto verify process will start from mem_strt to mem_end""", "" )
   RDW_DEF_FLD( 0x6040e, "autotest",7,7, "when set, an auto test process will start from mem_strt to mem_end""", "" )
   RDW_DEF_FLD( 0x6040e, "autoflip",8,8, "when set, the data pattern will be flipped to be written alternatively""", "" )
   RDW_DEF_FLD( 0x6040e, "autoloop",9,9, "when set, the auto fill or auto loop function will loop back to si_mem_addr when reaching end""", "" )
   RDW_DEF_FLD( 0x6040e, "diracc",10,10, "direct access enabled""", "" )
   RDW_DEF_FLD( 0x6040e, "diraddr",11,11, "direct address enabled. BM memories are not exposed to host address space directly. But in the future\nthis can be enabled.""", "" )
   RDW_DEF_FLD( 0x6040e, "reserved",15,12, "reserved""", "" )
   RDW_DEF_FLD( 0x6040e, "unused_bits",24,16, "set this to the number of bits in the data result that are not used""", "" )
   RDW_DEF("ss", 0x6440e, "red_ss1_dhs_cntl_memif_cmd","MEMIF_CPU_MEM_CMD - Command register for CPU access to the SRAM""", 0x1ffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x6440e, "autoinc",0,0, "address will automatically increment for each data access.""", "" )
   RDW_DEF_FLD( 0x6440e, "autowr",1,1, "writes will occur automatically based on write to data register""", "" )
   RDW_DEF_FLD( 0x6440e, "autord",2,2, "reads will occur automatically based on read to data register""", "" )
   RDW_DEF_FLD( 0x6440e, "immwr",3,3, "when not autowr, setting this bit causes a write to occur""", "" )
   RDW_DEF_FLD( 0x6440e, "immrd",4,4, "when not autord, setting this bit causes a read to occur""", "" )
   RDW_DEF_FLD( 0x6440e, "autofill",5,5, "when set, an auto fill will hapen starting from mem_strt to mem_end""", "" )
   RDW_DEF_FLD( 0x6440e, "autovrfy",6,6, "when set, an auto verify process will start from mem_strt to mem_end""", "" )
   RDW_DEF_FLD( 0x6440e, "autotest",7,7, "when set, an auto test process will start from mem_strt to mem_end""", "" )
   RDW_DEF_FLD( 0x6440e, "autoflip",8,8, "when set, the data pattern will be flipped to be written alternatively""", "" )
   RDW_DEF_FLD( 0x6440e, "autoloop",9,9, "when set, the auto fill or auto loop function will loop back to si_mem_addr when reaching end""", "" )
   RDW_DEF_FLD( 0x6440e, "diracc",10,10, "direct access enabled""", "" )
   RDW_DEF_FLD( 0x6440e, "diraddr",11,11, "direct address enabled. BM memories are not exposed to host address space directly. But in the future\nthis can be enabled.""", "" )
   RDW_DEF_FLD( 0x6440e, "reserved",15,12, "reserved""", "" )
   RDW_DEF_FLD( 0x6440e, "unused_bits",24,16, "set this to the number of bits in the data result that are not used""", "" )
   RDW_DEF("ss", 0x6840e, "red_ss2_dhs_cntl_memif_cmd","MEMIF_CPU_MEM_CMD - Command register for CPU access to the SRAM""", 0x1ffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x6840e, "autoinc",0,0, "address will automatically increment for each data access.""", "" )
   RDW_DEF_FLD( 0x6840e, "autowr",1,1, "writes will occur automatically based on write to data register""", "" )
   RDW_DEF_FLD( 0x6840e, "autord",2,2, "reads will occur automatically based on read to data register""", "" )
   RDW_DEF_FLD( 0x6840e, "immwr",3,3, "when not autowr, setting this bit causes a write to occur""", "" )
   RDW_DEF_FLD( 0x6840e, "immrd",4,4, "when not autord, setting this bit causes a read to occur""", "" )
   RDW_DEF_FLD( 0x6840e, "autofill",5,5, "when set, an auto fill will hapen starting from mem_strt to mem_end""", "" )
   RDW_DEF_FLD( 0x6840e, "autovrfy",6,6, "when set, an auto verify process will start from mem_strt to mem_end""", "" )
   RDW_DEF_FLD( 0x6840e, "autotest",7,7, "when set, an auto test process will start from mem_strt to mem_end""", "" )
   RDW_DEF_FLD( 0x6840e, "autoflip",8,8, "when set, the data pattern will be flipped to be written alternatively""", "" )
   RDW_DEF_FLD( 0x6840e, "autoloop",9,9, "when set, the auto fill or auto loop function will loop back to si_mem_addr when reaching end""", "" )
   RDW_DEF_FLD( 0x6840e, "diracc",10,10, "direct access enabled""", "" )
   RDW_DEF_FLD( 0x6840e, "diraddr",11,11, "direct address enabled. BM memories are not exposed to host address space directly. But in the future\nthis can be enabled.""", "" )
   RDW_DEF_FLD( 0x6840e, "reserved",15,12, "reserved""", "" )
   RDW_DEF_FLD( 0x6840e, "unused_bits",24,16, "set this to the number of bits in the data result that are not used""", "" )
   RDW_DEF("ss", 0x6c40e, "red_ss3_dhs_cntl_memif_cmd","MEMIF_CPU_MEM_CMD - Command register for CPU access to the SRAM""", 0x1ffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x6c40e, "autoinc",0,0, "address will automatically increment for each data access.""", "" )
   RDW_DEF_FLD( 0x6c40e, "autowr",1,1, "writes will occur automatically based on write to data register""", "" )
   RDW_DEF_FLD( 0x6c40e, "autord",2,2, "reads will occur automatically based on read to data register""", "" )
   RDW_DEF_FLD( 0x6c40e, "immwr",3,3, "when not autowr, setting this bit causes a write to occur""", "" )
   RDW_DEF_FLD( 0x6c40e, "immrd",4,4, "when not autord, setting this bit causes a read to occur""", "" )
   RDW_DEF_FLD( 0x6c40e, "autofill",5,5, "when set, an auto fill will hapen starting from mem_strt to mem_end""", "" )
   RDW_DEF_FLD( 0x6c40e, "autovrfy",6,6, "when set, an auto verify process will start from mem_strt to mem_end""", "" )
   RDW_DEF_FLD( 0x6c40e, "autotest",7,7, "when set, an auto test process will start from mem_strt to mem_end""", "" )
   RDW_DEF_FLD( 0x6c40e, "autoflip",8,8, "when set, the data pattern will be flipped to be written alternatively""", "" )
   RDW_DEF_FLD( 0x6c40e, "autoloop",9,9, "when set, the auto fill or auto loop function will loop back to si_mem_addr when reaching end""", "" )
   RDW_DEF_FLD( 0x6c40e, "diracc",10,10, "direct access enabled""", "" )
   RDW_DEF_FLD( 0x6c40e, "diraddr",11,11, "direct address enabled. BM memories are not exposed to host address space directly. But in the future\nthis can be enabled.""", "" )
   RDW_DEF_FLD( 0x6c40e, "reserved",15,12, "reserved""", "" )
   RDW_DEF_FLD( 0x6c40e, "unused_bits",24,16, "set this to the number of bits in the data result that are not used""", "" )


   RDW_DEF("ss", 0x6040f, "red_ss0_dhs_cntl_memif_sta","MEMIF_CPU_MEM_STA - Status register for CPU access to the SRAM""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x6040f, "autowr_err",0,0, "data write attempted before ready""", "" )
   RDW_DEF_FLD( 0x6040f, "immwr_err",1,1, "immediate data write before ready""", "" )
   RDW_DEF_FLD( 0x6040f, "rd_valid",2,2, "read data is available in data register""", "" )
   RDW_DEF_FLD( 0x6040f, "wr_busy",3,3, "write data is busy not written to sram yet.""", "" )
   RDW_DEF_FLD( 0x6040f, "autotest_done",4,4, "auto fill is done.""", "" )
   RDW_DEF_FLD( 0x6040f, "autovrfy_err",5,5, "auto verify error.""", "" )
   RDW_DEF("ss", 0x6440f, "red_ss1_dhs_cntl_memif_sta","MEMIF_CPU_MEM_STA - Status register for CPU access to the SRAM""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x6440f, "autowr_err",0,0, "data write attempted before ready""", "" )
   RDW_DEF_FLD( 0x6440f, "immwr_err",1,1, "immediate data write before ready""", "" )
   RDW_DEF_FLD( 0x6440f, "rd_valid",2,2, "read data is available in data register""", "" )
   RDW_DEF_FLD( 0x6440f, "wr_busy",3,3, "write data is busy not written to sram yet.""", "" )
   RDW_DEF_FLD( 0x6440f, "autotest_done",4,4, "auto fill is done.""", "" )
   RDW_DEF_FLD( 0x6440f, "autovrfy_err",5,5, "auto verify error.""", "" )
   RDW_DEF("ss", 0x6840f, "red_ss2_dhs_cntl_memif_sta","MEMIF_CPU_MEM_STA - Status register for CPU access to the SRAM""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x6840f, "autowr_err",0,0, "data write attempted before ready""", "" )
   RDW_DEF_FLD( 0x6840f, "immwr_err",1,1, "immediate data write before ready""", "" )
   RDW_DEF_FLD( 0x6840f, "rd_valid",2,2, "read data is available in data register""", "" )
   RDW_DEF_FLD( 0x6840f, "wr_busy",3,3, "write data is busy not written to sram yet.""", "" )
   RDW_DEF_FLD( 0x6840f, "autotest_done",4,4, "auto fill is done.""", "" )
   RDW_DEF_FLD( 0x6840f, "autovrfy_err",5,5, "auto verify error.""", "" )
   RDW_DEF("ss", 0x6c40f, "red_ss3_dhs_cntl_memif_sta","MEMIF_CPU_MEM_STA - Status register for CPU access to the SRAM""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x6c40f, "autowr_err",0,0, "data write attempted before ready""", "" )
   RDW_DEF_FLD( 0x6c40f, "immwr_err",1,1, "immediate data write before ready""", "" )
   RDW_DEF_FLD( 0x6c40f, "rd_valid",2,2, "read data is available in data register""", "" )
   RDW_DEF_FLD( 0x6c40f, "wr_busy",3,3, "write data is busy not written to sram yet.""", "" )
   RDW_DEF_FLD( 0x6c40f, "autotest_done",4,4, "auto fill is done.""", "" )
   RDW_DEF_FLD( 0x6c40f, "autovrfy_err",5,5, "auto verify error.""", "" )


   RDW_DEF("ss", 0x60410, "red_ss0_dhs_cntl_memif_addr","MEMIF_CPU_MEM_ADDR - External SRAM Address for MEMIF_HDTL_cpu_memory read and write and also the start address for auto test""", 0x1fff, 0x0, "dhs")
   RDW_DEF_FLD( 0x60410, "field",12,0, "", "" )
   RDW_DEF("ss", 0x64410, "red_ss1_dhs_cntl_memif_addr","MEMIF_CPU_MEM_ADDR - External SRAM Address for MEMIF_HDTL_cpu_memory read and write and also the start address for auto test""", 0x1fff, 0x0, "dhs")
   RDW_DEF_FLD( 0x64410, "field",12,0, "", "" )
   RDW_DEF("ss", 0x68410, "red_ss2_dhs_cntl_memif_addr","MEMIF_CPU_MEM_ADDR - External SRAM Address for MEMIF_HDTL_cpu_memory read and write and also the start address for auto test""", 0x1fff, 0x0, "dhs")
   RDW_DEF_FLD( 0x68410, "field",12,0, "", "" )
   RDW_DEF("ss", 0x6c410, "red_ss3_dhs_cntl_memif_addr","MEMIF_CPU_MEM_ADDR - External SRAM Address for MEMIF_HDTL_cpu_memory read and write and also the start address for auto test""", 0x1fff, 0x0, "dhs")
   RDW_DEF_FLD( 0x6c410, "field",12,0, "", "" )


   RDW_DEF("ss", 0x60411, "red_ss0_dhs_cntl_memif_data","MEMIF_CPU_MEM_DATA - Data Word to Read or Write from Link RAM for bits [18:0]""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x60411, "field",31,0, "with ECC""", "" )
   RDW_DEF("ss", 0x64411, "red_ss1_dhs_cntl_memif_data","MEMIF_CPU_MEM_DATA - Data Word to Read or Write from Link RAM for bits [18:0]""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x64411, "field",31,0, "with ECC""", "" )
   RDW_DEF("ss", 0x68411, "red_ss2_dhs_cntl_memif_data","MEMIF_CPU_MEM_DATA - Data Word to Read or Write from Link RAM for bits [18:0]""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x68411, "field",31,0, "with ECC""", "" )
   RDW_DEF("ss", 0x6c411, "red_ss3_dhs_cntl_memif_data","MEMIF_CPU_MEM_DATA - Data Word to Read or Write from Link RAM for bits [18:0]""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x6c411, "field",31,0, "with ECC""", "" )


   RDW_DEF("ss", 0x60412, "red_ss0_cfg_bulk_memif","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x60412, "col_sel",3,0, "Assumption is this will select the double word. I have 10 double words""", "" )
   RDW_DEF_FLD( 0x60412, "ecc_bypass",4,4, "Bypass ecc gen and checking during CPU memif access""", "" )
   RDW_DEF_FLD( 0x60412, "force_enable",5,5, "Ties the SRAm enable to 1""", "" )
   RDW_DEF_FLD( 0x60412, "force_drdy",6,6, "Ties the write and read drdy to 1 so that memif can do back to back accesses""", "" )
   RDW_DEF_FLD( 0x60412, "end",19,7, "MEMIF_CPU_MEM_END - End of SRAM Address for auto fill and auto verify operation""", "" )
   RDW_DEF("ss", 0x64412, "red_ss1_cfg_bulk_memif","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x64412, "col_sel",3,0, "Assumption is this will select the double word. I have 10 double words""", "" )
   RDW_DEF_FLD( 0x64412, "ecc_bypass",4,4, "Bypass ecc gen and checking during CPU memif access""", "" )
   RDW_DEF_FLD( 0x64412, "force_enable",5,5, "Ties the SRAm enable to 1""", "" )
   RDW_DEF_FLD( 0x64412, "force_drdy",6,6, "Ties the write and read drdy to 1 so that memif can do back to back accesses""", "" )
   RDW_DEF_FLD( 0x64412, "end",19,7, "MEMIF_CPU_MEM_END - End of SRAM Address for auto fill and auto verify operation""", "" )
   RDW_DEF("ss", 0x68412, "red_ss2_cfg_bulk_memif","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x68412, "col_sel",3,0, "Assumption is this will select the double word. I have 10 double words""", "" )
   RDW_DEF_FLD( 0x68412, "ecc_bypass",4,4, "Bypass ecc gen and checking during CPU memif access""", "" )
   RDW_DEF_FLD( 0x68412, "force_enable",5,5, "Ties the SRAm enable to 1""", "" )
   RDW_DEF_FLD( 0x68412, "force_drdy",6,6, "Ties the write and read drdy to 1 so that memif can do back to back accesses""", "" )
   RDW_DEF_FLD( 0x68412, "end",19,7, "MEMIF_CPU_MEM_END - End of SRAM Address for auto fill and auto verify operation""", "" )
   RDW_DEF("ss", 0x6c412, "red_ss3_cfg_bulk_memif","", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c412, "col_sel",3,0, "Assumption is this will select the double word. I have 10 double words""", "" )
   RDW_DEF_FLD( 0x6c412, "ecc_bypass",4,4, "Bypass ecc gen and checking during CPU memif access""", "" )
   RDW_DEF_FLD( 0x6c412, "force_enable",5,5, "Ties the SRAm enable to 1""", "" )
   RDW_DEF_FLD( 0x6c412, "force_drdy",6,6, "Ties the write and read drdy to 1 so that memif can do back to back accesses""", "" )
   RDW_DEF_FLD( 0x6c412, "end",19,7, "MEMIF_CPU_MEM_END - End of SRAM Address for auto fill and auto verify operation""", "" )


   RDW_DEF("ss", 0x60413, "red_ss0_dhs_bulk_memif_cmd","MEMIF_CPU_MEM_CMD - Command register for CPU access to the SRAM""", 0x1ffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x60413, "autoinc",0,0, "address will automatically increment for each data access.""", "" )
   RDW_DEF_FLD( 0x60413, "autowr",1,1, "writes will occur automatically based on write to data register""", "" )
   RDW_DEF_FLD( 0x60413, "autord",2,2, "reads will occur automatically based on read to data register""", "" )
   RDW_DEF_FLD( 0x60413, "immwr",3,3, "when not autowr, setting this bit causes a write to occur""", "" )
   RDW_DEF_FLD( 0x60413, "immrd",4,4, "when not autord, setting this bit causes a read to occur""", "" )
   RDW_DEF_FLD( 0x60413, "autofill",5,5, "when set, an auto fill will hapen starting from mem_strt to mem_end""", "" )
   RDW_DEF_FLD( 0x60413, "autovrfy",6,6, "when set, an auto verify process will start from mem_strt to mem_end""", "" )
   RDW_DEF_FLD( 0x60413, "autotest",7,7, "when set, an auto test process will start from mem_strt to mem_end""", "" )
   RDW_DEF_FLD( 0x60413, "autoflip",8,8, "when set, the data pattern will be flipped to be written alternatively""", "" )
   RDW_DEF_FLD( 0x60413, "autoloop",9,9, "when set, the auto fill or auto loop function will loop back to si_mem_addr when reaching end""", "" )
   RDW_DEF_FLD( 0x60413, "diracc",10,10, "direct access enabled""", "" )
   RDW_DEF_FLD( 0x60413, "diraddr",11,11, "direct address enabled. BM memories are not exposed to host address space directly. But in the future\nthis can be enabled.""", "" )
   RDW_DEF_FLD( 0x60413, "reserved",15,12, "reserved""", "" )
   RDW_DEF_FLD( 0x60413, "unused_bits",24,16, "set this to the number of bits in the data result that are not used""", "" )
   RDW_DEF("ss", 0x64413, "red_ss1_dhs_bulk_memif_cmd","MEMIF_CPU_MEM_CMD - Command register for CPU access to the SRAM""", 0x1ffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x64413, "autoinc",0,0, "address will automatically increment for each data access.""", "" )
   RDW_DEF_FLD( 0x64413, "autowr",1,1, "writes will occur automatically based on write to data register""", "" )
   RDW_DEF_FLD( 0x64413, "autord",2,2, "reads will occur automatically based on read to data register""", "" )
   RDW_DEF_FLD( 0x64413, "immwr",3,3, "when not autowr, setting this bit causes a write to occur""", "" )
   RDW_DEF_FLD( 0x64413, "immrd",4,4, "when not autord, setting this bit causes a read to occur""", "" )
   RDW_DEF_FLD( 0x64413, "autofill",5,5, "when set, an auto fill will hapen starting from mem_strt to mem_end""", "" )
   RDW_DEF_FLD( 0x64413, "autovrfy",6,6, "when set, an auto verify process will start from mem_strt to mem_end""", "" )
   RDW_DEF_FLD( 0x64413, "autotest",7,7, "when set, an auto test process will start from mem_strt to mem_end""", "" )
   RDW_DEF_FLD( 0x64413, "autoflip",8,8, "when set, the data pattern will be flipped to be written alternatively""", "" )
   RDW_DEF_FLD( 0x64413, "autoloop",9,9, "when set, the auto fill or auto loop function will loop back to si_mem_addr when reaching end""", "" )
   RDW_DEF_FLD( 0x64413, "diracc",10,10, "direct access enabled""", "" )
   RDW_DEF_FLD( 0x64413, "diraddr",11,11, "direct address enabled. BM memories are not exposed to host address space directly. But in the future\nthis can be enabled.""", "" )
   RDW_DEF_FLD( 0x64413, "reserved",15,12, "reserved""", "" )
   RDW_DEF_FLD( 0x64413, "unused_bits",24,16, "set this to the number of bits in the data result that are not used""", "" )
   RDW_DEF("ss", 0x68413, "red_ss2_dhs_bulk_memif_cmd","MEMIF_CPU_MEM_CMD - Command register for CPU access to the SRAM""", 0x1ffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x68413, "autoinc",0,0, "address will automatically increment for each data access.""", "" )
   RDW_DEF_FLD( 0x68413, "autowr",1,1, "writes will occur automatically based on write to data register""", "" )
   RDW_DEF_FLD( 0x68413, "autord",2,2, "reads will occur automatically based on read to data register""", "" )
   RDW_DEF_FLD( 0x68413, "immwr",3,3, "when not autowr, setting this bit causes a write to occur""", "" )
   RDW_DEF_FLD( 0x68413, "immrd",4,4, "when not autord, setting this bit causes a read to occur""", "" )
   RDW_DEF_FLD( 0x68413, "autofill",5,5, "when set, an auto fill will hapen starting from mem_strt to mem_end""", "" )
   RDW_DEF_FLD( 0x68413, "autovrfy",6,6, "when set, an auto verify process will start from mem_strt to mem_end""", "" )
   RDW_DEF_FLD( 0x68413, "autotest",7,7, "when set, an auto test process will start from mem_strt to mem_end""", "" )
   RDW_DEF_FLD( 0x68413, "autoflip",8,8, "when set, the data pattern will be flipped to be written alternatively""", "" )
   RDW_DEF_FLD( 0x68413, "autoloop",9,9, "when set, the auto fill or auto loop function will loop back to si_mem_addr when reaching end""", "" )
   RDW_DEF_FLD( 0x68413, "diracc",10,10, "direct access enabled""", "" )
   RDW_DEF_FLD( 0x68413, "diraddr",11,11, "direct address enabled. BM memories are not exposed to host address space directly. But in the future\nthis can be enabled.""", "" )
   RDW_DEF_FLD( 0x68413, "reserved",15,12, "reserved""", "" )
   RDW_DEF_FLD( 0x68413, "unused_bits",24,16, "set this to the number of bits in the data result that are not used""", "" )
   RDW_DEF("ss", 0x6c413, "red_ss3_dhs_bulk_memif_cmd","MEMIF_CPU_MEM_CMD - Command register for CPU access to the SRAM""", 0x1ffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x6c413, "autoinc",0,0, "address will automatically increment for each data access.""", "" )
   RDW_DEF_FLD( 0x6c413, "autowr",1,1, "writes will occur automatically based on write to data register""", "" )
   RDW_DEF_FLD( 0x6c413, "autord",2,2, "reads will occur automatically based on read to data register""", "" )
   RDW_DEF_FLD( 0x6c413, "immwr",3,3, "when not autowr, setting this bit causes a write to occur""", "" )
   RDW_DEF_FLD( 0x6c413, "immrd",4,4, "when not autord, setting this bit causes a read to occur""", "" )
   RDW_DEF_FLD( 0x6c413, "autofill",5,5, "when set, an auto fill will hapen starting from mem_strt to mem_end""", "" )
   RDW_DEF_FLD( 0x6c413, "autovrfy",6,6, "when set, an auto verify process will start from mem_strt to mem_end""", "" )
   RDW_DEF_FLD( 0x6c413, "autotest",7,7, "when set, an auto test process will start from mem_strt to mem_end""", "" )
   RDW_DEF_FLD( 0x6c413, "autoflip",8,8, "when set, the data pattern will be flipped to be written alternatively""", "" )
   RDW_DEF_FLD( 0x6c413, "autoloop",9,9, "when set, the auto fill or auto loop function will loop back to si_mem_addr when reaching end""", "" )
   RDW_DEF_FLD( 0x6c413, "diracc",10,10, "direct access enabled""", "" )
   RDW_DEF_FLD( 0x6c413, "diraddr",11,11, "direct address enabled. BM memories are not exposed to host address space directly. But in the future\nthis can be enabled.""", "" )
   RDW_DEF_FLD( 0x6c413, "reserved",15,12, "reserved""", "" )
   RDW_DEF_FLD( 0x6c413, "unused_bits",24,16, "set this to the number of bits in the data result that are not used""", "" )


   RDW_DEF("ss", 0x60414, "red_ss0_dhs_bulk_memif_sta","MEMIF_CPU_MEM_STA - Status register for CPU access to the SRAM""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x60414, "autowr_err",0,0, "data write attempted before ready""", "" )
   RDW_DEF_FLD( 0x60414, "immwr_err",1,1, "immediate data write before ready""", "" )
   RDW_DEF_FLD( 0x60414, "rd_valid",2,2, "read data is available in data register""", "" )
   RDW_DEF_FLD( 0x60414, "wr_busy",3,3, "write data is busy not written to sram yet.""", "" )
   RDW_DEF_FLD( 0x60414, "autotest_done",4,4, "auto fill is done.""", "" )
   RDW_DEF_FLD( 0x60414, "autovrfy_err",5,5, "auto verify error.""", "" )
   RDW_DEF("ss", 0x64414, "red_ss1_dhs_bulk_memif_sta","MEMIF_CPU_MEM_STA - Status register for CPU access to the SRAM""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x64414, "autowr_err",0,0, "data write attempted before ready""", "" )
   RDW_DEF_FLD( 0x64414, "immwr_err",1,1, "immediate data write before ready""", "" )
   RDW_DEF_FLD( 0x64414, "rd_valid",2,2, "read data is available in data register""", "" )
   RDW_DEF_FLD( 0x64414, "wr_busy",3,3, "write data is busy not written to sram yet.""", "" )
   RDW_DEF_FLD( 0x64414, "autotest_done",4,4, "auto fill is done.""", "" )
   RDW_DEF_FLD( 0x64414, "autovrfy_err",5,5, "auto verify error.""", "" )
   RDW_DEF("ss", 0x68414, "red_ss2_dhs_bulk_memif_sta","MEMIF_CPU_MEM_STA - Status register for CPU access to the SRAM""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x68414, "autowr_err",0,0, "data write attempted before ready""", "" )
   RDW_DEF_FLD( 0x68414, "immwr_err",1,1, "immediate data write before ready""", "" )
   RDW_DEF_FLD( 0x68414, "rd_valid",2,2, "read data is available in data register""", "" )
   RDW_DEF_FLD( 0x68414, "wr_busy",3,3, "write data is busy not written to sram yet.""", "" )
   RDW_DEF_FLD( 0x68414, "autotest_done",4,4, "auto fill is done.""", "" )
   RDW_DEF_FLD( 0x68414, "autovrfy_err",5,5, "auto verify error.""", "" )
   RDW_DEF("ss", 0x6c414, "red_ss3_dhs_bulk_memif_sta","MEMIF_CPU_MEM_STA - Status register for CPU access to the SRAM""", 0x3f, 0x0, "dhs")
   RDW_DEF_FLD( 0x6c414, "autowr_err",0,0, "data write attempted before ready""", "" )
   RDW_DEF_FLD( 0x6c414, "immwr_err",1,1, "immediate data write before ready""", "" )
   RDW_DEF_FLD( 0x6c414, "rd_valid",2,2, "read data is available in data register""", "" )
   RDW_DEF_FLD( 0x6c414, "wr_busy",3,3, "write data is busy not written to sram yet.""", "" )
   RDW_DEF_FLD( 0x6c414, "autotest_done",4,4, "auto fill is done.""", "" )
   RDW_DEF_FLD( 0x6c414, "autovrfy_err",5,5, "auto verify error.""", "" )


   RDW_DEF("ss", 0x60415, "red_ss0_dhs_bulk_memif_addr","MEMIF_CPU_MEM_ADDR - External SRAM Address for MEMIF_HDTL_cpu_memory read and write and also the start address for auto test""", 0x1fff, 0x0, "dhs")
   RDW_DEF_FLD( 0x60415, "field",12,0, "", "" )
   RDW_DEF("ss", 0x64415, "red_ss1_dhs_bulk_memif_addr","MEMIF_CPU_MEM_ADDR - External SRAM Address for MEMIF_HDTL_cpu_memory read and write and also the start address for auto test""", 0x1fff, 0x0, "dhs")
   RDW_DEF_FLD( 0x64415, "field",12,0, "", "" )
   RDW_DEF("ss", 0x68415, "red_ss2_dhs_bulk_memif_addr","MEMIF_CPU_MEM_ADDR - External SRAM Address for MEMIF_HDTL_cpu_memory read and write and also the start address for auto test""", 0x1fff, 0x0, "dhs")
   RDW_DEF_FLD( 0x68415, "field",12,0, "", "" )
   RDW_DEF("ss", 0x6c415, "red_ss3_dhs_bulk_memif_addr","MEMIF_CPU_MEM_ADDR - External SRAM Address for MEMIF_HDTL_cpu_memory read and write and also the start address for auto test""", 0x1fff, 0x0, "dhs")
   RDW_DEF_FLD( 0x6c415, "field",12,0, "", "" )


   RDW_DEF("ss", 0x60418, "red_ss0_dhs_bulk_memif_data","MEMIF_CPU_MEM_DATA - Data Word to Read or Write from main data RAM""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x60418, "field_00",31,0, "64 bits data and 8 bits ecc""", "" )
   RDW_DEF("ss", 0x60419, "red_ss0_dhs_bulk_memif_data","MEMIF_CPU_MEM_DATA - Data Word to Read or Write from main data RAM""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x60419, "field_01",31,0, "64 bits data and 8 bits ecc""", "" )
   RDW_DEF("ss", 0x6041a, "red_ss0_dhs_bulk_memif_data","MEMIF_CPU_MEM_DATA - Data Word to Read or Write from main data RAM""", 0xff, 0x0, "dhs")
   RDW_DEF_FLD( 0x6041a, "field_02",7,0, "64 bits data and 8 bits ecc""", "" )
   RDW_DEF("ss", 0x64418, "red_ss1_dhs_bulk_memif_data","MEMIF_CPU_MEM_DATA - Data Word to Read or Write from main data RAM""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x64418, "field_00",31,0, "64 bits data and 8 bits ecc""", "" )
   RDW_DEF("ss", 0x64419, "red_ss1_dhs_bulk_memif_data","MEMIF_CPU_MEM_DATA - Data Word to Read or Write from main data RAM""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x64419, "field_01",31,0, "64 bits data and 8 bits ecc""", "" )
   RDW_DEF("ss", 0x6441a, "red_ss1_dhs_bulk_memif_data","MEMIF_CPU_MEM_DATA - Data Word to Read or Write from main data RAM""", 0xff, 0x0, "dhs")
   RDW_DEF_FLD( 0x6441a, "field_02",7,0, "64 bits data and 8 bits ecc""", "" )
   RDW_DEF("ss", 0x68418, "red_ss2_dhs_bulk_memif_data","MEMIF_CPU_MEM_DATA - Data Word to Read or Write from main data RAM""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x68418, "field_00",31,0, "64 bits data and 8 bits ecc""", "" )
   RDW_DEF("ss", 0x68419, "red_ss2_dhs_bulk_memif_data","MEMIF_CPU_MEM_DATA - Data Word to Read or Write from main data RAM""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x68419, "field_01",31,0, "64 bits data and 8 bits ecc""", "" )
   RDW_DEF("ss", 0x6841a, "red_ss2_dhs_bulk_memif_data","MEMIF_CPU_MEM_DATA - Data Word to Read or Write from main data RAM""", 0xff, 0x0, "dhs")
   RDW_DEF_FLD( 0x6841a, "field_02",7,0, "64 bits data and 8 bits ecc""", "" )
   RDW_DEF("ss", 0x6c418, "red_ss3_dhs_bulk_memif_data","MEMIF_CPU_MEM_DATA - Data Word to Read or Write from main data RAM""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x6c418, "field_00",31,0, "64 bits data and 8 bits ecc""", "" )
   RDW_DEF("ss", 0x6c419, "red_ss3_dhs_bulk_memif_data","MEMIF_CPU_MEM_DATA - Data Word to Read or Write from main data RAM""", 0xffffffff, 0x0, "dhs")
   RDW_DEF_FLD( 0x6c419, "field_01",31,0, "64 bits data and 8 bits ecc""", "" )
   RDW_DEF("ss", 0x6c41a, "red_ss3_dhs_bulk_memif_data","MEMIF_CPU_MEM_DATA - Data Word to Read or Write from main data RAM""", 0xff, 0x0, "dhs")
   RDW_DEF_FLD( 0x6c41a, "field_02",7,0, "64 bits data and 8 bits ecc""", "" )


   RDW_DEF("ss", 0x6041b, "red_ss0_cfg_spare","spare registers""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6041b, "flops",15,0, "spare registers in BM. Goes as a 4 deep chain and get muxed to debug""", "" )
   RDW_DEF("ss", 0x6441b, "red_ss1_cfg_spare","spare registers""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6441b, "flops",15,0, "spare registers in BM. Goes as a 4 deep chain and get muxed to debug""", "" )
   RDW_DEF("ss", 0x6841b, "red_ss2_cfg_spare","spare registers""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6841b, "flops",15,0, "spare registers in BM. Goes as a 4 deep chain and get muxed to debug""", "" )
   RDW_DEF("ss", 0x6c41b, "red_ss3_cfg_spare","spare registers""", 0xffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c41b, "flops",15,0, "spare registers in BM. Goes as a 4 deep chain and get muxed to debug""", "" )


   RDW_DEF("ss", 0x6041c, "red_ss0_sta_debug","port debug data register""", 0xffff, 0x0, "sta")
   RDW_DEF_FLD( 0x6041c, "info",15,0, "port debug register. Default is the port slave base address.""", "" )
   RDW_DEF("ss", 0x6441c, "red_ss1_sta_debug","port debug data register""", 0xffff, 0x0, "sta")
   RDW_DEF_FLD( 0x6441c, "info",15,0, "port debug register. Default is the port slave base address.""", "" )
   RDW_DEF("ss", 0x6841c, "red_ss2_sta_debug","port debug data register""", 0xffff, 0x0, "sta")
   RDW_DEF_FLD( 0x6841c, "info",15,0, "port debug register. Default is the port slave base address.""", "" )
   RDW_DEF("ss", 0x6c41c, "red_ss3_sta_debug","port debug data register""", 0xffff, 0x0, "sta")
   RDW_DEF_FLD( 0x6c41c, "info",15,0, "port debug register. Default is the port slave base address.""", "" )


   RDW_DEF("ss", 0x6041d, "red_ss0_cfg_ddrop","delay drop control""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6041d, "port_en",4,0, "delay drop is enabled for the output port""", "" )
   RDW_DEF_FLD( 0x6041d, "net_port",7,5, "10G network port. That is connected to Gatos. 0 to 4 are valid.""", "" )
   RDW_DEF_FLD( 0x6041d, "tick_time",15,8, "Output proxy queue increment/decrement tick time, in terms of 2.67ns cycles.\nAfter every tick_time cycles, the hardware will increment all the\npaused FPQ cntrs by 1 or decrement all the proxy queues""", "" )
   RDW_DEF_FLD( 0x6041d, "class_en",19,16, "delay drop is enabled for the output class""", "" )
   RDW_DEF("ss", 0x6441d, "red_ss1_cfg_ddrop","delay drop control""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6441d, "port_en",4,0, "delay drop is enabled for the output port""", "" )
   RDW_DEF_FLD( 0x6441d, "net_port",7,5, "10G network port. That is connected to Gatos. 0 to 4 are valid.""", "" )
   RDW_DEF_FLD( 0x6441d, "tick_time",15,8, "Output proxy queue increment/decrement tick time, in terms of 2.67ns cycles.\nAfter every tick_time cycles, the hardware will increment all the\npaused FPQ cntrs by 1 or decrement all the proxy queues""", "" )
   RDW_DEF_FLD( 0x6441d, "class_en",19,16, "delay drop is enabled for the output class""", "" )
   RDW_DEF("ss", 0x6841d, "red_ss2_cfg_ddrop","delay drop control""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6841d, "port_en",4,0, "delay drop is enabled for the output port""", "" )
   RDW_DEF_FLD( 0x6841d, "net_port",7,5, "10G network port. That is connected to Gatos. 0 to 4 are valid.""", "" )
   RDW_DEF_FLD( 0x6841d, "tick_time",15,8, "Output proxy queue increment/decrement tick time, in terms of 2.67ns cycles.\nAfter every tick_time cycles, the hardware will increment all the\npaused FPQ cntrs by 1 or decrement all the proxy queues""", "" )
   RDW_DEF_FLD( 0x6841d, "class_en",19,16, "delay drop is enabled for the output class""", "" )
   RDW_DEF("ss", 0x6c41d, "red_ss3_cfg_ddrop","delay drop control""", 0xfffff, 0x0, "cfg")
   RDW_DEF_FLD( 0x6c41d, "port_en",4,0, "delay drop is enabled for the output port""", "" )
   RDW_DEF_FLD( 0x6c41d, "net_port",7,5, "10G network port. That is connected to Gatos. 0 to 4 are valid.""", "" )
   RDW_DEF_FLD( 0x6c41d, "tick_time",15,8, "Output proxy queue increment/decrement tick time, in terms of 2.67ns cycles.\nAfter every tick_time cycles, the hardware will increment all the\npaused FPQ cntrs by 1 or decrement all the proxy queues""", "" )
   RDW_DEF_FLD( 0x6c41d, "class_en",19,16, "delay drop is enabled for the output class""", "" )


   RDW_DEF("ss", 0x6041e, "red_ss0_cfg_ddrop_threshold","delay drop threshold""", 0xffffffff, 0xffffffff, "cfg")
   RDW_DEF_FLD( 0x6041e, "class0",7,0, "drop threshold for class0: Indicates if the oq cell counter added the proxy queue crosses this threshold, the oq can discard a frame. Interms of 32 cells. """, "" )
   RDW_DEF_FLD( 0x6041e, "class1",15,8, "drop threshold for class1: same as class0""", "" )
   RDW_DEF_FLD( 0x6041e, "class2",23,16, "drop threshold for class2: same as class0""", "" )
   RDW_DEF_FLD( 0x6041e, "class3",31,24, "drop threshold for class3: same as class0""", "" )
   RDW_DEF("ss", 0x6441e, "red_ss1_cfg_ddrop_threshold","delay drop threshold""", 0xffffffff, 0xffffffff, "cfg")
   RDW_DEF_FLD( 0x6441e, "class0",7,0, "drop threshold for class0: Indicates if the oq cell counter added the proxy queue crosses this threshold, the oq can discard a frame. Interms of 32 cells. """, "" )
   RDW_DEF_FLD( 0x6441e, "class1",15,8, "drop threshold for class1: same as class0""", "" )
   RDW_DEF_FLD( 0x6441e, "class2",23,16, "drop threshold for class2: same as class0""", "" )
   RDW_DEF_FLD( 0x6441e, "class3",31,24, "drop threshold for class3: same as class0""", "" )
   RDW_DEF("ss", 0x6841e, "red_ss2_cfg_ddrop_threshold","delay drop threshold""", 0xffffffff, 0xffffffff, "cfg")
   RDW_DEF_FLD( 0x6841e, "class0",7,0, "drop threshold for class0: Indicates if the oq cell counter added the proxy queue crosses this threshold, the oq can discard a frame. Interms of 32 cells. """, "" )
   RDW_DEF_FLD( 0x6841e, "class1",15,8, "drop threshold for class1: same as class0""", "" )
   RDW_DEF_FLD( 0x6841e, "class2",23,16, "drop threshold for class2: same as class0""", "" )
   RDW_DEF_FLD( 0x6841e, "class3",31,24, "drop threshold for class3: same as class0""", "" )
   RDW_DEF("ss", 0x6c41e, "red_ss3_cfg_ddrop_threshold","delay drop threshold""", 0xffffffff, 0xffffffff, "cfg")
   RDW_DEF_FLD( 0x6c41e, "class0",7,0, "drop threshold for class0: Indicates if the oq cell counter added the proxy queue crosses this threshold, the oq can discard a frame. Interms of 32 cells. """, "" )
   RDW_DEF_FLD( 0x6c41e, "class1",15,8, "drop threshold for class1: same as class0""", "" )
   RDW_DEF_FLD( 0x6c41e, "class2",23,16, "drop threshold for class2: same as class0""", "" )
   RDW_DEF_FLD( 0x6c41e, "class3",31,24, "drop threshold for class3: same as class0""", "" )


    RDW_DEF_DHS("ss", 0x60420, "red_ss0_dhs_ddrop", "ddrop status counters.""", 0x3fff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x60420, "",13,0,"ddrop status.","" )
    RDW_DEF_DHS("ss", 0x64420, "red_ss1_dhs_ddrop", "ddrop status counters.""", 0x3fff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x64420, "",13,0,"ddrop status.","" )
    RDW_DEF_DHS("ss", 0x68420, "red_ss2_dhs_ddrop", "ddrop status counters.""", 0x3fff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x68420, "",13,0,"ddrop status.","" )
    RDW_DEF_DHS("ss", 0x6c420, "red_ss3_dhs_ddrop", "ddrop status counters.""", 0x3fff, 0x0, "dhs")
    RDW_DEF_DHS_FLD( 0x6c420, "",13,0,"ddrop status.","" )


